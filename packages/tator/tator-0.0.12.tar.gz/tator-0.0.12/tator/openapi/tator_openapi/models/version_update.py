# coding: utf-8

"""
    Tator REST API

    Interface to the Tator backend.  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tator_openapi.configuration import Configuration


class VersionUpdate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bases': 'list[int]',
        'description': 'str',
        'name': 'str',
        'show_empty': 'bool'
    }

    attribute_map = {
        'bases': 'bases',
        'description': 'description',
        'name': 'name',
        'show_empty': 'show_empty'
    }

    def __init__(self, bases=None, description='', name=None, show_empty=True, local_vars_configuration=None):  # noqa: E501
        """VersionUpdate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._bases = None
        self._description = None
        self._name = None
        self._show_empty = None
        self.discriminator = None

        if bases is not None:
            self.bases = bases
        if description is not None:
            self.description = description
        if name is not None:
            self.name = name
        if show_empty is not None:
            self.show_empty = show_empty

    @property
    def bases(self):
        """Gets the bases of this VersionUpdate.  # noqa: E501

        Array of other version IDs that are dependencies of this version.  # noqa: E501

        :return: The bases of this VersionUpdate.  # noqa: E501
        :rtype: list[int]
        """
        return self._bases

    @bases.setter
    def bases(self, bases):
        """Sets the bases of this VersionUpdate.

        Array of other version IDs that are dependencies of this version.  # noqa: E501

        :param bases: The bases of this VersionUpdate.  # noqa: E501
        :type bases: list[int]
        """

        self._bases = bases

    @property
    def description(self):
        """Gets the description of this VersionUpdate.  # noqa: E501

        Description of the version.  # noqa: E501

        :return: The description of this VersionUpdate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VersionUpdate.

        Description of the version.  # noqa: E501

        :param description: The description of this VersionUpdate.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this VersionUpdate.  # noqa: E501

        Name of the version.  # noqa: E501

        :return: The name of this VersionUpdate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VersionUpdate.

        Name of the version.  # noqa: E501

        :param name: The name of this VersionUpdate.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def show_empty(self):
        """Gets the show_empty of this VersionUpdate.  # noqa: E501

        Whether to show this version on media for which no annotations exist.  # noqa: E501

        :return: The show_empty of this VersionUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._show_empty

    @show_empty.setter
    def show_empty(self, show_empty):
        """Sets the show_empty of this VersionUpdate.

        Whether to show this version on media for which no annotations exist.  # noqa: E501

        :param show_empty: The show_empty of this VersionUpdate.  # noqa: E501
        :type show_empty: bool
        """

        self._show_empty = show_empty

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VersionUpdate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VersionUpdate):
            return True

        return self.to_dict() != other.to_dict()
