# coding: utf-8

"""
    Tator REST API

    Interface to the Tator backend.  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tator_openapi.configuration import Configuration


class AudioDefinition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'codec': 'str',
        'codec_description': 'str',
        'codec_mime': 'str',
        'host': 'str',
        'http_auth': 'str',
        'path': 'str'
    }

    attribute_map = {
        'codec': 'codec',
        'codec_description': 'codec_description',
        'codec_mime': 'codec_mime',
        'host': 'host',
        'http_auth': 'http_auth',
        'path': 'path'
    }

    def __init__(self, codec=None, codec_description=None, codec_mime=None, host=None, http_auth=None, path=None, local_vars_configuration=None):  # noqa: E501
        """AudioDefinition - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._codec = None
        self._codec_description = None
        self._codec_mime = None
        self._host = None
        self._http_auth = None
        self._path = None
        self.discriminator = None

        self.codec = codec
        if codec_description is not None:
            self.codec_description = codec_description
        if codec_mime is not None:
            self.codec_mime = codec_mime
        if host is not None:
            self.host = host
        if http_auth is not None:
            self.http_auth = http_auth
        if path is not None:
            self.path = path

    @property
    def codec(self):
        """Gets the codec of this AudioDefinition.  # noqa: E501

        Human readable codec.  # noqa: E501

        :return: The codec of this AudioDefinition.  # noqa: E501
        :rtype: str
        """
        return self._codec

    @codec.setter
    def codec(self, codec):
        """Sets the codec of this AudioDefinition.

        Human readable codec.  # noqa: E501

        :param codec: The codec of this AudioDefinition.  # noqa: E501
        :type codec: str
        """
        if self.local_vars_configuration.client_side_validation and codec is None:  # noqa: E501
            raise ValueError("Invalid value for `codec`, must not be `None`")  # noqa: E501

        self._codec = codec

    @property
    def codec_description(self):
        """Gets the codec_description of this AudioDefinition.  # noqa: E501

        Description other than codec.  # noqa: E501

        :return: The codec_description of this AudioDefinition.  # noqa: E501
        :rtype: str
        """
        return self._codec_description

    @codec_description.setter
    def codec_description(self, codec_description):
        """Sets the codec_description of this AudioDefinition.

        Description other than codec.  # noqa: E501

        :param codec_description: The codec_description of this AudioDefinition.  # noqa: E501
        :type codec_description: str
        """

        self._codec_description = codec_description

    @property
    def codec_mime(self):
        """Gets the codec_mime of this AudioDefinition.  # noqa: E501

        Example mime: \"video/mp4; codecs=\"avc1.64001e\"\". Only relevant for streaming files, will assume example above if not present.  # noqa: E501

        :return: The codec_mime of this AudioDefinition.  # noqa: E501
        :rtype: str
        """
        return self._codec_mime

    @codec_mime.setter
    def codec_mime(self, codec_mime):
        """Sets the codec_mime of this AudioDefinition.

        Example mime: \"video/mp4; codecs=\"avc1.64001e\"\". Only relevant for streaming files, will assume example above if not present.  # noqa: E501

        :param codec_mime: The codec_mime of this AudioDefinition.  # noqa: E501
        :type codec_mime: str
        """

        self._codec_mime = codec_mime

    @property
    def host(self):
        """Gets the host of this AudioDefinition.  # noqa: E501

        If supplied will use this instead of currently connected host, e.g. https://example.com  # noqa: E501

        :return: The host of this AudioDefinition.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this AudioDefinition.

        If supplied will use this instead of currently connected host, e.g. https://example.com  # noqa: E501

        :param host: The host of this AudioDefinition.  # noqa: E501
        :type host: str
        """

        self._host = host

    @property
    def http_auth(self):
        """Gets the http_auth of this AudioDefinition.  # noqa: E501

        If specified will be used for HTTP authorization in request for media, i.e. \"bearer <token>\".  # noqa: E501

        :return: The http_auth of this AudioDefinition.  # noqa: E501
        :rtype: str
        """
        return self._http_auth

    @http_auth.setter
    def http_auth(self, http_auth):
        """Sets the http_auth of this AudioDefinition.

        If specified will be used for HTTP authorization in request for media, i.e. \"bearer <token>\".  # noqa: E501

        :param http_auth: The http_auth of this AudioDefinition.  # noqa: E501
        :type http_auth: str
        """

        self._http_auth = http_auth

    @property
    def path(self):
        """Gets the path of this AudioDefinition.  # noqa: E501

        Path to file.  # noqa: E501

        :return: The path of this AudioDefinition.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this AudioDefinition.

        Path to file.  # noqa: E501

        :param path: The path of this AudioDefinition.  # noqa: E501
        :type path: str
        """

        self._path = path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AudioDefinition):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AudioDefinition):
            return True

        return self.to_dict() != other.to_dict()
