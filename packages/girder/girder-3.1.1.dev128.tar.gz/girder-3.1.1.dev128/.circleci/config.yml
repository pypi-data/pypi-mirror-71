---
version: 2.1

executors:
  py3:
    docker:
      # This image uses the newest version of many dependencies
      - image: girder/girder_test:latest
    working_directory: /home/circleci/project
  py3-mongo:
    docker:
      - image: girder/girder_test:latest
      # Use the oldest supported MongoDB
      - image: circleci/mongo:3.6-ram
        command: ["mongod", "--storageEngine", "ephemeralForTest", "--dbpath", "/dev/shm/mongo"]
    working_directory: /home/circleci/project
  machine:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: /home/circleci/project

jobs:
  server-install:
    executor: py3
    steps:
      - checkout:
          path: girder
      - run:
          name: Generate python environment checksum file
          command: ./girder/.circleci/generatePyEnvChecksum.sh > girder/py-env-checksum
      - restore_cache:
          key: venv-py3.6-{{ arch }}-{{ checksum "girder/py-env-checksum" }}
      - run:
          name: Create virtual environment (if necessary)
          command: if [ ! -d girder_env ]; then python3 -m venv girder_env; fi
      - run:
          name: Activate virtual environment
          command: echo ". $CIRCLE_WORKING_DIRECTORY/girder_env/bin/activate" >> $BASH_ENV
      - run:
          name: Upgrade Python toolchain
          command: pip install --upgrade pip setuptools
      - run:
          name: Install Girder
          command: >-
            pip install
            --upgrade
            --upgrade-strategy eager
            --editable .[sftp,mount]
            --editable clients/python
            --requirement requirements-dev.txt
          working_directory: girder
      - run:
          name: Reduce workspace size
          command: |
            pyclean girder
            pyclean girder_env
      - save_cache:
          paths: girder_env
          key: venv-py3.6-{{ arch }}-{{ checksum "girder/py-env-checksum" }}
      - persist_to_workspace:
          root: /home/circleci/project
          paths:
            - girder
            - girder_env

  server-test:
    executor: py3-mongo
    steps:
      - attach_workspace:
          at: /home/circleci/project
      - run:
          name: Activate virtual environment
          command: echo ". $CIRCLE_WORKING_DIRECTORY/girder_env/bin/activate" >> $BASH_ENV
      - run:
          name: Create Girder build directory
          command: mkdir girder_build
      - run:
          name: Run CTest
          command: >-
            ctest
            --extra-verbose
            --script "$CIRCLE_WORKING_DIRECTORY/girder/.circleci/ci_test.cmake"
            --exclude-regex '^server_pytest_core$'
          environment:
            TEST_GROUP: python
            PYTHON_VERSION: 3.6
            PYTHON_EXECUTABLE: /home/circleci/project/girder_env/bin/python
          working_directory: girder_build
      - run:
          name: Run tox
          command: tox -e lint,circleci-py36,docs
          working_directory: girder
      - run:
          name: Make coverage file distinct
          command: >-
            cp
            girder/build/test/coverage/python_temp/.coverage
            girder/build/test/coverage/python_temp/.coverage.py3Coverage
      - store_test_results:
          path: girder/build/test/results
      - persist_to_workspace:
          root: /home/circleci/project
          paths:
            - girder

  web-test:
    executor: py3-mongo
    steps:
      - attach_workspace:
          at: /home/circleci/project
      - run:
          name: Activate virtual environment
          command: echo ". $CIRCLE_WORKING_DIRECTORY/girder_env/bin/activate" >> $BASH_ENV
      - restore_cache:
          key: npm-{{ arch }}-{{ checksum "girder/package-lock.json" }}
      - run:
          name: Install @girder/lint for javascript linting
          command: npm ci
          environment:
            - npm_config_cache: /home/circleci/project/npm_cache
          working_directory: girder
      - run:
          name: Build Girder web client
          command: girder build --dev | cat
          environment:
            - npm_config_cache: /home/circleci/project/npm_cache
      - save_cache:
          paths: npm_cache
          key: npm-{{ arch }}-{{ checksum "girder/package-lock.json" }}
      - run:
          name: Run Javascript linting
          command: npm run lint
          working_directory: girder
      - run:
          name: Create Girder build directory
          command: mkdir girder_build
      - run:
          name: Run CTest
          command: >-
            ctest
            --extra-verbose
            --script "$CIRCLE_WORKING_DIRECTORY/girder/.circleci/ci_test.cmake"
          environment:
            TEST_GROUP: browser
            PYTHON_VERSION: 3.6
            PYTHON_EXECUTABLE: /home/circleci/project/girder_env/bin/python
            JASMINE_TIMEOUT: 15000
          working_directory: girder_build
      - store_artifacts:
          # Failure screenshots from web tests
          path: girder/build/test/artifacts
      - run:
          name: Reduce workspace size
          command: |
            find . | grep --extended-regexp "(__pycache__|\.pyc|\.pyo$)" | xargs rm --recursive --force
            pyclean girder
            pyclean girder_build
            pyclean girder_env
            # We don't need the packaging environment
            rm --recursive --force girder_build/env
            # Remove node_module caches
            rm --recursive --force girder/node_modules/.cache
      - persist_to_workspace:
          root: /home/circleci/project
          paths:
            - girder/node_modules
            - girder/build/test/coverage
            - girder_build
            - girder_env

  integration-test:
    executor: machine
    steps:
      - checkout:
          path: girder
      - run:
          name: Install NodeJS 12
          # CircleCI resets the Bash environment between every step, so any steps using node or npm
          # must first:
          #   source $NVM_DIR/nvm.sh
          command: |
            source $NVM_DIR/nvm.sh
            nvm install v12
            nvm alias default v12
      - run:
          # Technically, we should add the circleci user to the fuse group, log
          # out, and log back in for it to take effect.  This allows fuse to be
          # available to all users without requiring them to be in the fuse
          # group
          name: Allow access to /etc/fuse.conf by all users
          command: sudo chmod a+r /etc/fuse.conf
      - run:
          name: Get rid of existing versions of MongoDB
          command: >-
            sudo rm --force /etc/apt/sources.list.d/*mongo*
            &&
            sudo apt-get remove mongodb-org mongodb-org-tools mongodb-org-shell mongodb-org-server mongodb-org-mongos
            || true
      - run:
          name: Install MongoDB
          command: |
            sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv E162F504A20CDF15827F718D4B7C549A058F8B6B
            echo "deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/4.2 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.2.list
            sudo apt-get update
            sudo apt-get install -y mongodb-org-server
            sudo systemctl start mongod
      - run:
          # The "d3" npm package (required by some Girder plugins) has an optional dependency of
          # "canvas", which requires "node-gyp" to build. node-gyp strictly requires Python 2
          # (https://www.npmjs.com/package/node-gyp), so install it first before switching to
          # Python 3.
          name: Install node-gyp
          command: npm install --global node-gyp
      - run:
          name: Allow Boto to work with Python 3
          command: sudo rm --force /etc/boto.cfg
      - run:
          name: Set up Python 3.6
          command: |
             pyenv install 3.6.3 || true
             pyenv global 3.6.3
      - run:
          name: Create and activate virtual environment
          command: |
            python3 -m venv /home/circleci/.virtualenvs/girder
            echo '. /home/circleci/.virtualenvs/girder/bin/activate' >> $BASH_ENV
      - run:
          name: Install Girder plugin system dependencies
          command: sudo apt-get install -y libldap2-dev libsasl2-dev
      - run:
          name: Install Girder with extras
          command: >-
            pip install
            --upgrade --upgrade-strategy eager
            --editable .[sftp,mount]
            --editable clients/python
            --requirement requirements-dev.txt
          working_directory: girder
      - run:
          name: Create Girder build directory
          command: mkdir girder_build
      - run:
          name: Build Girder web client
          command: |
            source $NVM_DIR/nvm.sh
            girder build --dev | cat
      - run:
          name: CMake
          command: >-
            cmake
            ../girder
            -DPYTHON_VERSION=3.6
            -DPYTHON_EXECUTABLE=/home/circleci/.virtualenvs/girder/bin/python
          working_directory: girder_build
      - run:
          name: make
          command: make --jobs=3
          working_directory: girder_build
      - run:
          name: CTest
          command: >-
            ctest
            --parallel 3
            --extra-verbose
            --label-regex girder_integration
          working_directory: girder_build
          environment:
            JASMINE_TIMEOUT: 15000
      - store_artifacts:
          # Failure screenshots from web tests
          path: girder/build/test/artifacts
      - persist_to_workspace:
          root: /home/circleci/project
          paths:
            - girder/build/test/coverage

  coverage:
    executor: py3
    steps:
      - attach_workspace:
          at: /home/circleci/project
      - run:
          name: Activate virtual environment
          command: echo ". $CIRCLE_WORKING_DIRECTORY/girder_env/bin/activate" >> $BASH_ENV
      - run:
          name: Run CTest
          command: >-
            ctest
            --extra-verbose
            --script "$CIRCLE_WORKING_DIRECTORY/girder/.circleci/ci_test.cmake"
          environment:
            TEST_GROUP: coverage
            PYTHON_VERSION: 3.6
            PYTHON_EXECUTABLE: /home/circleci/project/girder_env/bin/python
            JASMINE_TIMEOUT: 15000
            BUILD_JAVASCRIPT_TESTS: "ON"
          working_directory: girder_build
      - run:
          name: Move machine-readable web coverage file to coverage directory
          # Ideally, this would be output natively to the correct location (outside of the
          # "artifacts" directory for human-readable files), but nyc does not yet support
          # per-reporter configuration of output paths.
          command: >-
            mv
            girder/build/test/artifacts/web_coverage/cobertura-coverage.xml
            girder/build/test/coverage
      - store_artifacts:
          # Human-readable coverage reports
          path: girder/build/test/artifacts
      - run:
          name: Install Codecov client
          command: pip install codecov
      - run:
          name: Upload coverage
          command: >-
            codecov
            --disable search pycov gcov
            --root girder
            --file girder/build/test/coverage/py_coverage.xml girder/build/test/coverage/cobertura-coverage.xml

  public-symbol-test:
    executor: py3
    steps:
      - checkout:
          path: girder
      - run:
          name: Test public symbols
          command: tox -e public_names
          working_directory: girder

  ansible-test:
    executor: py3
    steps:
      - checkout:
          path: girder
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Run Ansible tests
          command: tox -e ansible
          working_directory: girder

  publish:
    executor: py3
    steps:
      - checkout:
          path: girder
      - deploy:
          name: Publish Python packages
          command: tox -e publish
          working_directory: girder
      - deploy:
          name: Publish Ansible role
          command: tox -e release_ansible
          working_directory: girder

  publish-release:
    executor: py3
    steps:
      - checkout:
          path: girder
      - deploy:
          name: Publish npm packages
          command: npm run publish-all
          working_directory: girder

workflows:
  version: 2
  test_all:
    jobs:
      - server-install:
          filters:
            tags:
              only: /^v[0-9]+.*/
      - server-test:
          requires:
            - server-install
          filters:
            tags:
              only: /^v[0-9]+.*/
      - web-test:
          requires:
            - server-install
          filters:
            tags:
              only: /^v[0-9]+.*/
      - integration-test:
          filters:
            tags:
              only: /^v[0-9]+.*/
      - coverage:
          requires:
            - server-test
            - web-test
            - integration-test
          filters:
            tags:
              only: /^v[0-9]+.*/
      - public-symbol-test:
          filters:
            tags:
              only: /^v[0-9]+.*/
      - ansible-test:
          filters:
            tags:
              only: /^v[0-9]+.*/
      - publish:
          requires:
            - coverage
            - public-symbol-test
            - ansible-test
          filters:
            tags:
              only: /^v[0-9]+.*/
            branches:
              only: master
      - publish-release:
          requires:
            - coverage
            - public-symbol-test
            - ansible-test
          filters:
            tags:
              only: /^v[0-9]+.*/
            branches:
              ignore: /.*/
