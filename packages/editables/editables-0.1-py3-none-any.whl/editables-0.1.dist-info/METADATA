Metadata-Version: 2.1
Name: editables
Version: 0.1
Summary: Editable installations
Home-page: https://github.com/pfmoore/editables
Author: Paul Moore
Author-email: p.f.moore@gmail.com
Maintainer: Paul Moore
Maintainer-email: p.f.moore@gmail.com
License: MIT
Project-URL: Source, https://github.com/pfmoore/editables
Project-URL: Tracker, https://github.com/pfmoore/editables/issues
Keywords: packaging,editables
Platform: any
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Programming Language :: Python :: Implementation :: PyPy
Classifier: Topic :: Software Development :: Libraries
Classifier: Topic :: Utilities
Requires-Python: >=3.5
Description-Content-Type: text/markdown
Provides-Extra: test
Requires-Dist: pytest (>=4) ; extra == 'test'
Requires-Dist: virtualenv (>=20) ; extra == 'test'

# A Python library for creating "editable wheels"

This library supports the building of wheels which, when installed, will
expose packages in a local directory on `sys.path` in "editable mode". In
other words, changes to the package source will be  reflected in the package
visible to Python, without needing a reinstall.

## Usage

Suppose you want to build a wheel that exposes the directory `dirname` as an
editable package when installed, equivalent to `pip install -e dirname`.
Build your wheel as follows:

```python
from editables import build_editable

for filename, content in build_editable(dirname):
    # Add content to your wheel, under the name filename
```

By default, this will expose every package in the given directory. You can
control what gets exposed using the `expose` and `hide` arguments of
`build_editable` (see the docstring for details).

This project doesn't build wheels directly. That's the responsibility of
the calling code.


