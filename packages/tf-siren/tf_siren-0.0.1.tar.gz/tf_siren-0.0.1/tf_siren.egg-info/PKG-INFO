Metadata-Version: 2.1
Name: tf-siren
Version: 0.0.1
Summary: Tensorflow 2.0 implementation of Sinusodial Representation networks (SIREN).
Home-page: https://github.com/titu1994/tf_SIREN
Author: Somshubra Majumdar
Author-email: titu1994@gmail.com
License: MIT
Download-URL: https://github.com/titu1994/tf_SIREN
Description: 
        # Tensorflow Sinusodial Representation Networks (SIREN)
        Tensorflow 2.0 implementation of Sinusodial Representation networks (SIREN) from the paper [Implicit Neural Representations with Periodic Activation Functions](https://arxiv.org/abs/2006.09661).
        
        # Usage
        Copy the `tf_siren` folder to your local directory and import either `SinusodialRepresentationDense` or `SIRENModel`.
        
        ```python
        from tf_siren.siren import SinusodialRepresentationDense
        from tf_siren.siren_mlp import SIRENModel
        
        # You can use SinusodialRepresentationDense exactly like you ordinarily use Dense layers.
        ip = tf.keras.layers.Input(shape=[2])
        x = SinusodialRepresentationDense(32,
                                          activation='sine', # default activation function
                                          w0=1.0)(ip)        # w0 represents sin(w0 * x) where x is the input.
                                          
        model = tf.keras.Model(inputs=ip, outputs=x)
        
        # Or directly use the model class to build a multi layer SIREN
        model = SIRENModel(units=256, final_units=3, final_activation='sigmoid',
                           num_layers=5, w0=1.0, w0_initial=30.0)
        ```
        
        # Results on Image Inpainting task
        A partial implementation of the image inpainting task is available as the `train_inpainting_siren.py` and `eval_inpainting_siren.py` scripts inside the `scripts` directory.
        
        Weight files are made available in the repository under the `Release` tab of the project. Extract the weights and place the `checkpoints` folder at the root of the project directory.
        
        These weights generates the following output after 5000 epochs of training with batch size 8192 while using only 10% of the available pixels in the image during training phase.
        
        <img src="https://github.com/titu1994/tf_SIREN/blob/master/images/celtic_knot.png?raw=true" height=100% width=100%>
        
        # Requirements
        Tensorflow 2.0+
        Matplotlib to visualize eval result
        
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Topic :: Software Development :: Libraries
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.0.0
Description-Content-Type: text/markdown
Provides-Extra: cpu
Provides-Extra: gpu
Provides-Extra: tests
