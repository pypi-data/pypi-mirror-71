{"version":3,"sources":["webpack:///./app/types/experiments.tsx","webpack:///./app/data/experimentConfig.tsx","webpack:///./app/utils/withExperiment.tsx","webpack:///./app/views/settings/incidentRules/create.tsx","webpack:///./app/styles/bulletList.tsx","webpack:///./app/views/settings/projectAlerts/alertTypeChooser.tsx","webpack:///./app/views/settings/projectAlerts/create.tsx"],"names":["ExperimentType","experimentConfig","key","type","Organization","parameter","assignments","reduce","acc","exp","withExperiment","Component","experiment","injectLogExperiment","logExperiment","organization","getProps","this","props","WrappedComponent","experimentAssignment","config","experiments","User","ConfigStore","get","React","displayName","getDisplayName","IncidentRulesCreate","handleSubmitSuccess","params","routes","router","location","push","recreateRoute","stepBack","project","onSubmitSuccess","rule","createDefaultRule","projects","slug","BulletList","space","p","theme","gray400","MetricsTooltip","children","title","t","IssuesTooltip","TypeChooserCards","onChange","selected","trackedOnChange","trackAnalyticsEvent","eventKey","eventName","organization_id","id","Container","TypeCard","interactive","onClick","RadioLabel","aria-label","checked","requireAll","features","hasFeature","Fragment","tct","tooltip","ExampleHeading","code","TypeChooserFlow","state","update","setState","granularity","selectMetricAlerts","selectIssueAlerts","label","help","learnMore","href","value","choices","Example","fontSizeSmall","gray600","gray500","Card","textStyles","Create","alertType","pathname","includes","handleChangeAlertType","parseInt","project_id","hasMetricAlerts","projectId","shouldShowAlertTypeChooser","objSlug","withProject"],"mappings":"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","file":"ProjectAlertsCreate.js","sourcesContent":["import {experimentList, unassignedValue} from 'app/data/experimentConfig';\n\n/**\n * The grouping of the experiment\n */\nexport enum ExperimentType {\n  Organization = 'organization',\n  User = 'user',\n}\n\n/**\n * An experiment configuration object defines an experiment in the frontend.\n * This drives various logic in experiment helpers.\n */\nexport type ExperimentConfig = {\n  /**\n   * The name of the organization. This maps to the key exposed by the\n   * organization manager on the backend.\n   */\n  key: string;\n  /**\n   * The type of experiment. This configures what group the experiment is\n   * performed on.\n   *\n   * A Organization experiment assigns the whole organization.\n   * A User experiment assigns a single user.\n   */\n  type: ExperimentType;\n  /**\n   * The parameter used to access the assignment value\n   */\n  parameter: string | 'variant' | 'exposed';\n  /**\n   * Possible assignment values of the experiment\n   */\n  assignments: ReadonlyArray<string | number | typeof unassignedValue>;\n};\n\n// NOTE: The code below is mostly type mechanics to provide utility types\n// around experiments for use in experiment helpers. You probably don't need to\n// modify this and likely just need to make changes to the experiment list [0]\n//\n// [0]: app/data/experimentConfig.tsx\n\ntype ExperimentList = typeof experimentList[number];\n\ntype ExperimentSelect<\n  C extends ExperimentConfig,\n  N extends ExperimentConfig['key']\n> = C extends {key: N} ? C : never;\n\ntype TypeSelect<\n  C extends ExperimentConfig,\n  T extends ExperimentConfig['type']\n> = C extends {type: T} ? C : never;\n\n/**\n * A mapping of experiment key to the experiment configuration.\n */\nexport type Experiments = {\n  [E in ExperimentList['key']]: ExperimentSelect<ExperimentList, E>;\n};\n\n/**\n * Represents an active experiment key\n */\nexport type ExperimentKey = keyof Experiments;\n\ntype GetExperimentAssignment<E extends ExperimentList['key']> = {\n  [K in E]: Experiments[K]['assignments'][number];\n};\n\nexport type OrgExperiments = GetExperimentAssignment<\n  TypeSelect<ExperimentList, ExperimentType.Organization>['key']\n>;\n\nexport type UserExperiments = GetExperimentAssignment<\n  TypeSelect<ExperimentList, ExperimentType.User>['key']\n>;\n\nexport type ExperimentAssignment = GetExperimentAssignment<ExperimentList['key']>;\n","import {Experiments, ExperimentType} from 'app/types/experiments';\n\n/**\n * This is the value an experiment will have when the unit of assignment\n * (organization, user, etc) is not part of any experiment group.\n *\n * This likely indicates they should see nothing, or the original version of\n * what's being tested.\n */\nexport const unassignedValue = -1;\n\n/**\n * Frontend experiment configuration object\n */\nexport const experimentList = [\n  {\n    key: 'AlertDefaultsExperiment',\n    type: ExperimentType.Organization,\n    parameter: 'variant',\n    assignments: ['controlV1', '2Optionsv1', '3OptionsV2'],\n  },\n  {\n    key: 'IntegrationDirectoryCategoryExperiment',\n    type: ExperimentType.Organization,\n    parameter: 'variant',\n    assignments: ['0', '1'],\n  },\n  {\n    key: 'TrialEndingNotice',\n    type: ExperimentType.Organization,\n    parameter: 'exposed',\n    assignments: [0, 1],\n  },\n  {\n    key: 'MetricAlertsTypeChooser',\n    type: ExperimentType.Organization,\n    parameter: 'variant',\n    assignments: ['boolean', 'flowChoice', unassignedValue],\n  },\n] as const;\n\nexport const experimentConfig = experimentList.reduce(\n  (acc, exp) => ({...acc, [exp.key]: exp}),\n  {}\n) as Experiments;\n","import React from 'react';\n\nimport ConfigStore from 'app/stores/configStore';\nimport {Organization} from 'app/types';\nimport {getDisplayName} from 'app/utils/environment';\nimport {experimentConfig, unassignedValue} from 'app/data/experimentConfig';\nimport {logExperiment} from 'app/utils/analytics';\nimport {\n  Experiments,\n  ExperimentKey,\n  ExperimentAssignment,\n  ExperimentType,\n  OrgExperiments,\n  UserExperiments,\n} from 'app/types/experiments';\n\ntype Options<E extends ExperimentKey, L extends boolean> = {\n  /**\n   * The key of the experiment that will be injected into the component\n   */\n  experiment: E;\n  /**\n   * By default this HoC will log the exposure of the experiment upon mounting\n   * of the component.\n   *\n   * If this is undesirable, for example if the experiment is hidden behind\n   * some user action beyond this component being mounted, then you will want\n   * to customize when exposure to the experiment has been logged.\n   *\n   * Marking this value as true will inject a `logExperiment` function as a\n   * prop which takes no parameters and will log exposure of the experiment\n   * when called.\n   *\n   * NOTE: If set to true, YOU ARE RESPONSIBLE for logging exposure of the\n   *       experiment!! If you do not log exposure your experiment will not be\n   *       correct!!\n   */\n  injectLogExperiment?: L;\n};\n\ntype ExpectedProps<T extends ExperimentType> = T extends 'organization'\n  ? {organization: Organization}\n  : {};\n\ntype InjectedExperimentProps<E extends ExperimentKey, L extends boolean> = {\n  /**\n   * The value of the injected experiment. Use this to determine behavior of\n   * your component depending on the value.\n   */\n  experimentAssignment: ExperimentAssignment[E];\n} & (L extends true ? LogExperimentProps : {});\n\ntype LogExperimentProps = {\n  /**\n   * Call this method when the user has been exposed to the experiment this\n   * component has been provided the value of.\n   */\n  logExperiment: () => void;\n};\n\n/**\n * A HoC wrapper that injects `experimentAssignment` into a component\n *\n * This wrapper will automatically log exposure of the experiment upon\n * receiving the componentDidMount lifecycle event.\n *\n * For organization experiments, an organization object must be provided to the\n * component. You may wish to use the withOrganization HoC for this.\n *\n * If exposure logging upon mount is not desirable, The `injectLogExperiment`\n * option may be of use.\n *\n * NOTE: When using this you will have to type the `experimentAssignment` prop\n *       on your component. For this you should use the `ExperimentAssignment`\n *       mapped type.\n */\nfunction withExperiment<\n  E extends ExperimentKey,\n  L extends boolean,\n  P extends InjectedExperimentProps<E, L>\n>(Component: React.ComponentType<P>, {experiment, injectLogExperiment}: Options<E, L>) {\n  type Props = Omit<P, keyof InjectedExperimentProps<E, L>> &\n    ExpectedProps<Experiments[E]['type']>;\n\n  return class extends React.Component<Props> {\n    static displayName = `withExperiment[${experiment}](${getDisplayName(Component)})`;\n\n    // NOTE(ts): Because of the type complexity of this HoC, typescript\n    // has a hard time understanding how to narrow Experiments[E]['type']\n    // when we type assert on it.\n    //\n    // This means we have to do some typecasting to massage things into working\n    // as expected.\n    //\n    // We DO guarantee the external API of this HoC is typed accurately.\n\n    componentDidMount() {\n      if (!injectLogExperiment) {\n        this.logExperiment();\n      }\n    }\n\n    getProps<P extends ExperimentType>() {\n      return (this.props as unknown) as ExpectedProps<P>;\n    }\n\n    get config() {\n      return experimentConfig[experiment];\n    }\n\n    get experimentAssignment() {\n      const {type} = this.config;\n\n      if (type === ExperimentType.Organization) {\n        const key = experiment as keyof OrgExperiments;\n        return this.getProps<typeof type>().organization.experiments[key];\n      }\n\n      if (type === ExperimentType.User) {\n        const key = experiment as keyof UserExperiments;\n        return ConfigStore.get('user').experiments[key];\n      }\n\n      return unassignedValue;\n    }\n\n    logExperiment = () =>\n      logExperiment({\n        key: experiment,\n        organization: this.getProps<ExperimentType.Organization>().organization,\n      });\n\n    render() {\n      const WrappedComponent = Component as React.JSXElementConstructor<any>;\n\n      const props = {\n        experimentAssignment: this.experimentAssignment,\n        ...(injectLogExperiment ? {logExperiment: this.logExperiment} : {}),\n        ...this.props,\n      } as unknown;\n\n      return <WrappedComponent {...(props as P)} />;\n    }\n  };\n}\n\nexport default withExperiment;\n","import {RouteComponentProps} from 'react-router/lib/Router';\nimport React from 'react';\n\nimport {Organization, Project} from 'app/types';\nimport {createDefaultRule} from 'app/views/settings/incidentRules/constants';\nimport recreateRoute from 'app/utils/recreateRoute';\n\nimport RuleForm from './ruleForm';\n\ntype RouteParams = {\n  orgId: string;\n  projectId: string;\n  ruleId?: string;\n};\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n} & RouteComponentProps<RouteParams, {}>;\n\n/**\n * Show metric rules form with an empty rule. Redirects to alerts list after creation.\n */\nclass IncidentRulesCreate extends React.Component<Props> {\n  handleSubmitSuccess = () => {\n    const {params, routes, router, location} = this.props;\n\n    router.push(recreateRoute('', {params, routes, location, stepBack: -1}));\n  };\n\n  render() {\n    const {project, ...props} = this.props;\n\n    return (\n      <RuleForm\n        onSubmitSuccess={this.handleSubmitSuccess}\n        rule={{...createDefaultRule(), projects: [project.slug]}}\n        {...props}\n      />\n    );\n  }\n}\n\nexport default IncidentRulesCreate;\n","import styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\n\nconst BulletList = styled('ul')`\n  padding: 0;\n  list-style: none;\n\n  li {\n    position: relative;\n    padding-left: 32px;\n    margin-bottom: ${space(0.75)};\n\n    &:before {\n      content: '';\n      position: absolute;\n      top: ${space(1)};\n      left: ${space(1)};\n      display: block;\n      height: 8px;\n      width: 8px;\n      background: ${p => p.theme.gray400};\n      border-radius: 50%;\n    }\n  }\n`;\n\nexport default BulletList;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport Card from 'app/components/card';\nimport {t, tct} from 'app/locale';\nimport space from 'app/styles/space';\nimport Radio from 'app/components/radio';\nimport textStyles from 'app/styles/text';\nimport BulletList from 'app/styles/bulletList';\nimport FeatureBadge from 'app/components/featureBadge';\nimport Tooltip from 'app/components/tooltip';\nimport {Panel, PanelHeader} from 'app/components/panels';\nimport RadioField from 'app/views/settings/components/forms/radioField';\nimport Feature from 'app/components/acl/feature';\nimport ExternalLink from 'app/components/links/externalLink';\nimport withExperiment from 'app/utils/withExperiment';\nimport {ExperimentAssignment} from 'app/types/experiments';\nimport {Organization} from 'app/types';\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\n\ntype AlertType = 'metric' | 'issue' | null;\n\ntype Props = {\n  organization: Organization;\n  selected?: string | null;\n  onChange: (type: AlertType) => void;\n};\n\nconst MetricsTooltip = ({children}: {children?: React.ReactNode}) => (\n  <Tooltip\n    title={t(\n      `A metric is the value of an aggregate function like count() or avg()\n       applied to your events over time`\n    )}\n  >\n    <abbr>{children}</abbr>\n  </Tooltip>\n);\n\nconst IssuesTooltip = ({children}: {children?: React.ReactNode}) => (\n  <Tooltip\n    title={t(\n      `Sentry groups similar events into an Issue based on their stack trace\n       and other factors.`\n    )}\n  >\n    <abbr>{children}</abbr>\n  </Tooltip>\n);\n\nconst TypeChooserCards = ({onChange, organization, selected}: Props) => {\n  const trackedOnChange = (type: AlertType) => {\n    trackAnalyticsEvent({\n      eventKey: 'alert_chooser_cards.select',\n      eventName: 'Alert Chooser Cards: Select',\n      organization_id: organization.id,\n      type,\n    });\n\n    onChange(type);\n  };\n\n  return (\n    <Container>\n      <TypeCard interactive onClick={() => trackedOnChange('metric')}>\n        <RadioLabel>\n          <Radio\n            aria-label=\"metric\"\n            checked={selected === 'metric'}\n            onChange={() => trackedOnChange('metric')}\n          />\n          {t('Metric Alert')}\n          <FeatureBadge type=\"beta\" />\n        </RadioLabel>\n        <Feature\n          requireAll\n          features={[\n            'organizations:transaction-events',\n            'organizations:incidents-performance',\n          ]}\n        >\n          {({hasFeature}) =>\n            hasFeature ? (\n              <React.Fragment>\n                <p>\n                  {tct(`Notifies you when a [tooltip:metric] exceeds a threshold.`, {\n                    tooltip: <MetricsTooltip />,\n                  })}\n                </p>\n                {!selected && (\n                  <React.Fragment>\n                    <ExampleHeading>{t('For Example:')}</ExampleHeading>\n                    <BulletList>\n                      <li>{t('Performance metrics like latency and apdex')}</li>\n                      <li>\n                        {t(\n                          `Frequency of error events or users affected in the\n                       project`\n                        )}\n                      </li>\n                    </BulletList>\n                  </React.Fragment>\n                )}\n              </React.Fragment>\n            ) : (\n              <React.Fragment>\n                <p>\n                  {tct(\n                    `Notifies you when a [tooltip:metric] like frequency of events or users affected in\n                   the project exceeds a threshold.`,\n                    {tooltip: <MetricsTooltip />}\n                  )}\n                </p>\n                {!selected && (\n                  <React.Fragment>\n                    <ExampleHeading>{t('For Example:')}</ExampleHeading>\n                    <BulletList>\n                      <li>{t('Total events in the project exceed 1000/minute')}</li>\n                      <li>\n                        {tct(\n                          'Events with tag [code:database] and \"API\" in the title exceed 100/minute',\n                          {code: <code />}\n                        )}\n                      </li>\n                    </BulletList>\n                  </React.Fragment>\n                )}\n              </React.Fragment>\n            )\n          }\n        </Feature>\n      </TypeCard>\n      <TypeCard interactive onClick={() => trackedOnChange('issue')}>\n        <RadioLabel>\n          <Radio\n            aria-label=\"issue\"\n            checked={selected === 'issue'}\n            onChange={() => trackedOnChange('issue')}\n          />\n          {t('Issue Alert')}\n        </RadioLabel>\n        <p>\n          {tct(\n            `Notifies you when individual [tooltip:Sentry Issues] trigger your\n           alerting criteria.`,\n            {tooltip: <IssuesTooltip />}\n          )}\n        </p>\n        {!selected && (\n          <React.Fragment>\n            <ExampleHeading>{t('For Example:')}</ExampleHeading>\n            <BulletList>\n              <li>{t('New Issues or regressions')}</li>\n              <li>{t('Frequency of individual Issues exceeds 100/minute')}</li>\n            </BulletList>\n          </React.Fragment>\n        )}\n      </TypeCard>\n    </Container>\n  );\n};\n\ntype State = {\n  type?: 'frequency' | 'issues';\n  granularity?: 'project' | 'issue';\n};\n\nclass TypeChooserFlow extends React.Component<Props, State> {\n  state: State = {};\n\n  update = (state: Partial<State>) =>\n    this.setState(state, () => {\n      const {type, granularity} = this.state;\n      const {organization, onChange} = this.props;\n\n      const selectMetricAlerts = type === 'frequency' && granularity === 'project';\n\n      const selectIssueAlerts =\n        type === 'issues' || (type === 'frequency' && granularity === 'issue');\n\n      trackAnalyticsEvent({\n        eventKey: 'alert_chooser_flow.select',\n        eventName: 'Alert Chooser Flow: Select',\n        organization_id: organization.id,\n        type,\n        granularity,\n      });\n\n      onChange(selectMetricAlerts ? 'metric' : selectIssueAlerts ? 'issue' : null);\n    });\n\n  render() {\n    const {type, granularity} = this.state;\n\n    return (\n      <Panel>\n        <PanelHeader>{t('Alert details')}</PanelHeader>\n        <RadioField\n          label={t('Alert type')}\n          help={tct(\n            'Remember that Sentry groups similar events into an Issue based on their stack trace and other factors. [learnMore:Learn more]',\n            {\n              learnMore: (\n                <ExternalLink href=\"https://docs.sentry.io/data-management/event-grouping/\" />\n              ),\n            }\n          )}\n          onChange={value => this.update({type: value})}\n          value={type}\n          choices={[\n            ['frequency', t('Frequency of events or users affected increasing')],\n            ['issues', t('New issues and regressions')],\n          ]}\n        />\n        {type === 'frequency' && (\n          <RadioField\n            label={t('Granularity')}\n            help={t(\n              'Frequency thresholds can be set per Issue or for the entire project.'\n            )}\n            onChange={value => this.update({granularity: value})}\n            value={granularity}\n            choices={[\n              [\n                'project',\n                t('Frequency of events in entire project'),\n                <React.Fragment key=\"list\">\n                  <Example>{t('Total events in the project exceed 1000/minute')}</Example>\n                  <Example>\n                    {t(\n                      'Events with tag `database` and API in the title exceed 100/minute'\n                    )}\n                  </Example>\n                </React.Fragment>,\n              ],\n              [\n                'issue',\n                t('Frequency of individual Issues'),\n\n                <React.Fragment key=\"list\">\n                  <Example>\n                    {t(\n                      `Any single Issue on the checkout page happens more than\n                       100 times in a minute.`\n                    )}\n                  </Example>\n                </React.Fragment>,\n              ],\n            ]}\n          />\n        )}\n      </Panel>\n    );\n  }\n}\n\nconst RadioLabel = styled('label')`\n  cursor: pointer;\n  margin-bottom: ${space(3)};\n  display: grid;\n  grid-auto-flow: column;\n  grid-auto-columns: max-content;\n  align-items: center;\n  grid-gap: ${space(2)};\n`;\n\nconst ExampleHeading = styled('div')`\n  text-transform: uppercase;\n  font-size: ${p => p.theme.fontSizeSmall};\n  font-weight: bold;\n  color: ${p => p.theme.gray600};\n  margin-bottom: ${space(2)};\n`;\n\nconst Example = styled('div')`\n  font-size: ${p => p.theme.fontSizeSmall};\n  color: ${p => p.theme.gray500};\n`;\n\nconst Container = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-gap: ${space(3)};\n`;\n\nconst TypeCard = styled(Card)`\n  cursor: pointer;\n  padding: ${space(4)};\n  margin-bottom: ${space(3)};\n  ${textStyles};\n`;\n\ntype ExperimentProps = {\n  experimentAssignment: ExperimentAssignment['MetricAlertsTypeChooser'];\n};\n\nexport default withExperiment(\n  ({experimentAssignment, ...props}: Props & ExperimentProps) =>\n    experimentAssignment === 'flowChoice' ? (\n      <TypeChooserFlow {...props} />\n    ) : (\n      <TypeChooserCards {...props} />\n    ),\n  {experiment: 'MetricAlertsTypeChooser'}\n);\n","import {RouteComponentProps} from 'react-router/lib/Router';\nimport React from 'react';\n\nimport {Organization, Project} from 'app/types';\nimport {t} from 'app/locale';\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\nimport IncidentRulesCreate from 'app/views/settings/incidentRules/create';\nimport IssueEditor from 'app/views/settings/projectAlerts/issueEditor';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport withProject from 'app/utils/withProject';\n\nimport AlertTypeChooser from './alertTypeChooser';\n\ntype RouteParams = {\n  orgId: string;\n  projectId: string;\n};\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  organization: Organization;\n  project: Project;\n  hasMetricAlerts: boolean;\n};\n\ntype AlertType = 'metric' | 'issue' | null;\n\ntype State = {\n  alertType: AlertType;\n};\n\nclass Create extends React.Component<Props, State> {\n  state: State = {\n    alertType: this.props.location.pathname.includes('/alerts/rules/')\n      ? 'issue'\n      : this.props.location.pathname.includes('/alerts/metric-rules/')\n      ? 'metric'\n      : null,\n  };\n\n  componentDidMount() {\n    const {organization, project} = this.props;\n\n    trackAnalyticsEvent({\n      eventKey: 'new_alert_rule.viewed',\n      eventName: 'New Alert Rule: Viewed',\n      organization_id: parseInt(organization.id, 10),\n      project_id: parseInt(project.id, 10),\n    });\n  }\n\n  handleChangeAlertType = (alertType: AlertType) => {\n    // alertType should be `issue` or `metric`\n    this.setState({alertType});\n  };\n\n  render() {\n    const {hasMetricAlerts, organization} = this.props;\n    const {projectId} = this.props.params;\n    const {alertType} = this.state;\n\n    const shouldShowAlertTypeChooser = hasMetricAlerts;\n    const title = t('New Alert');\n\n    return (\n      <React.Fragment>\n        <SentryDocumentTitle title={title} objSlug={projectId} />\n        <SettingsPageHeader title={title} />\n\n        {shouldShowAlertTypeChooser && (\n          <AlertTypeChooser\n            organization={organization}\n            selected={alertType}\n            onChange={this.handleChangeAlertType}\n          />\n        )}\n\n        {(!hasMetricAlerts || alertType === 'issue') && <IssueEditor {...this.props} />}\n\n        {hasMetricAlerts && alertType === 'metric' && (\n          <IncidentRulesCreate {...this.props} />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withProject(Create);\n"],"sourceRoot":""}