{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/components/navTabs.tsx","webpack:///./app/components/links/listLink.tsx","webpack:///./app/components/badge.tsx","webpack:///./app/components/breadcrumbs.tsx","webpack:///./app/components/deployBadge.tsx","webpack:///./app/views/releasesV2/detail/utils.tsx","webpack:///./app/views/releasesV2/detail/releaseStat.tsx","webpack:///./app/views/releasesV2/detail/releaseActions.tsx","webpack:///./app/views/releasesV2/detail/releaseHeader.tsx","webpack:///./app/views/releasesV2/detail/pickProjectToContinue.tsx","webpack:///./app/views/releasesV2/detail/index.tsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","routeTitleGen","routeName","orgSlug","withSentry","tmpl","NavTabs","props","underlined","className","tabProps","mergedClassName","classnames","ListLink","isActive","to","query","index","context","router","pathname","getClassName","_classNames","activeClassName","classNames","children","carriedProps","omit","onlyActiveOnIndex","React","Component","displayName","contextTypes","PropTypes","object","isRequired","defaultProps","priorityColors","new","theme","red","strong","blue400","highlight","green400","Badge","priority","text","space","p","gray400","propTypes","oneOfType","string","number","oneOf","Breadcrumbs","crumbs","linkLastItem","length","BreadcrumbList","map","label","preserveGlobalSelection","key","labelKey","mapKey","Fragment","BreadcrumbLink","BreadcrumbItem","BreadcrumbDividerIcon","size","direction","getBreadcrumbListItemStyles","gray500","overflowEllipsis","gray700","gray600","IconChevron","DeployBadge","deploy","version","shouldLinkToIssues","badge","Label","environment","Icon","project","stringifyQueryObject","release","t","Tag","white","fontSizeSmall","IconOpen","deleteRelease","orgId","Client","requestPromise","encodeURIComponent","method","getFilesByRepository","fileList","reduce","filesByRepository","file","filename","repoName","author","type","hasOwnProperty","authors","types","Set","email","add","getCommitsByRepository","commitList","commitsByRepository","commit","repositoryName","repository","name","push","ReleaseStat","Wrapper","Value","breakpoints","fontSizeExtraLarge","ReleaseActions","hasHealthData","handleDelete","a","redirectPath","addLoadingMessage","addSuccessMessage","browserHistory","errorMessage","responseJSON","detail","addErrorMessage","onConfirm","message","disabled","icon","ReleaseHeader","location","releaseMeta","newGroups","url","lastDeploy","dateCreated","commitCount","commitFilesChanged","releaseFileCount","healthData","sessionsCrashed","releasePath","tabs","NavTabsBadge","formatAbbreviatedNumber","Header","Layout","formatVersion","StatsWrapper","dateFinished","DeploysWrapper","date","StyledDeployBadge","value","ReleaseName","anchor","IconWrapper","containerDisplayMode","href","StyledNavTabs","tab","search","borderDark","headerFontSize","PickProjectToContinue","projects","navigating","path","replace","id","openModal","modalProps","needOrg","needProject","nextPath","onFinish","projectSlugs","slug","onClose","ContextPickerBackground","ReleaseContext","createContext","ReleasesV2Detail","shouldReload","params","organization","deploys","pick","Object","values","URL_PARAM","health","basePath","endpoints","deployCount","possiblyWrongProject","state","errors","find","e","status","args","selection","reloading","StyledPageContent","ContentBox","Provider","ReleasesV2DetailContainer","has404Errors","projectId","ProjectsFooterMessage","isProjectMissingInUrl","lockedMessageSubject","shouldForceProject","forceProject","undefined","specificProjectSlugs","disableMultipleProjectSelection","showProjectSettingsLink","projectsFooterMessage","renderProjectsFooterMessage","PageContent","withGlobalSelection","withOrganization"],"mappings":"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","file":"ReleasesV2DetailArtifacts~ReleasesV2DetailCommits.js","sourcesContent":["import DocumentTitle from 'react-document-title';\nimport React from 'react';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true\n): string {\n  const tmpl = `${routeName} - ${orgSlug}`;\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\ntype Props = {\n  underlined?: boolean;\n  className?: string;\n};\n\ntype NavProps = Omit<React.HTMLProps<HTMLUListElement>, keyof Props> & Props;\n\nfunction NavTabs(props: NavProps) {\n  const {underlined, className, ...tabProps} = props;\n  const mergedClassName = classnames('nav nav-tabs', className, {\n    'border-bottom': underlined,\n  });\n  return <ul className={mergedClassName} {...tabProps} />;\n}\n\nNavTabs.propTypes = {\n  underlined: PropTypes.bool,\n};\n\nexport default NavTabs;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport omit from 'lodash/omit';\nimport {Link} from 'react-router';\nimport classNames from 'classnames';\nimport {LocationDescriptor} from 'history';\n\ntype DefaultProps = {\n  index: boolean;\n  activeClassName: string;\n};\n\ntype Props = DefaultProps & {\n  to: LocationDescriptor;\n  className?: string;\n  query?: string;\n  onClick?: () => void;\n  // If supplied by parent component, decides whether link element\n  // is \"active\" or not ... overriding default behavior of strict\n  // route matching\n  isActive?: (location: LocationDescriptor, indexOnly?: boolean) => boolean;\n};\n\nclass ListLink extends React.Component<Props> {\n  static displayName = 'ListLink';\n\n  static contextTypes = {\n    router: PropTypes.object.isRequired,\n  };\n\n  static defaultProps: DefaultProps = {\n    activeClassName: 'active',\n    index: false,\n  };\n\n  isActive = () => {\n    const {isActive, to, query, index} = this.props;\n\n    return (isActive || this.context.router.isActive)({pathname: to, query}, index);\n  };\n\n  getClassName = () => {\n    const _classNames = {};\n    const {className, activeClassName} = this.props;\n\n    if (className) {\n      _classNames[className] = true;\n    }\n\n    if (this.isActive()) {\n      _classNames[activeClassName] = true;\n    }\n\n    return classNames(_classNames);\n  };\n\n  render() {\n    const {index, children} = this.props;\n    const carriedProps = omit(this.props, 'activeClassName', 'isActive', 'index');\n\n    return (\n      <li className={this.getClassName()}>\n        <Link {...carriedProps} onlyActiveOnIndex={index}>\n          {children}\n        </Link>\n      </li>\n    );\n  }\n}\n\nexport default ListLink;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\nimport theme from 'app/utils/theme';\n\nconst priorityColors = {\n  new: theme.red,\n  strong: theme.blue400,\n  highlight: theme.green400,\n} as const;\n\ntype Props = React.HTMLProps<HTMLSpanElement> & {\n  text?: string | number | null;\n  priority?: keyof typeof priorityColors;\n  className?: string;\n};\n\nconst Badge = styled(({priority: _priority, text, ...props}: Props) => (\n  <span {...props}>{text}</span>\n))<Props>`\n  display: inline-block;\n  height: 20px;\n  min-width: 20px;\n  line-height: 20px;\n  border-radius: 20px;\n  padding: 0 5px;\n  margin-left: ${space(0.5)};\n  font-size: 75%;\n  font-weight: 600;\n  text-align: center;\n  color: #fff;\n  background: ${p => (p.priority ? priorityColors[p.priority] : theme.gray400)};\n  transition: background 100ms linear;\n\n  position: relative;\n  top: -1px;\n`;\n\nBadge.propTypes = {\n  text: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  priority: PropTypes.oneOf(['strong', 'new', 'highlight']),\n} as any;\n\nexport default Badge;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\nimport {IconChevron} from 'app/icons';\nimport Link from 'app/components/links/link';\nimport GlobalSelectionLink from 'app/components/globalSelectionLink';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport {Theme} from 'app/utils/theme';\n\nexport type Crumb = {\n  /**\n   * Label of the crumb\n   */\n  label: React.ReactNode;\n\n  /**\n   * Link of the crumb\n   */\n  to?: React.ComponentProps<typeof Link>['to'] | null;\n\n  /**\n   * It will keep the global selection values (projects, environments, time) in the\n   * querystring when navigating (GlobalSelectionLink)\n   */\n  preserveGlobalSelection?: boolean;\n\n  /**\n   * Component will try to come up with unique key, but you can provide your own\n   * (used when mapping over crumbs)\n   */\n  key?: string;\n};\n\ntype Props = React.HTMLAttributes<HTMLDivElement> & {\n  /**\n   * Array of crumbs that will be rendered\n   */\n  crumbs: Crumb[];\n\n  /**\n   * As a general rule of thumb we don't want the last item to be link as it most likely\n   * points to the same page we are currently on. This is by default false, so that\n   * people don't have to check if crumb is last in the array and then manually\n   * assign `to: null/undefined` when passing props to this component.\n   */\n  linkLastItem?: boolean;\n};\n\n/**\n * Page breadcrumbs used for navigation, not to be confused with sentry's event breadcrumbs\n */\nconst Breadcrumbs = ({crumbs, linkLastItem = false, ...props}: Props) => {\n  if (crumbs.length === 0) {\n    return null;\n  }\n\n  if (!linkLastItem) {\n    crumbs[crumbs.length - 1].to = null;\n  }\n\n  return (\n    <BreadcrumbList {...props}>\n      {crumbs.map(({label, to, preserveGlobalSelection, key}, index) => {\n        const labelKey = typeof label === 'string' ? label : '';\n        const mapKey =\n          key ?? typeof to === 'string' ? `${labelKey}${to}` : `${labelKey}${index}`;\n\n        return (\n          <React.Fragment key={mapKey}>\n            {to ? (\n              <BreadcrumbLink to={to} preserveGlobalSelection={preserveGlobalSelection}>\n                {label}\n              </BreadcrumbLink>\n            ) : (\n              <BreadcrumbItem>{label}</BreadcrumbItem>\n            )}\n\n            {index < crumbs.length - 1 && (\n              <BreadcrumbDividerIcon size=\"xs\" direction=\"right\" />\n            )}\n          </React.Fragment>\n        );\n      })}\n    </BreadcrumbList>\n  );\n};\n\nconst getBreadcrumbListItemStyles = (p: {theme: Theme}) => `\n  color: ${p.theme.gray500};\n  ${overflowEllipsis};\n  width: auto;\n\n  &:last-child {\n    color: ${p.theme.gray700};\n  }\n`;\n\nconst BreadcrumbList = styled('div')`\n  display: flex;\n  align-items: center;\n  padding: ${space(1)} 0;\n`;\n\nconst BreadcrumbLink = styled(({preserveGlobalSelection, ...props}) =>\n  preserveGlobalSelection ? <GlobalSelectionLink {...props} /> : <Link {...props} />\n)`\n  ${getBreadcrumbListItemStyles}\n\n  &:hover,\n  &:active {\n    color: ${p => p.theme.gray600};\n  }\n`;\n\nconst BreadcrumbItem = styled('span')`\n  ${getBreadcrumbListItemStyles}\n`;\n\nconst BreadcrumbDividerIcon = styled(IconChevron)`\n  color: ${p => p.theme.gray500};\n  margin: 0 ${space(1)};\n  flex-shrink: 0;\n`;\n\nexport default Breadcrumbs;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Deploy} from 'app/types';\nimport Tag from 'app/views/settings/components/tag';\nimport Link from 'app/components/links/link';\nimport {IconOpen} from 'app/icons';\nimport {stringifyQueryObject} from 'app/utils/tokenizeSearch';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\n\ntype Props = {\n  deploy: Deploy;\n  orgSlug?: string;\n  version?: string;\n  className?: string;\n};\n\nconst DeployBadge = ({deploy, orgSlug, version, className}: Props) => {\n  const shouldLinkToIssues = !!orgSlug && !!version;\n\n  const badge = (\n    <Badge className={className}>\n      <Label>{deploy.environment}</Label>\n      {shouldLinkToIssues && <Icon size=\"xs\" />}\n    </Badge>\n  );\n\n  if (!shouldLinkToIssues) {\n    return badge;\n  }\n\n  return (\n    <Link\n      to={{\n        pathname: `/organizations/${orgSlug}/issues/`,\n        query: {\n          project: null,\n          environment: deploy.environment,\n          query: stringifyQueryObject({\n            query: [],\n            release: [version!],\n          }),\n        },\n      }}\n      title={t('Open in Issues')}\n    >\n      {badge}\n    </Link>\n  );\n};\n\nconst Badge = styled(Tag)`\n  background-color: ${p => p.theme.gray700};\n  color: ${p => p.theme.white};\n  font-size: ${p => p.theme.fontSizeSmall};\n  align-items: center;\n  height: 20px;\n`;\n\nconst Label = styled('span')`\n  max-width: 100px;\n  line-height: 20px;\n  ${overflowEllipsis}\n`;\n\nconst Icon = styled(IconOpen)`\n  margin-left: ${space(0.5)};\n  flex-shrink: 0;\n`;\n\nexport default DeployBadge;\n","import {Client} from 'app/api';\nimport {CommitFile, Commit} from 'app/types';\nimport {t} from 'app/locale';\n\nexport type CommitsByRepository = {\n  [key: string]: Commit[];\n};\n\nexport const deleteRelease = (orgId: string, version: string) => {\n  const api = new Client();\n\n  return api.requestPromise(\n    `/organizations/${orgId}/releases/${encodeURIComponent(version)}/`,\n    {\n      method: 'DELETE',\n    }\n  );\n};\n\n/**\n * Convert list of individual file changes into a per-file summary grouped by repository\n */\nexport function getFilesByRepository(fileList: CommitFile[]) {\n  return fileList.reduce((filesByRepository, file) => {\n    const {filename, repoName, author, type} = file;\n\n    if (!filesByRepository.hasOwnProperty(repoName)) {\n      filesByRepository[repoName] = {};\n    }\n\n    if (!filesByRepository[repoName].hasOwnProperty(filename)) {\n      filesByRepository[repoName][filename] = {\n        authors: {},\n        types: new Set(),\n      };\n    }\n\n    filesByRepository[repoName][filename].authors[author.email] = author;\n    filesByRepository[repoName][filename].types.add(type);\n\n    return filesByRepository;\n  }, {});\n}\n\n/**\n * Convert list of individual commits into a summary grouped by repository\n */\nexport function getCommitsByRepository(commitList: Commit[]): CommitsByRepository {\n  return commitList.reduce((commitsByRepository, commit) => {\n    const repositoryName = commit.repository?.name ?? t('unknown');\n\n    if (!commitsByRepository.hasOwnProperty(repositoryName)) {\n      commitsByRepository[repositoryName] = [];\n    }\n\n    commitsByRepository[repositoryName].push(commit);\n\n    return commitsByRepository;\n  }, {});\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\n\ntype Props = {\n  label: string;\n  children: React.ReactNode;\n};\n\nconst ReleaseStat = ({label, children}: Props) => (\n  <Wrapper>\n    <Label>{label}</Label>\n    <Value>{children}</Value>\n  </Wrapper>\n);\n\nconst Wrapper = styled('div')`\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    margin: ${space(2)} ${space(4)} ${space(2)} 0;\n  }\n`;\n\nconst Label = styled('div')`\n  font-weight: 600;\n  font-size: ${p => p.theme.fontSizeSmall};\n  text-transform: uppercase;\n  color: ${p => p.theme.gray500};\n  line-height: 1.3;\n  margin-bottom: ${space(0.25)};\n  white-space: nowrap;\n`;\nconst Value = styled('div')`\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n  color: ${p => p.theme.gray700};\n`;\n\nexport default ReleaseStat;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport {browserHistory} from 'react-router';\n\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport Button from 'app/components/button';\nimport {IconDelete} from 'app/icons';\nimport Confirm from 'app/components/confirm';\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'app/actionCreators/indicator';\nimport Tooltip from 'app/components/tooltip';\n\nimport {deleteRelease} from './utils';\n\ntype Props = {\n  orgId: string;\n  version: string;\n  hasHealthData: boolean;\n};\n\nconst ReleaseActions = ({orgId, version, hasHealthData}: Props) => {\n  const handleDelete = async () => {\n    const redirectPath = `/organizations/${orgId}/releases/`;\n    addLoadingMessage(t('Deleting Release...'));\n\n    try {\n      await deleteRelease(orgId, version);\n      addSuccessMessage(t('Release was successfully removed.'));\n      browserHistory.push(redirectPath);\n    } catch (error) {\n      const errorMessage =\n        error.responseJSON?.detail ?? t('Release could not be be removed.');\n      addErrorMessage(errorMessage);\n    }\n  };\n\n  return (\n    <Wrapper>\n      <Confirm\n        onConfirm={handleDelete}\n        message={t(\n          'Deleting this release is permanent and will affect other projects associated with it. Are you sure you wish to continue?'\n        )}\n      >\n        <div>\n          <Tooltip\n            title={t(\n              'You can only delete releases if they have no issues or health data.'\n            )}\n            disabled={!hasHealthData}\n          >\n            <Button icon={<IconDelete />} disabled={hasHealthData} />\n          </Tooltip>\n        </div>\n      </Confirm>\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled('div')`\n  display: grid;\n  grid-auto-flow: column;\n  grid-auto-columns: min-content;\n  grid-gap: ${space(0.5)};\n\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    width: 100%;\n    margin: ${space(1)} 0 ${space(2)} 0;\n  }\n`;\n\nexport default ReleaseActions;\n","import React from 'react';\nimport {Location} from 'history';\nimport styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\nimport {t} from 'app/locale';\nimport ListLink from 'app/components/links/listLink';\nimport ExternalLink from 'app/components/links/externalLink';\nimport NavTabs from 'app/components/navTabs';\nimport {Release, ReleaseProject, ReleaseMeta} from 'app/types';\nimport Version from 'app/components/version';\nimport Clipboard from 'app/components/clipboard';\nimport {IconCopy, IconOpen} from 'app/icons';\nimport Tooltip from 'app/components/tooltip';\nimport Count from 'app/components/count';\nimport TimeSince from 'app/components/timeSince';\nimport {formatVersion, formatAbbreviatedNumber} from 'app/utils/formatters';\nimport Breadcrumbs from 'app/components/breadcrumbs';\nimport DeployBadge from 'app/components/deployBadge';\nimport Badge from 'app/components/badge';\n\nimport ReleaseStat from './releaseStat';\nimport ReleaseActions from './releaseActions';\n\ntype Props = {\n  location: Location;\n  orgId: string;\n  release: Release;\n  project: Required<ReleaseProject>;\n  releaseMeta: ReleaseMeta;\n};\n\nconst ReleaseHeader = ({location, orgId, release, project, releaseMeta}: Props) => {\n  const {version, newGroups, url, lastDeploy, dateCreated} = release;\n  const {commitCount, commitFilesChanged, releaseFileCount} = releaseMeta;\n  const {hasHealthData, sessionsCrashed} = project.healthData;\n\n  const releasePath = `/organizations/${orgId}/releases/${encodeURIComponent(version)}/`;\n\n  const tabs = [\n    {title: t('Overview'), to: releasePath},\n    {\n      title: (\n        <React.Fragment>\n          {t('Commits')} <NavTabsBadge text={formatAbbreviatedNumber(commitCount)} />\n        </React.Fragment>\n      ),\n      to: `${releasePath}commits/`,\n    },\n    {\n      title: (\n        <React.Fragment>\n          {t('Files Changed')}\n          <NavTabsBadge text={formatAbbreviatedNumber(commitFilesChanged)} />\n        </React.Fragment>\n      ),\n      to: `${releasePath}files-changed/`,\n    },\n    {\n      title: (\n        <React.Fragment>\n          {t('Artifacts')}\n          <NavTabsBadge text={formatAbbreviatedNumber(releaseFileCount)} />\n        </React.Fragment>\n      ),\n      to: `${releasePath}artifacts/`,\n    },\n  ];\n\n  return (\n    <Header>\n      <Layout>\n        <Breadcrumbs\n          crumbs={[\n            {\n              to: `/organizations/${orgId}/releases/`,\n              label: t('Releases'),\n              preserveGlobalSelection: true,\n            },\n            {label: formatVersion(version)},\n          ]}\n        />\n\n        <StatsWrapper>\n          <ReleaseStat\n            label={lastDeploy?.dateFinished ? t('Last Deploy') : t('Date Created')}\n          >\n            <DeploysWrapper>\n              <TimeSince date={lastDeploy?.dateFinished || dateCreated} />\n              {lastDeploy?.dateFinished && <StyledDeployBadge deploy={lastDeploy} />}\n            </DeploysWrapper>\n          </ReleaseStat>\n          {hasHealthData && (\n            <ReleaseStat label={t('Crashes')}>\n              <Count value={sessionsCrashed} />\n            </ReleaseStat>\n          )}\n          <ReleaseStat label={t('New Issues')}>\n            <Count value={newGroups} />\n          </ReleaseStat>\n          <ReleaseActions version={version} orgId={orgId} hasHealthData={hasHealthData} />\n        </StatsWrapper>\n      </Layout>\n\n      <ReleaseName>\n        <Version version={version} anchor={false} />\n\n        <IconWrapper>\n          <Clipboard value={version}>\n            <Tooltip title={version} containerDisplayMode=\"flex\">\n              <IconCopy size=\"xs\" />\n            </Tooltip>\n          </Clipboard>\n        </IconWrapper>\n\n        {!!url && (\n          <IconWrapper>\n            <Tooltip title={url}>\n              <ExternalLink href={url}>\n                <IconOpen size=\"xs\" />\n              </ExternalLink>\n            </Tooltip>\n          </IconWrapper>\n        )}\n      </ReleaseName>\n\n      <StyledNavTabs>\n        {tabs.map(tab => (\n          <ListLink\n            key={tab.to}\n            to={`${tab.to}${location.search}`}\n            isActive={() => tab.to === location.pathname}\n          >\n            {tab.title}\n          </ListLink>\n        ))}\n      </StyledNavTabs>\n    </Header>\n  );\n};\n\nconst Header = styled('div')`\n  padding: ${space(2)} ${space(4)} 0;\n  border-bottom: 1px solid ${p => p.theme.borderDark};\n`;\n\nconst Layout = styled('div')`\n  margin-bottom: ${space(1)};\n  @media (min-width: ${p => p.theme.breakpoints[1]}) {\n    display: grid;\n    grid-column-gap: ${space(3)};\n    grid-template-columns: 1fr 1fr;\n    margin-bottom: 0;\n    align-items: flex-start;\n  }\n`;\n\nconst StatsWrapper = styled('div')`\n  display: flex;\n  flex-wrap: wrap;\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    display: grid;\n    padding: ${space(1.5)} 0;\n    grid-auto-flow: column;\n    grid-gap: ${space(4)};\n  }\n  @media (min-width: ${p => p.theme.breakpoints[1]}) {\n    justify-content: flex-end;\n    text-align: right;\n  }\n`;\n\nconst DeploysWrapper = styled('div')`\n  white-space: nowrap;\n`;\n\nconst StyledDeployBadge = styled(DeployBadge)`\n  margin-left: ${space(1)};\n  bottom: ${space(0.25)};\n`;\n\nconst ReleaseName = styled('div')`\n  font-size: ${p => p.theme.headerFontSize};\n  color: ${p => p.theme.gray700};\n  margin-bottom: ${space(2)};\n  display: flex;\n  align-items: center;\n`;\n\nconst IconWrapper = styled('span')`\n  transition: color 0.3s ease-in-out;\n  margin-left: ${space(1)};\n\n  &,\n  a {\n    color: ${p => p.theme.gray500};\n    display: flex;\n    &:hover {\n      cursor: pointer;\n      color: ${p => p.theme.gray700};\n    }\n  }\n`;\n\nconst StyledNavTabs = styled(NavTabs)`\n  margin-bottom: 0;\n  grid-column: 1 / 2;\n`;\n\nconst NavTabsBadge = styled(Badge)`\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    display: none;\n  }\n`;\n\nexport default ReleaseHeader;\n","import React from 'react';\nimport * as ReactRouter from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {openModal} from 'app/actionCreators/modal';\nimport ContextPickerModalContainer from 'app/components/contextPickerModal';\nimport {ReleaseProject} from 'app/types';\n\ntype Props = {\n  orgSlug: string;\n  version: string;\n  router: ReactRouter.InjectedRouter;\n  projects: ReleaseProject[];\n};\n\nconst PickProjectToContinue = ({orgSlug, version, router, projects}: Props) => {\n  let navigating = false;\n\n  const path = `/organizations/${orgSlug}/releases/${encodeURIComponent(\n    version\n  )}/?project=`;\n\n  // if the project in URL is missing, but this release belongs to only one project, redirect there\n  if (projects.length === 1) {\n    router.replace(path + projects[0].id);\n    return null;\n  }\n\n  openModal(\n    modalProps => (\n      <ContextPickerModalContainer\n        {...modalProps}\n        needOrg={false}\n        needProject\n        nextPath={`${path}:project`}\n        onFinish={pathname => {\n          navigating = true;\n          router.replace(pathname);\n        }}\n        projectSlugs={projects.map(p => p.slug)}\n      />\n    ),\n    {\n      onClose() {\n        // we want this to be executed only if the user didn't select any project\n        // (closed modal either via button, Esc, clicking outside, ...)\n        if (!navigating) {\n          router.push(`/organizations/${orgSlug}/releases/`);\n        }\n      },\n    }\n  );\n\n  return <ContextPickerBackground />;\n};\n\nconst ContextPickerBackground = styled('div')`\n  height: 100vh;\n  width: 100%;\n`;\n\nexport default PickProjectToContinue;\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router/lib/Router';\nimport pick from 'lodash/pick';\nimport styled from '@emotion/styled';\n\nimport {t} from 'app/locale';\nimport {\n  Organization,\n  ReleaseProject,\n  ReleaseMeta,\n  Deploy,\n  GlobalSelection,\n  ReleaseWithHealth,\n} from 'app/types';\nimport AsyncView from 'app/views/asyncView';\nimport GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';\nimport LightWeightNoProjectMessage from 'app/components/lightWeightNoProjectMessage';\nimport {PageContent} from 'app/styles/organization';\nimport withOrganization from 'app/utils/withOrganization';\nimport routeTitleGen from 'app/utils/routeTitle';\nimport {URL_PARAM} from 'app/constants/globalSelectionHeader';\nimport {formatVersion} from 'app/utils/formatters';\nimport AsyncComponent from 'app/components/asyncComponent';\nimport withGlobalSelection from 'app/utils/withGlobalSelection';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport {IconInfo, IconWarning} from 'app/icons';\nimport space from 'app/styles/space';\nimport Alert from 'app/components/alert';\n\nimport ReleaseHeader from './releaseHeader';\nimport PickProjectToContinue from './pickProjectToContinue';\n\ntype ReleaseContext = {\n  release: ReleaseWithHealth;\n  project: Required<ReleaseProject>;\n  deploys: Deploy[];\n  releaseMeta: ReleaseMeta;\n};\nconst ReleaseContext = React.createContext<ReleaseContext>({} as ReleaseContext);\n\ntype RouteParams = {\n  orgId: string;\n  release: string;\n};\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  organization: Organization;\n  selection: GlobalSelection;\n  releaseMeta: ReleaseMeta;\n};\n\ntype State = {\n  release: ReleaseWithHealth;\n  deploys: Deploy[];\n} & AsyncView['state'];\n\nclass ReleasesV2Detail extends AsyncView<Props, State> {\n  shouldReload = true;\n\n  getTitle() {\n    const {params, organization} = this.props;\n    return routeTitleGen(\n      t('Release %s', formatVersion(params.release)),\n      organization.slug,\n      false\n    );\n  }\n\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      deploys: [],\n    };\n  }\n\n  getEndpoints() {\n    const {organization, location, params, releaseMeta} = this.props;\n\n    const query = {\n      ...pick(location.query, [...Object.values(URL_PARAM)]),\n      health: 1,\n    };\n\n    const basePath = `/organizations/${organization.slug}/releases/${encodeURIComponent(\n      params.release\n    )}/`;\n\n    const endpoints: ReturnType<AsyncView['getEndpoints']> = [\n      ['release', basePath, {query}],\n    ];\n\n    if (releaseMeta.deployCount > 0) {\n      endpoints.push(['deploys', `${basePath}deploys/`]);\n    }\n\n    return endpoints;\n  }\n\n  renderError(...args) {\n    const possiblyWrongProject = Object.values(this.state.errors).find(\n      e => e?.status === 404 || e?.status === 403\n    );\n\n    if (possiblyWrongProject) {\n      return (\n        <PageContent>\n          <Alert type=\"error\" icon={<IconWarning />}>\n            {t('This release may not be in your selected project.')}\n          </Alert>\n        </PageContent>\n      );\n    }\n\n    return super.renderError(...args);\n  }\n\n  renderLoading() {\n    return (\n      <PageContent>\n        <LoadingIndicator />\n      </PageContent>\n    );\n  }\n\n  renderBody() {\n    const {organization, location, selection, releaseMeta} = this.props;\n    const {release, deploys, reloading} = this.state;\n    const project = release?.projects.find(p => p.id === selection.projects[0]);\n\n    if (!project || !release) {\n      if (reloading) {\n        return <LoadingIndicator />;\n      }\n\n      return null;\n    }\n\n    return (\n      <LightWeightNoProjectMessage organization={organization}>\n        <StyledPageContent>\n          <ReleaseHeader\n            location={location}\n            orgId={organization.slug}\n            release={release}\n            project={project}\n            releaseMeta={releaseMeta}\n          />\n\n          <ContentBox>\n            <ReleaseContext.Provider value={{release, project, deploys, releaseMeta}}>\n              {this.props.children}\n            </ReleaseContext.Provider>\n          </ContentBox>\n        </StyledPageContent>\n      </LightWeightNoProjectMessage>\n    );\n  }\n}\n\nclass ReleasesV2DetailContainer extends AsyncComponent<Omit<Props, 'releaseMeta'>> {\n  shouldReload = true;\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {organization, params} = this.props;\n    // fetch projects this release belongs to\n    return [\n      [\n        'releaseMeta',\n        `/organizations/${organization.slug}/releases/${encodeURIComponent(\n          params.release\n        )}/meta/`,\n      ],\n    ];\n  }\n\n  renderError(...args) {\n    const has404Errors = Object.values(this.state.errors).find(e => e?.status === 404);\n\n    if (has404Errors) {\n      // This catches a 404 coming from the release endpoint and displays a custom error message.\n      return (\n        <PageContent>\n          <Alert type=\"error\" icon={<IconWarning />}>\n            {t('This release could not be found.')}\n          </Alert>\n        </PageContent>\n      );\n    }\n\n    return super.renderError(...args);\n  }\n\n  isProjectMissingInUrl() {\n    const projectId = this.props.location.query.project;\n\n    return !projectId || typeof projectId !== 'string';\n  }\n\n  renderLoading() {\n    return (\n      <PageContent>\n        <LoadingIndicator />\n      </PageContent>\n    );\n  }\n\n  renderProjectsFooterMessage() {\n    return (\n      <ProjectsFooterMessage>\n        <IconInfo size=\"xs\" /> {t('Only projects with this release are visible.')}\n      </ProjectsFooterMessage>\n    );\n  }\n\n  renderBody() {\n    const {organization, params, router} = this.props;\n    const {releaseMeta} = this.state;\n    const {projects} = releaseMeta;\n\n    if (this.isProjectMissingInUrl()) {\n      return (\n        <PickProjectToContinue\n          orgSlug={organization.slug}\n          version={params.release}\n          router={router}\n          projects={projects}\n        />\n      );\n    }\n\n    return (\n      <GlobalSelectionHeader\n        lockedMessageSubject={t('release')}\n        shouldForceProject={projects.length === 1}\n        forceProject={projects.length === 1 ? projects[0] : undefined}\n        specificProjectSlugs={projects.map(p => p.slug)}\n        disableMultipleProjectSelection\n        showProjectSettingsLink\n        projectsFooterMessage={this.renderProjectsFooterMessage()}\n      >\n        <ReleasesV2Detail {...this.props} releaseMeta={releaseMeta} />\n      </GlobalSelectionHeader>\n    );\n  }\n}\n\nconst StyledPageContent = styled(PageContent)`\n  padding: 0;\n`;\n\nconst ProjectsFooterMessage = styled('div')`\n  display: grid;\n  align-items: center;\n  grid-template-columns: min-content 1fr;\n  grid-gap: ${space(1)};\n`;\n\nconst ContentBox = styled('div')`\n  padding: ${space(4)};\n  flex: 1;\n  background-color: white;\n`;\n\nexport {ReleasesV2DetailContainer, ReleaseContext};\nexport default withGlobalSelection(withOrganization(ReleasesV2DetailContainer));\n"],"sourceRoot":""}