{"version":3,"sources":["webpack:///./app/views/settings/components/settingsPageHeader.tsx","webpack:///./app/views/settings/organizationRelays/time.tsx","webpack:///./app/views/settings/organizationRelays/relays.tsx","webpack:///./app/views/settings/organizationRelays/index.tsx"],"names":["SettingsPageHeading","this","props","icon","title","action","tabs","noTitleStyles","TitleAndActions","Icon","Title","styled","Action","React","Component","defaultProps","p","space","StyledSettingsPageHeading","Time","label","date","Wrapper","TimeLabel","defined","t","theme","fontSizeMedium","fontSizeSmall","gray500","relaysMock","public_key","name","description","first_seen","last_seen","created","last_modified","Relays","handleAdd","relays","state","Fragment","type","tct","linkToDocs","href","map","Content","key","Info","InfoItem","Name","PublicKey","size","PanelAction","target","onClick","priority","AsyncComponent","borderDark","fontSizeLarge","gray600","OrganizationRelays","organization","features","renderDisabled","alert","PanelAlert","featureName","withOrganization"],"mappings":"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","file":"OrganizationRelays.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\nimport {HeaderTitle} from 'app/styles/organization';\n\ntype Props = {\n  // The title\n  title: React.ReactNode;\n\n  // Disables font styles in the title. Allows for more custom titles.\n  noTitleStyles?: boolean;\n\n  className?: string;\n\n  // Icon left of title\n  icon?: React.ReactNode;\n\n  // Actions on opposite end of title bar from the title\n  action?: React.ReactNode;\n\n  tabs?: React.ReactNode;\n};\n\nclass SettingsPageHeading extends React.Component<Props> {\n  static propTypes = {\n    icon: PropTypes.node,\n    title: PropTypes.node.isRequired,\n    action: PropTypes.node,\n    tabs: PropTypes.node,\n    // Disables font styles in the title. Allows for more custom titles.\n    noTitleStyles: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    noTitleStyles: false,\n  };\n\n  render() {\n    const {icon, title, action, tabs, noTitleStyles, ...props} = this.props;\n    return (\n      <div {...props}>\n        <TitleAndActions>\n          {icon && <Icon>{icon}</Icon>}\n          {title && (\n            <Title tabs={tabs} styled={noTitleStyles}>\n              <HeaderTitle>{title}</HeaderTitle>\n            </Title>\n          )}\n          {action && <Action tabs={tabs}>{action}</Action>}\n        </TitleAndActions>\n\n        {tabs && <div>{tabs}</div>}\n      </div>\n    );\n  }\n}\n\ntype TitleProps = {\n  styled?: boolean;\n  tabs?: React.ReactNode;\n};\n\nconst TitleAndActions = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst Title = styled('div')<TitleProps & React.HTMLProps<HTMLDivElement>>`\n  ${p =>\n    !p.styled &&\n    `\n    font-size: 20px;\n    font-weight: bold;`};\n  margin: ${p => (p.tabs ? `${space(4)} 0 ${space(2)}` : `${space(4)} 0`)};\n  flex: 1;\n`;\n\nconst Icon = styled('div')`\n  margin-right: ${space(1)};\n`;\n\nconst Action = styled('div')<{tabs?: React.ReactNode}>`\n  ${p => (p.tabs ? `margin-top: ${space(2)}` : null)};\n`;\n\nconst StyledSettingsPageHeading = styled(SettingsPageHeading)<\n  Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props\n>`\n  font-size: 14px;\n  margin-top: -${space(4)};\n`;\n\nexport default StyledSettingsPageHeading;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {t} from 'app/locale';\nimport TimeSince from 'app/components/timeSince';\nimport space from 'app/styles/space';\nimport {defined} from 'app/utils';\n\ntype Props = {\n  label: string;\n  date?: string | null;\n};\n\nconst Time = ({label, date}: Props) => (\n  <Wrapper>\n    <TimeLabel>{label}</TimeLabel>\n    {!defined(date) ? t('Unknown') : <TimeSince date={date} />}\n  </Wrapper>\n);\n\nexport default Time;\n\nconst Wrapper = styled('div')`\n  display: grid;\n  grid-template-columns: max-content 1fr;\n  grid-gap: ${space(0.5)};\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nconst TimeLabel = styled('h4')`\n  font-size: ${p => p.theme.fontSizeSmall} !important;\n  text-transform: uppercase;\n  color: ${p => p.theme.gray500};\n  margin-bottom: 0 !important;\n`;\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router/lib/Router';\nimport styled from '@emotion/styled';\n\nimport {Panel, PanelBody, PanelHeader, PanelAlert} from 'app/components/panels';\nimport {t, tct} from 'app/locale';\nimport AsyncComponent from 'app/components/asyncComponent';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport {Organization} from 'app/types';\nimport ExternalLink from 'app/components/links/externalLink';\nimport space from 'app/styles/space';\nimport Button from 'app/components/button';\nimport {IconDelete} from 'app/icons';\n\nimport Time from './time';\n\nconst RELAY_DOCS_LINK = 'https://getsentry.github.io/relay/';\n\ntype Relay = {\n  public_key: string;\n  name: string;\n  created: string;\n  first_seen: string;\n  last_seen: string | null;\n  last_modified?: string;\n  description?: string;\n};\n\ntype Props = {\n  organization: Organization;\n} & RouteComponentProps<{orgId: string}, {}>;\n\ntype State = AsyncComponent['state'] & {\n  relays: Array<Relay>;\n};\n\nconst relaysMock: Array<Relay> = [\n  {\n    public_key: '1:bb:6e:af:66:b4:38:e0:62:83:62:15:22:7',\n    name: 'First key',\n    description: 'optional description for the key',\n    first_seen: '2020-02-07T15:17:00Z',\n    last_seen: '2020-02-07T15:17:00Z',\n    created: '2020-02-07T15:17:00Z',\n  },\n  {\n    public_key: '2:bb:6e:af:66:b4:38:e0:62:83:62:15:22:7',\n    name: 'Second key',\n    description: 'optional description for the key',\n    first_seen: '2020-02-07T15:17:00Z',\n    last_seen: '2020-02-07T15:17:00Z',\n    last_modified: '2020-02-07T15:17:00Z',\n    created: '2020-02-07T15:17:00Z',\n  },\n];\n\nclass Relays extends AsyncComponent<Props, State> {\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      relays: relaysMock,\n    };\n  }\n\n  // TODO(Priscila): activate the code below as soon as the endpoint is provided\n  // getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n  //   return [['relays', `/organizations/${this.props.organization.slug}/relay-keys`]];\n  // }\n\n  // handleDelete = (id: Relay['public_key']) => () => {};\n\n  handleAdd = () => {};\n\n  renderBody() {\n    const {relays} = this.state;\n    return (\n      <React.Fragment>\n        <SettingsPageHeader title={t('Relays')} />\n        <Panel>\n          <PanelHeader>{t('Relays')}</PanelHeader>\n          <PanelAlert type=\"info\">\n            {tct('For more details, see [linkToDocs].', {\n              linkToDocs: (\n                <ExternalLink href={RELAY_DOCS_LINK}>\n                  {t('full Relay documentation')}\n                </ExternalLink>\n              ),\n            })}\n          </PanelAlert>\n          <PanelBody>\n            {relays.map(\n              ({public_key, name, created, last_seen, first_seen, last_modified}) => (\n                <Content key={public_key}>\n                  <Info>\n                    <InfoItem>\n                      <Name>{name}</Name>\n                    </InfoItem>\n                    <InfoItem>\n                      <PublicKey>{public_key}</PublicKey>\n                    </InfoItem>\n                    <InfoItem>\n                      <Time label={t('Created:')} date={created} />\n                    </InfoItem>\n                    <InfoItem>\n                      <Time label={t('First Seen:')} date={first_seen} />\n                    </InfoItem>\n                    <InfoItem>\n                      <Time label={t('Last Seen:')} date={last_seen} />\n                    </InfoItem>\n                    <InfoItem>\n                      <Time label={t('Last modified:')} date={last_modified} />\n                    </InfoItem>\n                  </Info>\n                  <Button\n                    title={t('Delete Rule')}\n                    label={t('Delete Rule')}\n                    size=\"small\"\n                    icon={<IconDelete />}\n                  />\n                </Content>\n              )\n            )}\n          </PanelBody>\n          <PanelAction>\n            <Button href={RELAY_DOCS_LINK} target=\"_blank\">\n              {t('Read the docs')}\n            </Button>\n            <Button onClick={this.handleAdd} priority=\"primary\">\n              {t('Add Relay')}\n            </Button>\n          </PanelAction>\n        </Panel>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Relays;\n\nconst Content = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr max-content;\n  align-items: center;\n  border-bottom: 1px solid ${p => p.theme.borderDark};\n  padding: ${space(1)} ${space(2)};\n  :last-child {\n    border-bottom: 0;\n  }\n`;\n\nconst Info = styled('div')`\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  grid-gap: ${space(1)};\n  > *:nth-child(1),\n  > *:nth-child(2) {\n    grid-column: span 4;\n  }\n`;\n\nconst InfoItem = styled('div')`\n  display: flex;\n  align-items: center;\n  height: 100%;\n`;\n\nconst PanelAction = styled('div')`\n  padding: ${space(1)} ${space(2)};\n  display: grid;\n  grid-gap: ${space(1)};\n  grid-template-columns: auto auto;\n  justify-content: flex-end;\n  border-top: 1px solid ${p => p.theme.borderDark};\n`;\n\nconst Name = styled('h4')`\n  font-size: ${p => p.theme.fontSizeLarge} !important;\n  font-weight: 600;\n  margin-bottom: 0 !important;\n  color: ${p => p.theme.gray600};\n`;\n\nconst PublicKey = styled('h5')`\n  font-size: ${p => p.theme.fontSizeMedium} !important;\n  font-weight: 400;\n  margin-bottom: 0 !important;\n`;\n","import React from 'react';\n\nimport Feature from 'app/components/acl/feature';\nimport FeatureDisabled from 'app/components/acl/featureDisabled';\nimport {PanelAlert} from 'app/components/panels';\nimport {t} from 'app/locale';\nimport withOrganization from 'app/utils/withOrganization';\n\nimport Relays from './relays';\n\nconst OrganizationRelays = ({organization, ...props}: Relays['props']) => (\n  <Feature\n    features={['relay-config']}\n    organization={organization}\n    renderDisabled={() => (\n      <FeatureDisabled\n        alert={PanelAlert}\n        features={organization.features}\n        featureName={t('Relays')}\n      />\n    )}\n  >\n    <Relays organization={organization} {...props} />\n  </Feature>\n);\n\nexport default withOrganization(OrganizationRelays);\n"],"sourceRoot":""}