{"version":3,"sources":["webpack:///./app/components/sentryDocumentTitle.tsx","webpack:///./app/components/links/linkWithConfirmation.tsx","webpack:///./app/utils/slugify.tsx","webpack:///./app/utils/crashReports.tsx","webpack:///./app/views/settings/organization/permissionAlert.tsx","webpack:///./app/data/forms/organizationSecurityAndPrivacy.tsx","webpack:///./app/data/forms/organizationGeneralSettings.tsx","webpack:///./app/views/settings/organizationGeneralSettings/organizationSettingsForm.jsx","webpack:///./app/views/settings/organizationGeneralSettings/index.tsx"],"names":["SentryDocumentTitle","props","_title","title","objSlug","children","LinkWithConfirmation","this","className","disabled","otherProps","href","classNames","React","PureComponent","slugify","str","toLowerCase","replace","formatStoreCrashReports","value","t","tct","values","STORE_CRASH_REPORTS_VALUES","Array","from","_","i","push","PermissionAlert","access","hasAccess","type","icon","size","organizationSecurityAndPrivacy","fields","name","label","help","confirm","true","false","visible","features","has","allowedValues","formatLabel","multiline","autosize","maxRows","placeholder","getValue","val","extractMultilineFields","setValue","join","hasSsoEnabled","extraHelp","formGroups","required","transformInput","saveOnBlur","saveMessageAlertType","saveMessage","choices","initialData","availableRoles","map","r","id","OrganizationSettingsForm","orgId","organization","onSave","authProvider","state","endpoint","jsonFormSettings","additionalFieldProps","Set","location","data-test-id","apiMethod","apiEndpoint","allowUndo","onSubmitSuccess","_resp","model","onSubmitError","addErrorMessage","forms","organizationSettingsFields","hasFeature","description","to","allowGravatar","updateOrganization","AsyncComponent","withOrganization","OrganizationGeneralSettings","handleRemoveOrganization","api","params","addLoadingMessage","removeAndRedirectToRemainingOrganization","successMessage","errorMessage","handleSave","prevData","data","slug","changeOrganizationSlug","browserHistory","hasProjects","projects","length","Fragment","isDefault","priority","message","noMargin","project","key","onConfirm","Component","withApi"],"mappings":"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","file":"OrganizationGeneralSettings.js","sourcesContent":["import React, {FunctionComponent} from 'react';\nimport DocumentTitle from 'react-document-title';\n\ntype DocumentTitleProps = {\n  // Main page title\n  title: string;\n  // Organization or project slug to give title some context\n  objSlug: string;\n  children?: React.ReactNode;\n};\n\nconst SentryDocumentTitle: FunctionComponent<DocumentTitleProps> = (\n  props: DocumentTitleProps\n) => {\n  const _title = `${props.title} - ${props.objSlug} - Sentry`;\n  return <DocumentTitle title={_title}>{props.children}</DocumentTitle>;\n};\n\nexport default SentryDocumentTitle;\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport Button from 'app/components/button';\nimport Confirm from 'app/components/confirm';\n\ntype Props = {\n  message: React.ReactNode;\n  title: string;\n  onConfirm: () => void;\n  disabled?: boolean;\n  className?: string;\n  priority?: React.ComponentProps<typeof Button>['priority'];\n};\n\n/**\n * <Confirm> is a more generic version of this component\n */\nclass LinkWithConfirmation extends React.PureComponent<Props> {\n  render() {\n    const {className, disabled, title, children, ...otherProps} = this.props;\n    return (\n      <Confirm {...otherProps} disabled={disabled}>\n        <a href=\"#\" className={classNames(className || '', {disabled})} title={title}>\n          {children}\n        </a>\n      </Confirm>\n    );\n  }\n}\n\nexport default LinkWithConfirmation;\n","// XXX: This is NOT an exhaustive slugify function\n// Only forces lowercase and replaces spaces with hyphens\nexport default function slugify(str: any): string {\n  return typeof str === 'string' ? str.toLowerCase().replace(' ', '-') : '';\n}\n","import {t, tct} from 'app/locale';\n\nexport function formatStoreCrashReports(value: number | ''): React.ReactNode {\n  if (value === -1) {\n    return t('Unlimited');\n  } else if (value === 0) {\n    return t('Disabled');\n  } else {\n    return tct('[value] per issue', {value});\n  }\n}\n\nfunction getStoreCrashReportsValues() {\n  // generate a range from 0 (disabled) to 20 inclusive\n  const values = Array.from(new Array(21), (_, i) => i);\n  values.push(-1); // special \"Unlimited\" at the end\n  return values;\n}\n\nexport const STORE_CRASH_REPORTS_VALUES = getStoreCrashReportsValues();\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {t} from 'app/locale';\nimport Access from 'app/components/acl/access';\nimport Alert from 'app/components/alert';\nimport {IconWarning} from 'app/icons';\n\ntype Props = React.ComponentPropsWithoutRef<typeof Alert> &\n  Pick<React.ComponentProps<typeof Access>, 'access'>;\n\nconst PermissionAlert = ({access = ['org:write'], ...props}: Props) => (\n  <Access access={access}>\n    {({hasAccess}) =>\n      !hasAccess && (\n        <Alert type=\"warning\" icon={<IconWarning size=\"sm\" />} {...props}>\n          {t(\n            'These settings can only be edited by users with the organization owner or manager role.'\n          )}\n        </Alert>\n      )\n    }\n  </Access>\n);\n\nPermissionAlert.propTypes = {\n  access: PropTypes.arrayOf(PropTypes.string),\n};\n\nexport default PermissionAlert;\n","import {extractMultilineFields} from 'app/utils';\nimport {t} from 'app/locale';\nimport {\n  STORE_CRASH_REPORTS_VALUES,\n  formatStoreCrashReports,\n} from 'app/utils/crashReports';\nimport {JsonFormObject} from 'app/views/settings/components/forms/type';\n\nconst organizationSecurityAndPrivacy: JsonFormObject[] = [\n  {\n    title: t('Security & Privacy'),\n    fields: [\n      {\n        name: 'require2FA',\n        type: 'boolean',\n        label: t('Require Two-Factor Authentication'),\n        help: t('Require and enforce two-factor authentication for all members'),\n        confirm: {\n          true: t(\n            'This will remove all members without two-factor authentication' +\n              ' from your organization. It will also send them an email to setup 2FA' +\n              ' and reinstate their access and settings. Do you want to continue?'\n          ),\n          false: t(\n            'Are you sure you want to allow users to access your organization without having two-factor authentication enabled?'\n          ),\n        },\n      },\n      {\n        name: 'allowSharedIssues',\n        type: 'boolean',\n\n        label: t('Allow Shared Issues'),\n        help: t('Enable sharing of limited details on issues to anonymous users'),\n        confirm: {\n          true: t('Are you sure you want to allow sharing issues to anonymous users?'),\n        },\n      },\n      {\n        name: 'enhancedPrivacy',\n        type: 'boolean',\n\n        label: t('Enhanced Privacy'),\n        help: t(\n          'Enable enhanced privacy controls to limit personally identifiable information (PII) as well as source code in things like notifications'\n        ),\n        confirm: {\n          false: t(\n            'Disabling this can have privacy implications for ALL projects, are you sure you want to continue?'\n          ),\n        },\n      },\n      {\n        name: 'scrapeJavaScript',\n        type: 'boolean',\n        confirm: {\n          false: t(\n            \"Are you sure you want to disable sourcecode fetching for JavaScript events? This will affect Sentry's ability to aggregate issues if you're not already uploading sourcemaps as artifacts.\"\n          ),\n        },\n        label: t('Allow JavaScript Source Fetching'),\n        help: t('Allow Sentry to scrape missing JavaScript source context when possible'),\n      },\n      {\n        name: 'storeCrashReports',\n        type: 'range',\n        label: t('Store Native Crash Reports'),\n        help: t(\n          'Store native crash reports such as Minidumps for improved processing and download in issue details'\n        ),\n        visible: ({features}) => features.has('event-attachments'),\n        allowedValues: STORE_CRASH_REPORTS_VALUES,\n        formatLabel: formatStoreCrashReports,\n      },\n      {\n        name: 'trustedRelays',\n        type: 'string',\n        multiline: true,\n        autosize: true,\n        maxRows: 10,\n        placeholder: t('Paste the relay public keys here'),\n        label: t('Trusted Relays'),\n        help: t(\n          'The list of relay public keys that should be trusted. Any relay in this list will be permitted to access org and project configs. Separate multiple entries with a newline.'\n        ),\n        getValue: val => extractMultilineFields(val),\n        setValue: val => (val && typeof val.join === 'function' && val.join('\\n')) || '',\n        visible: ({features}) => features.has('relay'),\n      },\n      {\n        name: 'allowJoinRequests',\n        type: 'boolean',\n\n        label: t('Allow Join Requests'),\n        help: t('Allow users to request to join your organization'),\n        confirm: {\n          true: t(\n            'Are you sure you want to allow users to request to join your organization?'\n          ),\n        },\n        visible: ({hasSsoEnabled}) => !hasSsoEnabled,\n      },\n    ],\n  },\n  {\n    title: t('Data Scrubbing'),\n    fields: [\n      {\n        name: 'dataScrubber',\n        type: 'boolean',\n        label: t('Require Data Scrubber'),\n        help: t('Require server-side data scrubbing be enabled for all projects'),\n        confirm: {\n          false: t(\n            'Disabling this can have privacy implications for ALL projects, are you sure you want to continue?'\n          ),\n        },\n      },\n      {\n        name: 'dataScrubberDefaults',\n        type: 'boolean',\n        label: t('Require Using Default Scrubbers'),\n        help: t(\n          'Require the default scrubbers be applied to prevent things like passwords and credit cards from being stored for all projects'\n        ),\n        confirm: {\n          false: t(\n            'Disabling this can have privacy implications for ALL projects, are you sure you want to continue?'\n          ),\n        },\n      },\n      {\n        name: 'sensitiveFields',\n        type: 'string',\n        multiline: true,\n        autosize: true,\n        maxRows: 10,\n        placeholder: 'e.g. email',\n        label: t('Global Sensitive Fields'),\n        help: t(\n          'Additional field names to match against when scrubbing data for all projects. Separate multiple entries with a newline.'\n        ),\n        extraHelp: t(\n          'Note: These fields will be used in addition to project specific fields.'\n        ),\n        getValue: val => extractMultilineFields(val),\n        setValue: val => (val && typeof val.join === 'function' && val.join('\\n')) || '',\n      },\n      {\n        name: 'safeFields',\n        type: 'string',\n        multiline: true,\n        autosize: true,\n        maxRows: 10,\n        placeholder: t('e.g. business-email'),\n        label: t('Global Safe Fields'),\n        help: t(\n          'Field names which data scrubbers should ignore. Separate multiple entries with a newline.'\n        ),\n        extraHelp: t(\n          'Note: These fields will be used in addition to project specific fields'\n        ),\n        getValue: val => extractMultilineFields(val),\n        setValue: val => (val && typeof val.join === 'function' && val.join('\\n')) || '',\n      },\n      {\n        name: 'scrubIPAddresses',\n        type: 'boolean',\n        label: t('Prevent Storing of IP Addresses'),\n        help: t(\n          'Preventing IP addresses from being stored for new events on all projects'\n        ),\n        confirm: {\n          false: t(\n            'Disabling this can have privacy implications for ALL projects, are you sure you want to continue?'\n          ),\n        },\n      },\n    ],\n  },\n];\n\nexport default organizationSecurityAndPrivacy;\n","import {t} from 'app/locale';\nimport slugify from 'app/utils/slugify';\nimport {JsonFormObject} from 'app/views/settings/components/forms/type';\nimport {MemberRole} from 'app/types';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/:orgId/';\n\nconst formGroups: JsonFormObject[] = [\n  {\n    // Form \"section\"/\"panel\"\n    title: t('General'),\n    fields: [\n      {\n        name: 'slug',\n        type: 'string',\n        required: true,\n        label: t('Name'),\n        help: t('A unique ID used to identify this organization'),\n        transformInput: slugify,\n\n        saveOnBlur: false,\n        saveMessageAlertType: 'info',\n        saveMessage: t(\n          'You will be redirected to the new organization slug after saving'\n        ),\n      },\n      {\n        name: 'name',\n        type: 'string',\n        required: true,\n\n        label: t('Display Name'),\n        help: t('This is the name that users will see for the organization'),\n      },\n      {\n        name: 'isEarlyAdopter',\n        type: 'boolean',\n        label: t('Early Adopter'),\n        help: t(\"Opt-in to new features before they're released to the public\"),\n      },\n    ],\n  },\n\n  {\n    title: 'Membership',\n    fields: [\n      {\n        name: 'defaultRole',\n        type: 'array',\n        required: true,\n        label: t('Default Role'),\n        // seems weird to have choices in initial form data\n        choices: ({initialData} = {}) =>\n          initialData?.availableRoles?.map((r: MemberRole) => [r.id, r.name]) ?? [],\n        help: t('The default role new members will receive'),\n        disabled: ({access}) => !access.has('org:admin'),\n      },\n      {\n        name: 'openMembership',\n        type: 'boolean',\n        required: true,\n        label: t('Open Membership'),\n        help: t('Allow organization members to freely join or leave any team'),\n      },\n      {\n        name: 'eventsMemberAdmin',\n        type: 'boolean',\n        label: t('Grant Members Events Admin'),\n        help: t(\n          'Allow members to delete events (including the delete & discard action) by granting them the `event:admin` scope.'\n        ),\n      },\n      {\n        name: 'attachmentsRole',\n        type: 'array',\n        choices: ({initialData = {}}) =>\n          initialData?.availableRoles?.map((r: MemberRole) => [r.id, r.name]) ?? [],\n        label: t('Attachments Access'),\n        help: t(\n          'Permissions required to download event attachments, such as native crash reports or log files.'\n        ),\n        visible: ({features}) => features.has('event-attachments'),\n      },\n    ],\n  },\n];\n\nexport default formGroups;\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport {updateOrganization} from 'app/actionCreators/organizations';\nimport AsyncComponent from 'app/components/asyncComponent';\nimport AvatarChooser from 'app/components/avatarChooser';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport SentryTypes from 'app/sentryTypes';\nimport organizationSettingsFields from 'app/data/forms/organizationGeneralSettings';\nimport withOrganization from 'app/utils/withOrganization';\nimport Link from 'app/components/links/link';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport organizationSecurityAndPrivacy from 'app/data/forms/organizationSecurityAndPrivacy';\nimport Feature from 'app/components/acl/feature';\nimport {t} from 'app/locale';\nimport {Panel, PanelHeader} from 'app/components/panels';\n\nclass OrganizationSettingsForm extends AsyncComponent {\n  static propTypes = {\n    location: PropTypes.object,\n    organization: SentryTypes.Organization,\n    orgId: PropTypes.string.isRequired,\n    access: PropTypes.object.isRequired,\n    initialData: PropTypes.object.isRequired,\n    onSave: PropTypes.func.isRequired,\n  };\n\n  getEndpoints() {\n    const {orgId} = this.props;\n    return [['authProvider', `/organizations/${orgId}/auth-provider/`]];\n  }\n\n  render() {\n    const {initialData, organization, orgId, onSave, access} = this.props;\n    const {authProvider} = this.state;\n    const endpoint = `/organizations/${orgId}/`;\n\n    const jsonFormSettings = {\n      additionalFieldProps: {hasSsoEnabled: !!authProvider},\n      features: new Set(organization.features),\n      access,\n      location: this.props.location,\n      disabled: !access.has('org:write'),\n    };\n\n    return (\n      <Form\n        data-test-id=\"organization-settings\"\n        apiMethod=\"PUT\"\n        apiEndpoint={endpoint}\n        saveOnBlur\n        allowUndo\n        initialData={initialData}\n        onSubmitSuccess={(_resp, model) => {\n          // Special case for slug, need to forward to new slug\n          if (typeof onSave === 'function') {\n            onSave(initialData, model.initialData);\n          }\n        }}\n        onSubmitError={() => addErrorMessage('Unable to save change')}\n      >\n        <JsonForm {...jsonFormSettings} forms={organizationSettingsFields} />\n\n        <Feature features={['datascrubbers-v2']}>\n          {({hasFeature}) =>\n            hasFeature ? (\n              <Panel>\n                <PanelHeader>{t('Security & Privacy')}</PanelHeader>\n                <EmptyMessage\n                  title={t('Security & Privacy has moved')}\n                  description={\n                    <Link to={`/settings/${orgId}/security-and-privacy/`}>\n                      {t('Go to Security & Privacy')}\n                    </Link>\n                  }\n                />\n              </Panel>\n            ) : (\n              <JsonForm {...jsonFormSettings} forms={organizationSecurityAndPrivacy} />\n            )\n          }\n        </Feature>\n\n        <AvatarChooser\n          type=\"organization\"\n          allowGravatar={false}\n          endpoint={`${endpoint}avatar/`}\n          model={initialData}\n          onSave={updateOrganization}\n          disabled={!access.has('org:write')}\n        />\n      </Form>\n    );\n  }\n}\n\nexport default withOrganization(OrganizationSettingsForm);\n","import {RouteComponentProps} from 'react-router/lib/Router';\nimport {browserHistory} from 'react-router';\nimport React from 'react';\n\nimport {Client} from 'app/api';\nimport {Organization} from 'app/types';\nimport {Panel, PanelHeader} from 'app/components/panels';\nimport {addLoadingMessage} from 'app/actionCreators/indicator';\nimport {\n  changeOrganizationSlug,\n  removeAndRedirectToRemainingOrganization,\n  updateOrganization,\n} from 'app/actionCreators/organizations';\nimport {t, tct} from 'app/locale';\nimport Field from 'app/views/settings/components/forms/field';\nimport Hook from 'app/components/hook';\nimport LinkWithConfirmation from 'app/components/links/linkWithConfirmation';\nimport PermissionAlert from 'app/views/settings/organization/permissionAlert';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\n\nimport OrganizationSettingsForm from './organizationSettingsForm';\n\ntype Props = {\n  api: Client;\n  organization: Organization;\n} & RouteComponentProps<{orgId: string}, {}>;\n\nclass OrganizationGeneralSettings extends React.Component<Props> {\n  handleRemoveOrganization = () => {\n    const {api, organization, params} = this.props;\n    if (!organization) {\n      return;\n    }\n\n    addLoadingMessage();\n    removeAndRedirectToRemainingOrganization(api, {\n      orgId: params.orgId,\n      successMessage: `${organization.name} is queued for deletion.`,\n      errorMessage: `Error removing the ${organization.name} organization`,\n    });\n  };\n\n  handleSave = (prevData: Organization, data: Organization) => {\n    if (data.slug && data.slug !== prevData.slug) {\n      changeOrganizationSlug(prevData, data);\n      browserHistory.replace(`/settings/${data.slug}/`);\n    } else {\n      // This will update OrganizationStore (as well as OrganizationsStore\n      // which is slightly incorrect because it has summaries vs a detailed org)\n      updateOrganization(data);\n    }\n  };\n\n  render() {\n    const {organization, params} = this.props;\n    const {orgId} = params;\n    const access = new Set(organization.access);\n    const hasProjects = organization.projects && !!organization.projects.length;\n\n    return (\n      <React.Fragment>\n        <SentryDocumentTitle title={t('General Settings')} objSlug={orgId} />\n        <div>\n          <SettingsPageHeader title={t('Organization Settings')} />\n          <PermissionAlert />\n          <Hook name=\"settings:organization-general-settings\" />\n\n          <OrganizationSettingsForm\n            {...this.props}\n            initialData={organization}\n            orgId={orgId}\n            access={access}\n            onSave={this.handleSave}\n          />\n\n          {access.has('org:admin') && !organization.isDefault && (\n            <Panel>\n              <PanelHeader>{t('Remove Organization')}</PanelHeader>\n              <Field\n                label={t('Remove Organization')}\n                help={t(\n                  'Removing this organization will delete all data including projects and their associated events.'\n                )}\n              >\n                <div>\n                  <LinkWithConfirmation\n                    className=\"btn btn-danger\"\n                    priority=\"danger\"\n                    title={t('Remove %s organization', organization && organization.name)}\n                    message={\n                      <div>\n                        <TextBlock>\n                          {tct(\n                            'Removing the organization, [name] is permanent and cannot be undone! Are you sure you want to continue?',\n                            {\n                              name: organization && <strong>{organization.name}</strong>,\n                            }\n                          )}\n                        </TextBlock>\n\n                        {hasProjects && (\n                          <div>\n                            <TextBlock noMargin>\n                              {t(\n                                'This will also remove the following associated projects:'\n                              )}\n                            </TextBlock>\n                            <ul className=\"ref-projects\">\n                              {organization.projects.map(project => (\n                                <li key={project.slug}>{project.slug}</li>\n                              ))}\n                            </ul>\n                          </div>\n                        )}\n                      </div>\n                    }\n                    onConfirm={this.handleRemoveOrganization}\n                  >\n                    {t('Remove Organization')}\n                  </LinkWithConfirmation>\n                </div>\n              </Field>\n            </Panel>\n          )}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withApi(withOrganization(OrganizationGeneralSettings));\n"],"sourceRoot":""}