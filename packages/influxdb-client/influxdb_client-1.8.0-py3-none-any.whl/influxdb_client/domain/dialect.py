# coding: utf-8

"""
    Influx API Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Dialect(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'header': 'bool',
        'delimiter': 'str',
        'annotations': 'list[str]',
        'comment_prefix': 'str',
        'date_time_format': 'str'
    }

    attribute_map = {
        'header': 'header',
        'delimiter': 'delimiter',
        'annotations': 'annotations',
        'comment_prefix': 'commentPrefix',
        'date_time_format': 'dateTimeFormat'
    }

    def __init__(self, header=True, delimiter=',', annotations=None, comment_prefix='#', date_time_format='RFC3339'):  # noqa: E501
        """Dialect - a model defined in OpenAPI"""  # noqa: E501

        self._header = None
        self._delimiter = None
        self._annotations = None
        self._comment_prefix = None
        self._date_time_format = None
        self.discriminator = None

        if header is not None:
            self.header = header
        if delimiter is not None:
            self.delimiter = delimiter
        if annotations is not None:
            self.annotations = annotations
        if comment_prefix is not None:
            self.comment_prefix = comment_prefix
        if date_time_format is not None:
            self.date_time_format = date_time_format

    @property
    def header(self):
        """Gets the header of this Dialect.  # noqa: E501

        If true, the results will contain a header row  # noqa: E501

        :return: The header of this Dialect.  # noqa: E501
        :rtype: bool
        """
        return self._header

    @header.setter
    def header(self, header):
        """Sets the header of this Dialect.

        If true, the results will contain a header row  # noqa: E501

        :param header: The header of this Dialect.  # noqa: E501
        :type: bool
        """

        self._header = header

    @property
    def delimiter(self):
        """Gets the delimiter of this Dialect.  # noqa: E501

        Separator between cells; the default is ,  # noqa: E501

        :return: The delimiter of this Dialect.  # noqa: E501
        :rtype: str
        """
        return self._delimiter

    @delimiter.setter
    def delimiter(self, delimiter):
        """Sets the delimiter of this Dialect.

        Separator between cells; the default is ,  # noqa: E501

        :param delimiter: The delimiter of this Dialect.  # noqa: E501
        :type: str
        """
        if delimiter is not None and len(delimiter) > 1:
            raise ValueError("Invalid value for `delimiter`, length must be less than or equal to `1`")  # noqa: E501
        if delimiter is not None and len(delimiter) < 1:
            raise ValueError("Invalid value for `delimiter`, length must be greater than or equal to `1`")  # noqa: E501

        self._delimiter = delimiter

    @property
    def annotations(self):
        """Gets the annotations of this Dialect.  # noqa: E501

        Https://www.w3.org/TR/2015/REC-tabular-data-model-20151217/#columns  # noqa: E501

        :return: The annotations of this Dialect.  # noqa: E501
        :rtype: list[str]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this Dialect.

        Https://www.w3.org/TR/2015/REC-tabular-data-model-20151217/#columns  # noqa: E501

        :param annotations: The annotations of this Dialect.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["group", "datatype", "default"]  # noqa: E501
        if not set(annotations).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `annotations` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(annotations) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._annotations = annotations

    @property
    def comment_prefix(self):
        """Gets the comment_prefix of this Dialect.  # noqa: E501

        Character prefixed to comment strings  # noqa: E501

        :return: The comment_prefix of this Dialect.  # noqa: E501
        :rtype: str
        """
        return self._comment_prefix

    @comment_prefix.setter
    def comment_prefix(self, comment_prefix):
        """Sets the comment_prefix of this Dialect.

        Character prefixed to comment strings  # noqa: E501

        :param comment_prefix: The comment_prefix of this Dialect.  # noqa: E501
        :type: str
        """
        if comment_prefix is not None and len(comment_prefix) > 1:
            raise ValueError("Invalid value for `comment_prefix`, length must be less than or equal to `1`")  # noqa: E501
        if comment_prefix is not None and len(comment_prefix) < 0:
            raise ValueError("Invalid value for `comment_prefix`, length must be greater than or equal to `0`")  # noqa: E501

        self._comment_prefix = comment_prefix

    @property
    def date_time_format(self):
        """Gets the date_time_format of this Dialect.  # noqa: E501

        Format of timestamps  # noqa: E501

        :return: The date_time_format of this Dialect.  # noqa: E501
        :rtype: str
        """
        return self._date_time_format

    @date_time_format.setter
    def date_time_format(self, date_time_format):
        """Sets the date_time_format of this Dialect.

        Format of timestamps  # noqa: E501

        :param date_time_format: The date_time_format of this Dialect.  # noqa: E501
        :type: str
        """

        self._date_time_format = date_time_format

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Dialect):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
