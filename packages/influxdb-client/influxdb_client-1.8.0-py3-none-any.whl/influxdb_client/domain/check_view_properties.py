# coding: utf-8

"""
    Influx API Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from influxdb_client.domain.view_properties import ViewProperties


class CheckViewProperties(ViewProperties):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'shape': 'str',
        'check_id': 'str',
        'check': 'Check',
        'queries': 'list[DashboardQuery]',
        'colors': 'list[str]'
    }

    attribute_map = {
        'type': 'type',
        'shape': 'shape',
        'check_id': 'checkID',
        'check': 'check',
        'queries': 'queries',
        'colors': 'colors'
    }

    def __init__(self, type=None, shape=None, check_id=None, check=None, queries=None, colors=None):  # noqa: E501
        """CheckViewProperties - a model defined in OpenAPI"""  # noqa: E501
        ViewProperties.__init__(self)

        self._type = None
        self._shape = None
        self._check_id = None
        self._check = None
        self._queries = None
        self._colors = None
        self.discriminator = None

        self.type = type
        self.shape = shape
        self.check_id = check_id
        if check is not None:
            self.check = check
        self.queries = queries
        self.colors = colors

    @property
    def type(self):
        """Gets the type of this CheckViewProperties.  # noqa: E501


        :return: The type of this CheckViewProperties.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CheckViewProperties.


        :param type: The type of this CheckViewProperties.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def shape(self):
        """Gets the shape of this CheckViewProperties.  # noqa: E501


        :return: The shape of this CheckViewProperties.  # noqa: E501
        :rtype: str
        """
        return self._shape

    @shape.setter
    def shape(self, shape):
        """Sets the shape of this CheckViewProperties.


        :param shape: The shape of this CheckViewProperties.  # noqa: E501
        :type: str
        """
        if shape is None:
            raise ValueError("Invalid value for `shape`, must not be `None`")  # noqa: E501

        self._shape = shape

    @property
    def check_id(self):
        """Gets the check_id of this CheckViewProperties.  # noqa: E501


        :return: The check_id of this CheckViewProperties.  # noqa: E501
        :rtype: str
        """
        return self._check_id

    @check_id.setter
    def check_id(self, check_id):
        """Sets the check_id of this CheckViewProperties.


        :param check_id: The check_id of this CheckViewProperties.  # noqa: E501
        :type: str
        """
        if check_id is None:
            raise ValueError("Invalid value for `check_id`, must not be `None`")  # noqa: E501

        self._check_id = check_id

    @property
    def check(self):
        """Gets the check of this CheckViewProperties.  # noqa: E501


        :return: The check of this CheckViewProperties.  # noqa: E501
        :rtype: Check
        """
        return self._check

    @check.setter
    def check(self, check):
        """Sets the check of this CheckViewProperties.


        :param check: The check of this CheckViewProperties.  # noqa: E501
        :type: Check
        """

        self._check = check

    @property
    def queries(self):
        """Gets the queries of this CheckViewProperties.  # noqa: E501


        :return: The queries of this CheckViewProperties.  # noqa: E501
        :rtype: list[DashboardQuery]
        """
        return self._queries

    @queries.setter
    def queries(self, queries):
        """Sets the queries of this CheckViewProperties.


        :param queries: The queries of this CheckViewProperties.  # noqa: E501
        :type: list[DashboardQuery]
        """
        if queries is None:
            raise ValueError("Invalid value for `queries`, must not be `None`")  # noqa: E501

        self._queries = queries

    @property
    def colors(self):
        """Gets the colors of this CheckViewProperties.  # noqa: E501

        Colors define color encoding of data into a visualization  # noqa: E501

        :return: The colors of this CheckViewProperties.  # noqa: E501
        :rtype: list[str]
        """
        return self._colors

    @colors.setter
    def colors(self, colors):
        """Sets the colors of this CheckViewProperties.

        Colors define color encoding of data into a visualization  # noqa: E501

        :param colors: The colors of this CheckViewProperties.  # noqa: E501
        :type: list[str]
        """
        if colors is None:
            raise ValueError("Invalid value for `colors`, must not be `None`")  # noqa: E501

        self._colors = colors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CheckViewProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
