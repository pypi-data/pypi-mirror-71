# coding: utf-8

"""
    Influx API Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PkgCreate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'pkg_name': 'str',
        'pkg_description': 'str',
        'pkg_version': 'str',
        'resources': 'PkgCreateResources'
    }

    attribute_map = {
        'pkg_name': 'pkgName',
        'pkg_description': 'pkgDescription',
        'pkg_version': 'pkgVersion',
        'resources': 'resources'
    }

    def __init__(self, pkg_name=None, pkg_description=None, pkg_version=None, resources=None):  # noqa: E501
        """PkgCreate - a model defined in OpenAPI"""  # noqa: E501

        self._pkg_name = None
        self._pkg_description = None
        self._pkg_version = None
        self._resources = None
        self.discriminator = None

        if pkg_name is not None:
            self.pkg_name = pkg_name
        if pkg_description is not None:
            self.pkg_description = pkg_description
        if pkg_version is not None:
            self.pkg_version = pkg_version
        if resources is not None:
            self.resources = resources

    @property
    def pkg_name(self):
        """Gets the pkg_name of this PkgCreate.  # noqa: E501


        :return: The pkg_name of this PkgCreate.  # noqa: E501
        :rtype: str
        """
        return self._pkg_name

    @pkg_name.setter
    def pkg_name(self, pkg_name):
        """Sets the pkg_name of this PkgCreate.


        :param pkg_name: The pkg_name of this PkgCreate.  # noqa: E501
        :type: str
        """

        self._pkg_name = pkg_name

    @property
    def pkg_description(self):
        """Gets the pkg_description of this PkgCreate.  # noqa: E501


        :return: The pkg_description of this PkgCreate.  # noqa: E501
        :rtype: str
        """
        return self._pkg_description

    @pkg_description.setter
    def pkg_description(self, pkg_description):
        """Sets the pkg_description of this PkgCreate.


        :param pkg_description: The pkg_description of this PkgCreate.  # noqa: E501
        :type: str
        """

        self._pkg_description = pkg_description

    @property
    def pkg_version(self):
        """Gets the pkg_version of this PkgCreate.  # noqa: E501


        :return: The pkg_version of this PkgCreate.  # noqa: E501
        :rtype: str
        """
        return self._pkg_version

    @pkg_version.setter
    def pkg_version(self, pkg_version):
        """Sets the pkg_version of this PkgCreate.


        :param pkg_version: The pkg_version of this PkgCreate.  # noqa: E501
        :type: str
        """

        self._pkg_version = pkg_version

    @property
    def resources(self):
        """Gets the resources of this PkgCreate.  # noqa: E501


        :return: The resources of this PkgCreate.  # noqa: E501
        :rtype: PkgCreateResources
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this PkgCreate.


        :param resources: The resources of this PkgCreate.  # noqa: E501
        :type: PkgCreateResources
        """

        self._resources = resources

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PkgCreate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
