variables:
  CIBW_SKIP: 'cp27-* cp34-* *-win32 *-manylinux1_i686'
  CIBW_BEFORE_BUILD: 'pip install cmake'

trigger:
  branches:
    include:
    - master
    - refs/tags/*

stages:
  - stage: build_wheels
    jobs:
    - job: linux
      pool: {vmImage: 'Ubuntu-16.04'}
      steps:
        - checkout: self
          submodules: true
        - task: UsePythonVersion@0
        - bash: |
            python -m pip install --upgrade pip
            pip3 install cibuildwheel==1.4.2
            cibuildwheel --output-dir wheelhouse .
        - task: PublishPipelineArtifact@1
          inputs:
            path: $(System.DefaultWorkingDirectory)/wheelhouse
            artifact: wheels_linux
    - job: macos
      pool: {vmImage: 'macOS-10.15'}
      steps:
        - checkout: self
          submodules: true
        - task: UsePythonVersion@0
        - bash: |
            python -m pip install --upgrade pip
            pip3 install cibuildwheel==1.4.2
            cibuildwheel --output-dir wheelhouse .
        - task: PublishPipelineArtifact@1
          inputs:
            path: $(System.DefaultWorkingDirectory)/wheelhouse
            artifact: wheels_mac
    - job: windows
      pool: {vmImage: 'vs2017-win2016'}
      steps:
        - checkout: self
          submodules: true
        - task: UsePythonVersion@0
        - bash: |
            python -m pip install --upgrade pip
            pip3 install cibuildwheel==1.4.2
            cibuildwheel --output-dir wheelhouse .
        - task: PublishPipelineArtifact@1
          inputs:
            path: $(System.DefaultWorkingDirectory)/wheelhouse
            artifact: wheels_windows
  - stage: publish_wheels
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    jobs:
    - deployment: publish_pypi
      pool:
        vmImage: 'Ubuntu-16.04'
      environment: 'mapbox_earcut_python'
      strategy:
        runOnce:
          deploy:
            steps:
            - task: UsePythonVersion@0
            - script: |
                pip install twine
            - checkout: self
              submodules: true
            - script: |
                python setup.py sdist
            - task: DownloadPipelineArtifact@2
              inputs:
                patterns: '**/*.whl'
                targetPath: dist
            - task: TwineAuthenticate@1
              inputs:
                pythonUploadServiceConnection: pypi_upload_mapbox_earcut
            - script: |
                python -m twine upload -r "pypi_skogler" --config-file $(PYPIRC_PATH) dist/*
