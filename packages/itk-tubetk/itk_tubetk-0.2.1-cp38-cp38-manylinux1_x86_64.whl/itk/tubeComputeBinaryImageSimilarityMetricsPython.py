# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _tubeComputeBinaryImageSimilarityMetricsPython
else:
    import _tubeComputeBinaryImageSimilarityMetricsPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _tubeComputeBinaryImageSimilarityMetricsPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _tubeComputeBinaryImageSimilarityMetricsPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImagePython
import itk.itkPointPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkSizePython
import itk.ITKCommonBasePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkImageRegionPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython

def tubeComputeBinaryImageSimilarityMetricsISS2_New():
    return tubeComputeBinaryImageSimilarityMetricsISS2.New()

class tubeComputeBinaryImageSimilarityMetricsISS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeBinaryImageSimilarityMetricsISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS2___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS2_Clone)
    SetSourceImage = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS2_SetSourceImage)
    SetTargetImage = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS2_SetTargetImage)
    GetTotalOverlap = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS2_GetTotalOverlap)
    GetUnionOverlap = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS2_GetUnionOverlap)
    GetMeanOverlap = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS2_GetMeanOverlap)
    GetVolumeSimilarity = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS2_GetVolumeSimilarity)
    GetFalseNegativeError = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS2_GetFalseNegativeError)
    GetFalsePositiveError = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS2_GetFalsePositiveError)
    __swig_destroy__ = _tubeComputeBinaryImageSimilarityMetricsPython.delete_tubeComputeBinaryImageSimilarityMetricsISS2
    cast = _swig_new_static_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS2_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeBinaryImageSimilarityMetricsISS2

        Create a new object of the class tubeComputeBinaryImageSimilarityMetricsISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeBinaryImageSimilarityMetricsISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeBinaryImageSimilarityMetricsISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeBinaryImageSimilarityMetricsISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeBinaryImageSimilarityMetricsISS2 in _tubeComputeBinaryImageSimilarityMetricsPython:
_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS2_swigregister(tubeComputeBinaryImageSimilarityMetricsISS2)
tubeComputeBinaryImageSimilarityMetricsISS2___New_orig__ = _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS2___New_orig__
tubeComputeBinaryImageSimilarityMetricsISS2_cast = _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS2_cast


def tubeComputeBinaryImageSimilarityMetricsISS3_New():
    return tubeComputeBinaryImageSimilarityMetricsISS3.New()

class tubeComputeBinaryImageSimilarityMetricsISS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeBinaryImageSimilarityMetricsISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS3___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS3_Clone)
    SetSourceImage = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS3_SetSourceImage)
    SetTargetImage = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS3_SetTargetImage)
    GetTotalOverlap = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS3_GetTotalOverlap)
    GetUnionOverlap = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS3_GetUnionOverlap)
    GetMeanOverlap = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS3_GetMeanOverlap)
    GetVolumeSimilarity = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS3_GetVolumeSimilarity)
    GetFalseNegativeError = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS3_GetFalseNegativeError)
    GetFalsePositiveError = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS3_GetFalsePositiveError)
    __swig_destroy__ = _tubeComputeBinaryImageSimilarityMetricsPython.delete_tubeComputeBinaryImageSimilarityMetricsISS3
    cast = _swig_new_static_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS3_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeBinaryImageSimilarityMetricsISS3

        Create a new object of the class tubeComputeBinaryImageSimilarityMetricsISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeBinaryImageSimilarityMetricsISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeBinaryImageSimilarityMetricsISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeBinaryImageSimilarityMetricsISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeBinaryImageSimilarityMetricsISS3 in _tubeComputeBinaryImageSimilarityMetricsPython:
_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS3_swigregister(tubeComputeBinaryImageSimilarityMetricsISS3)
tubeComputeBinaryImageSimilarityMetricsISS3___New_orig__ = _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS3___New_orig__
tubeComputeBinaryImageSimilarityMetricsISS3_cast = _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS3_cast


def tubeComputeBinaryImageSimilarityMetricsIUC2_New():
    return tubeComputeBinaryImageSimilarityMetricsIUC2.New()

class tubeComputeBinaryImageSimilarityMetricsIUC2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeBinaryImageSimilarityMetricsIUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC2___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC2_Clone)
    SetSourceImage = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC2_SetSourceImage)
    SetTargetImage = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC2_SetTargetImage)
    GetTotalOverlap = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC2_GetTotalOverlap)
    GetUnionOverlap = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC2_GetUnionOverlap)
    GetMeanOverlap = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC2_GetMeanOverlap)
    GetVolumeSimilarity = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC2_GetVolumeSimilarity)
    GetFalseNegativeError = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC2_GetFalseNegativeError)
    GetFalsePositiveError = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC2_GetFalsePositiveError)
    __swig_destroy__ = _tubeComputeBinaryImageSimilarityMetricsPython.delete_tubeComputeBinaryImageSimilarityMetricsIUC2
    cast = _swig_new_static_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC2_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeBinaryImageSimilarityMetricsIUC2

        Create a new object of the class tubeComputeBinaryImageSimilarityMetricsIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeBinaryImageSimilarityMetricsIUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeBinaryImageSimilarityMetricsIUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeBinaryImageSimilarityMetricsIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeBinaryImageSimilarityMetricsIUC2 in _tubeComputeBinaryImageSimilarityMetricsPython:
_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC2_swigregister(tubeComputeBinaryImageSimilarityMetricsIUC2)
tubeComputeBinaryImageSimilarityMetricsIUC2___New_orig__ = _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC2___New_orig__
tubeComputeBinaryImageSimilarityMetricsIUC2_cast = _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC2_cast


def tubeComputeBinaryImageSimilarityMetricsIUC3_New():
    return tubeComputeBinaryImageSimilarityMetricsIUC3.New()

class tubeComputeBinaryImageSimilarityMetricsIUC3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeBinaryImageSimilarityMetricsIUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC3___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC3_Clone)
    SetSourceImage = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC3_SetSourceImage)
    SetTargetImage = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC3_SetTargetImage)
    GetTotalOverlap = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC3_GetTotalOverlap)
    GetUnionOverlap = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC3_GetUnionOverlap)
    GetMeanOverlap = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC3_GetMeanOverlap)
    GetVolumeSimilarity = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC3_GetVolumeSimilarity)
    GetFalseNegativeError = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC3_GetFalseNegativeError)
    GetFalsePositiveError = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC3_GetFalsePositiveError)
    __swig_destroy__ = _tubeComputeBinaryImageSimilarityMetricsPython.delete_tubeComputeBinaryImageSimilarityMetricsIUC3
    cast = _swig_new_static_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC3_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeBinaryImageSimilarityMetricsIUC3

        Create a new object of the class tubeComputeBinaryImageSimilarityMetricsIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeBinaryImageSimilarityMetricsIUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeBinaryImageSimilarityMetricsIUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeBinaryImageSimilarityMetricsIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeBinaryImageSimilarityMetricsIUC3 in _tubeComputeBinaryImageSimilarityMetricsPython:
_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC3_swigregister(tubeComputeBinaryImageSimilarityMetricsIUC3)
tubeComputeBinaryImageSimilarityMetricsIUC3___New_orig__ = _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC3___New_orig__
tubeComputeBinaryImageSimilarityMetricsIUC3_cast = _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC3_cast


def tubeComputeBinaryImageSimilarityMetricsIUS2_New():
    return tubeComputeBinaryImageSimilarityMetricsIUS2.New()

class tubeComputeBinaryImageSimilarityMetricsIUS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeBinaryImageSimilarityMetricsIUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS2___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS2_Clone)
    SetSourceImage = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS2_SetSourceImage)
    SetTargetImage = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS2_SetTargetImage)
    GetTotalOverlap = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS2_GetTotalOverlap)
    GetUnionOverlap = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS2_GetUnionOverlap)
    GetMeanOverlap = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS2_GetMeanOverlap)
    GetVolumeSimilarity = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS2_GetVolumeSimilarity)
    GetFalseNegativeError = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS2_GetFalseNegativeError)
    GetFalsePositiveError = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS2_GetFalsePositiveError)
    __swig_destroy__ = _tubeComputeBinaryImageSimilarityMetricsPython.delete_tubeComputeBinaryImageSimilarityMetricsIUS2
    cast = _swig_new_static_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS2_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeBinaryImageSimilarityMetricsIUS2

        Create a new object of the class tubeComputeBinaryImageSimilarityMetricsIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeBinaryImageSimilarityMetricsIUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeBinaryImageSimilarityMetricsIUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeBinaryImageSimilarityMetricsIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeBinaryImageSimilarityMetricsIUS2 in _tubeComputeBinaryImageSimilarityMetricsPython:
_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS2_swigregister(tubeComputeBinaryImageSimilarityMetricsIUS2)
tubeComputeBinaryImageSimilarityMetricsIUS2___New_orig__ = _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS2___New_orig__
tubeComputeBinaryImageSimilarityMetricsIUS2_cast = _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS2_cast


def tubeComputeBinaryImageSimilarityMetricsIUS3_New():
    return tubeComputeBinaryImageSimilarityMetricsIUS3.New()

class tubeComputeBinaryImageSimilarityMetricsIUS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeBinaryImageSimilarityMetricsIUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS3___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS3_Clone)
    SetSourceImage = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS3_SetSourceImage)
    SetTargetImage = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS3_SetTargetImage)
    GetTotalOverlap = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS3_GetTotalOverlap)
    GetUnionOverlap = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS3_GetUnionOverlap)
    GetMeanOverlap = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS3_GetMeanOverlap)
    GetVolumeSimilarity = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS3_GetVolumeSimilarity)
    GetFalseNegativeError = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS3_GetFalseNegativeError)
    GetFalsePositiveError = _swig_new_instance_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS3_GetFalsePositiveError)
    __swig_destroy__ = _tubeComputeBinaryImageSimilarityMetricsPython.delete_tubeComputeBinaryImageSimilarityMetricsIUS3
    cast = _swig_new_static_method(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS3_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeBinaryImageSimilarityMetricsIUS3

        Create a new object of the class tubeComputeBinaryImageSimilarityMetricsIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeBinaryImageSimilarityMetricsIUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeBinaryImageSimilarityMetricsIUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeBinaryImageSimilarityMetricsIUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeBinaryImageSimilarityMetricsIUS3 in _tubeComputeBinaryImageSimilarityMetricsPython:
_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS3_swigregister(tubeComputeBinaryImageSimilarityMetricsIUS3)
tubeComputeBinaryImageSimilarityMetricsIUS3___New_orig__ = _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS3___New_orig__
tubeComputeBinaryImageSimilarityMetricsIUS3_cast = _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def compute_binary_image_similarity_metrics(*args, **kwargs):
    """Procedural interface for ComputeBinaryImageSimilarityMetrics"""
    import itk
    instance = itk.ComputeBinaryImageSimilarityMetrics.New(*args, **kwargs)
    return instance.__internal_call__()

def compute_binary_image_similarity_metrics_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ComputeBinaryImageSimilarityMetrics, itkTemplate.itkTemplate):
        filter_object = itk.ComputeBinaryImageSimilarityMetrics.values()[0]
    else:
        filter_object = itk.ComputeBinaryImageSimilarityMetrics

    compute_binary_image_similarity_metrics.__doc__ = filter_object.__doc__
    compute_binary_image_similarity_metrics.__doc__ += "\n Args are Input(s) to the filter.\n"
    compute_binary_image_similarity_metrics.__doc__ += "Available Keyword Arguments:\n"
    compute_binary_image_similarity_metrics.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



