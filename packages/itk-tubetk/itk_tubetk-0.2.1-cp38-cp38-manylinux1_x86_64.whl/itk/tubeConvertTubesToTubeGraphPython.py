# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _tubeConvertTubesToTubeGraphPython
else:
    import _tubeConvertTubesToTubeGraphPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _tubeConvertTubesToTubeGraphPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _tubeConvertTubesToTubeGraphPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImagePython
import itk.itkPointPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkSizePython
import itk.ITKCommonBasePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkImageRegionPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkGroupSpatialObjectPython
import itk.itkSpatialObjectBasePython
import itk.itkSpatialObjectPropertyPython
import itk.itkAffineTransformPython
import itk.itkMatrixOffsetTransformBasePython
import itk.itkOptimizerParametersPython
import itk.itkArrayPython
import itk.itkTransformBasePython
import itk.itkVariableLengthVectorPython
import itk.itkArray2DPython
import itk.itkDiffusionTensor3DPython
import itk.itkBoundingBoxPython
import itk.itkMapContainerPython
import itk.itkVectorContainerPython
import itk.itkContinuousIndexPython

def tubeConvertTubesToTubeGraphD2_New():
    return tubeConvertTubesToTubeGraphD2.New()

class tubeConvertTubesToTubeGraphD2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeConvertTubesToTubeGraphD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2___New_orig__)
    Clone = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2_Clone)
    SetNumberOfCenteroids = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2_SetNumberOfCenteroids)
    GetNumberOfCenteroids = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2_GetNumberOfCenteroids)
    SetCVTImage = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2_SetCVTImage)
    GetCVTImage = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2_GetCVTImage)
    SetInputTubeGroup = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2_SetInputTubeGroup)
    GetInputTubeGroup = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2_GetInputTubeGroup)
    GetAdjacencyMatrix = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2_GetAdjacencyMatrix)
    GetRootNodes = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2_GetRootNodes)
    GetBranchNodes = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2_GetBranchNodes)
    __swig_destroy__ = _tubeConvertTubesToTubeGraphPython.delete_tubeConvertTubesToTubeGraphD2
    cast = _swig_new_static_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2_cast)

    def New(*args, **kargs):
        """New() -> tubeConvertTubesToTubeGraphD2

        Create a new object of the class tubeConvertTubesToTubeGraphD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeConvertTubesToTubeGraphD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeConvertTubesToTubeGraphD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeConvertTubesToTubeGraphD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeConvertTubesToTubeGraphD2 in _tubeConvertTubesToTubeGraphPython:
_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2_swigregister(tubeConvertTubesToTubeGraphD2)
tubeConvertTubesToTubeGraphD2___New_orig__ = _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2___New_orig__
tubeConvertTubesToTubeGraphD2_cast = _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2_cast


def tubeConvertTubesToTubeGraphD3_New():
    return tubeConvertTubesToTubeGraphD3.New()

class tubeConvertTubesToTubeGraphD3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeConvertTubesToTubeGraphD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3___New_orig__)
    Clone = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3_Clone)
    SetNumberOfCenteroids = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3_SetNumberOfCenteroids)
    GetNumberOfCenteroids = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3_GetNumberOfCenteroids)
    SetCVTImage = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3_SetCVTImage)
    GetCVTImage = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3_GetCVTImage)
    SetInputTubeGroup = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3_SetInputTubeGroup)
    GetInputTubeGroup = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3_GetInputTubeGroup)
    GetAdjacencyMatrix = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3_GetAdjacencyMatrix)
    GetRootNodes = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3_GetRootNodes)
    GetBranchNodes = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3_GetBranchNodes)
    __swig_destroy__ = _tubeConvertTubesToTubeGraphPython.delete_tubeConvertTubesToTubeGraphD3
    cast = _swig_new_static_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3_cast)

    def New(*args, **kargs):
        """New() -> tubeConvertTubesToTubeGraphD3

        Create a new object of the class tubeConvertTubesToTubeGraphD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeConvertTubesToTubeGraphD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeConvertTubesToTubeGraphD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeConvertTubesToTubeGraphD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeConvertTubesToTubeGraphD3 in _tubeConvertTubesToTubeGraphPython:
_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3_swigregister(tubeConvertTubesToTubeGraphD3)
tubeConvertTubesToTubeGraphD3___New_orig__ = _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3___New_orig__
tubeConvertTubesToTubeGraphD3_cast = _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3_cast


def tubeConvertTubesToTubeGraphF2_New():
    return tubeConvertTubesToTubeGraphF2.New()

class tubeConvertTubesToTubeGraphF2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeConvertTubesToTubeGraphF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2___New_orig__)
    Clone = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2_Clone)
    SetNumberOfCenteroids = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2_SetNumberOfCenteroids)
    GetNumberOfCenteroids = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2_GetNumberOfCenteroids)
    SetCVTImage = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2_SetCVTImage)
    GetCVTImage = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2_GetCVTImage)
    SetInputTubeGroup = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2_SetInputTubeGroup)
    GetInputTubeGroup = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2_GetInputTubeGroup)
    GetAdjacencyMatrix = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2_GetAdjacencyMatrix)
    GetRootNodes = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2_GetRootNodes)
    GetBranchNodes = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2_GetBranchNodes)
    __swig_destroy__ = _tubeConvertTubesToTubeGraphPython.delete_tubeConvertTubesToTubeGraphF2
    cast = _swig_new_static_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2_cast)

    def New(*args, **kargs):
        """New() -> tubeConvertTubesToTubeGraphF2

        Create a new object of the class tubeConvertTubesToTubeGraphF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeConvertTubesToTubeGraphF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeConvertTubesToTubeGraphF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeConvertTubesToTubeGraphF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeConvertTubesToTubeGraphF2 in _tubeConvertTubesToTubeGraphPython:
_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2_swigregister(tubeConvertTubesToTubeGraphF2)
tubeConvertTubesToTubeGraphF2___New_orig__ = _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2___New_orig__
tubeConvertTubesToTubeGraphF2_cast = _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2_cast


def tubeConvertTubesToTubeGraphF3_New():
    return tubeConvertTubesToTubeGraphF3.New()

class tubeConvertTubesToTubeGraphF3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeConvertTubesToTubeGraphF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3___New_orig__)
    Clone = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3_Clone)
    SetNumberOfCenteroids = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3_SetNumberOfCenteroids)
    GetNumberOfCenteroids = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3_GetNumberOfCenteroids)
    SetCVTImage = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3_SetCVTImage)
    GetCVTImage = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3_GetCVTImage)
    SetInputTubeGroup = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3_SetInputTubeGroup)
    GetInputTubeGroup = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3_GetInputTubeGroup)
    GetAdjacencyMatrix = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3_GetAdjacencyMatrix)
    GetRootNodes = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3_GetRootNodes)
    GetBranchNodes = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3_GetBranchNodes)
    __swig_destroy__ = _tubeConvertTubesToTubeGraphPython.delete_tubeConvertTubesToTubeGraphF3
    cast = _swig_new_static_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3_cast)

    def New(*args, **kargs):
        """New() -> tubeConvertTubesToTubeGraphF3

        Create a new object of the class tubeConvertTubesToTubeGraphF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeConvertTubesToTubeGraphF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeConvertTubesToTubeGraphF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeConvertTubesToTubeGraphF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeConvertTubesToTubeGraphF3 in _tubeConvertTubesToTubeGraphPython:
_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3_swigregister(tubeConvertTubesToTubeGraphF3)
tubeConvertTubesToTubeGraphF3___New_orig__ = _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3___New_orig__
tubeConvertTubesToTubeGraphF3_cast = _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3_cast


def tubeConvertTubesToTubeGraphSS2_New():
    return tubeConvertTubesToTubeGraphSS2.New()

class tubeConvertTubesToTubeGraphSS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeConvertTubesToTubeGraphSS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2___New_orig__)
    Clone = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2_Clone)
    SetNumberOfCenteroids = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2_SetNumberOfCenteroids)
    GetNumberOfCenteroids = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2_GetNumberOfCenteroids)
    SetCVTImage = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2_SetCVTImage)
    GetCVTImage = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2_GetCVTImage)
    SetInputTubeGroup = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2_SetInputTubeGroup)
    GetInputTubeGroup = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2_GetInputTubeGroup)
    GetAdjacencyMatrix = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2_GetAdjacencyMatrix)
    GetRootNodes = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2_GetRootNodes)
    GetBranchNodes = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2_GetBranchNodes)
    __swig_destroy__ = _tubeConvertTubesToTubeGraphPython.delete_tubeConvertTubesToTubeGraphSS2
    cast = _swig_new_static_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2_cast)

    def New(*args, **kargs):
        """New() -> tubeConvertTubesToTubeGraphSS2

        Create a new object of the class tubeConvertTubesToTubeGraphSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeConvertTubesToTubeGraphSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeConvertTubesToTubeGraphSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeConvertTubesToTubeGraphSS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeConvertTubesToTubeGraphSS2 in _tubeConvertTubesToTubeGraphPython:
_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2_swigregister(tubeConvertTubesToTubeGraphSS2)
tubeConvertTubesToTubeGraphSS2___New_orig__ = _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2___New_orig__
tubeConvertTubesToTubeGraphSS2_cast = _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2_cast


def tubeConvertTubesToTubeGraphSS3_New():
    return tubeConvertTubesToTubeGraphSS3.New()

class tubeConvertTubesToTubeGraphSS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeConvertTubesToTubeGraphSS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3___New_orig__)
    Clone = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3_Clone)
    SetNumberOfCenteroids = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3_SetNumberOfCenteroids)
    GetNumberOfCenteroids = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3_GetNumberOfCenteroids)
    SetCVTImage = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3_SetCVTImage)
    GetCVTImage = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3_GetCVTImage)
    SetInputTubeGroup = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3_SetInputTubeGroup)
    GetInputTubeGroup = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3_GetInputTubeGroup)
    GetAdjacencyMatrix = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3_GetAdjacencyMatrix)
    GetRootNodes = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3_GetRootNodes)
    GetBranchNodes = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3_GetBranchNodes)
    __swig_destroy__ = _tubeConvertTubesToTubeGraphPython.delete_tubeConvertTubesToTubeGraphSS3
    cast = _swig_new_static_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3_cast)

    def New(*args, **kargs):
        """New() -> tubeConvertTubesToTubeGraphSS3

        Create a new object of the class tubeConvertTubesToTubeGraphSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeConvertTubesToTubeGraphSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeConvertTubesToTubeGraphSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeConvertTubesToTubeGraphSS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeConvertTubesToTubeGraphSS3 in _tubeConvertTubesToTubeGraphPython:
_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3_swigregister(tubeConvertTubesToTubeGraphSS3)
tubeConvertTubesToTubeGraphSS3___New_orig__ = _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3___New_orig__
tubeConvertTubesToTubeGraphSS3_cast = _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3_cast


def tubeConvertTubesToTubeGraphUC2_New():
    return tubeConvertTubesToTubeGraphUC2.New()

class tubeConvertTubesToTubeGraphUC2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeConvertTubesToTubeGraphUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2___New_orig__)
    Clone = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2_Clone)
    SetNumberOfCenteroids = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2_SetNumberOfCenteroids)
    GetNumberOfCenteroids = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2_GetNumberOfCenteroids)
    SetCVTImage = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2_SetCVTImage)
    GetCVTImage = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2_GetCVTImage)
    SetInputTubeGroup = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2_SetInputTubeGroup)
    GetInputTubeGroup = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2_GetInputTubeGroup)
    GetAdjacencyMatrix = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2_GetAdjacencyMatrix)
    GetRootNodes = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2_GetRootNodes)
    GetBranchNodes = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2_GetBranchNodes)
    __swig_destroy__ = _tubeConvertTubesToTubeGraphPython.delete_tubeConvertTubesToTubeGraphUC2
    cast = _swig_new_static_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2_cast)

    def New(*args, **kargs):
        """New() -> tubeConvertTubesToTubeGraphUC2

        Create a new object of the class tubeConvertTubesToTubeGraphUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeConvertTubesToTubeGraphUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeConvertTubesToTubeGraphUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeConvertTubesToTubeGraphUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeConvertTubesToTubeGraphUC2 in _tubeConvertTubesToTubeGraphPython:
_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2_swigregister(tubeConvertTubesToTubeGraphUC2)
tubeConvertTubesToTubeGraphUC2___New_orig__ = _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2___New_orig__
tubeConvertTubesToTubeGraphUC2_cast = _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2_cast


def tubeConvertTubesToTubeGraphUC3_New():
    return tubeConvertTubesToTubeGraphUC3.New()

class tubeConvertTubesToTubeGraphUC3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeConvertTubesToTubeGraphUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3___New_orig__)
    Clone = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3_Clone)
    SetNumberOfCenteroids = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3_SetNumberOfCenteroids)
    GetNumberOfCenteroids = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3_GetNumberOfCenteroids)
    SetCVTImage = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3_SetCVTImage)
    GetCVTImage = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3_GetCVTImage)
    SetInputTubeGroup = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3_SetInputTubeGroup)
    GetInputTubeGroup = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3_GetInputTubeGroup)
    GetAdjacencyMatrix = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3_GetAdjacencyMatrix)
    GetRootNodes = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3_GetRootNodes)
    GetBranchNodes = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3_GetBranchNodes)
    __swig_destroy__ = _tubeConvertTubesToTubeGraphPython.delete_tubeConvertTubesToTubeGraphUC3
    cast = _swig_new_static_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3_cast)

    def New(*args, **kargs):
        """New() -> tubeConvertTubesToTubeGraphUC3

        Create a new object of the class tubeConvertTubesToTubeGraphUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeConvertTubesToTubeGraphUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeConvertTubesToTubeGraphUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeConvertTubesToTubeGraphUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeConvertTubesToTubeGraphUC3 in _tubeConvertTubesToTubeGraphPython:
_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3_swigregister(tubeConvertTubesToTubeGraphUC3)
tubeConvertTubesToTubeGraphUC3___New_orig__ = _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3___New_orig__
tubeConvertTubesToTubeGraphUC3_cast = _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3_cast


def tubeConvertTubesToTubeGraphUS2_New():
    return tubeConvertTubesToTubeGraphUS2.New()

class tubeConvertTubesToTubeGraphUS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeConvertTubesToTubeGraphUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2___New_orig__)
    Clone = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2_Clone)
    SetNumberOfCenteroids = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2_SetNumberOfCenteroids)
    GetNumberOfCenteroids = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2_GetNumberOfCenteroids)
    SetCVTImage = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2_SetCVTImage)
    GetCVTImage = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2_GetCVTImage)
    SetInputTubeGroup = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2_SetInputTubeGroup)
    GetInputTubeGroup = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2_GetInputTubeGroup)
    GetAdjacencyMatrix = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2_GetAdjacencyMatrix)
    GetRootNodes = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2_GetRootNodes)
    GetBranchNodes = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2_GetBranchNodes)
    __swig_destroy__ = _tubeConvertTubesToTubeGraphPython.delete_tubeConvertTubesToTubeGraphUS2
    cast = _swig_new_static_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2_cast)

    def New(*args, **kargs):
        """New() -> tubeConvertTubesToTubeGraphUS2

        Create a new object of the class tubeConvertTubesToTubeGraphUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeConvertTubesToTubeGraphUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeConvertTubesToTubeGraphUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeConvertTubesToTubeGraphUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeConvertTubesToTubeGraphUS2 in _tubeConvertTubesToTubeGraphPython:
_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2_swigregister(tubeConvertTubesToTubeGraphUS2)
tubeConvertTubesToTubeGraphUS2___New_orig__ = _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2___New_orig__
tubeConvertTubesToTubeGraphUS2_cast = _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2_cast


def tubeConvertTubesToTubeGraphUS3_New():
    return tubeConvertTubesToTubeGraphUS3.New()

class tubeConvertTubesToTubeGraphUS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeConvertTubesToTubeGraphUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3___New_orig__)
    Clone = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3_Clone)
    SetNumberOfCenteroids = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3_SetNumberOfCenteroids)
    GetNumberOfCenteroids = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3_GetNumberOfCenteroids)
    SetCVTImage = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3_SetCVTImage)
    GetCVTImage = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3_GetCVTImage)
    SetInputTubeGroup = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3_SetInputTubeGroup)
    GetInputTubeGroup = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3_GetInputTubeGroup)
    GetAdjacencyMatrix = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3_GetAdjacencyMatrix)
    GetRootNodes = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3_GetRootNodes)
    GetBranchNodes = _swig_new_instance_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3_GetBranchNodes)
    __swig_destroy__ = _tubeConvertTubesToTubeGraphPython.delete_tubeConvertTubesToTubeGraphUS3
    cast = _swig_new_static_method(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3_cast)

    def New(*args, **kargs):
        """New() -> tubeConvertTubesToTubeGraphUS3

        Create a new object of the class tubeConvertTubesToTubeGraphUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeConvertTubesToTubeGraphUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeConvertTubesToTubeGraphUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeConvertTubesToTubeGraphUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeConvertTubesToTubeGraphUS3 in _tubeConvertTubesToTubeGraphPython:
_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3_swigregister(tubeConvertTubesToTubeGraphUS3)
tubeConvertTubesToTubeGraphUS3___New_orig__ = _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3___New_orig__
tubeConvertTubesToTubeGraphUS3_cast = _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def convert_tubes_to_tube_graph(*args, **kwargs):
    """Procedural interface for ConvertTubesToTubeGraph"""
    import itk
    instance = itk.ConvertTubesToTubeGraph.New(*args, **kwargs)
    return instance.__internal_call__()

def convert_tubes_to_tube_graph_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ConvertTubesToTubeGraph, itkTemplate.itkTemplate):
        filter_object = itk.ConvertTubesToTubeGraph.values()[0]
    else:
        filter_object = itk.ConvertTubesToTubeGraph

    convert_tubes_to_tube_graph.__doc__ = filter_object.__doc__
    convert_tubes_to_tube_graph.__doc__ += "\n Args are Input(s) to the filter.\n"
    convert_tubes_to_tube_graph.__doc__ += "Available Keyword Arguments:\n"
    convert_tubes_to_tube_graph.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



