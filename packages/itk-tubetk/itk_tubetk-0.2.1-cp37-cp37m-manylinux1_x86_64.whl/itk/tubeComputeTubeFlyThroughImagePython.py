# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _tubeComputeTubeFlyThroughImagePython
else:
    import _tubeComputeTubeFlyThroughImagePython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _tubeComputeTubeFlyThroughImagePython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _tubeComputeTubeFlyThroughImagePython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkGroupSpatialObjectPython
import itk.itkSpatialObjectBasePython
import itk.itkCovariantVectorPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkSpatialObjectPropertyPython
import itk.itkRGBAPixelPython
import itk.ITKCommonBasePython
import itk.itkAffineTransformPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkMatrixOffsetTransformBasePython
import itk.itkDiffusionTensor3DPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkArray2DPython
import itk.itkVariableLengthVectorPython
import itk.itkTransformBasePython
import itk.itkArrayPython
import itk.itkOptimizerParametersPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkBoundingBoxPython
import itk.itkMapContainerPython
import itk.itkVectorContainerPython
import itk.itkContinuousIndexPython
import itk.itkImagePython
import itk.itkRGBPixelPython

def tubeComputeTubeFlyThroughImageD2_New():
    return tubeComputeTubeFlyThroughImageD2.New()

class tubeComputeTubeFlyThroughImageD2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTubeFlyThroughImageD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageD2___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageD2_Clone)
    SetTubeId = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageD2_SetTubeId)
    GetTubeId = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageD2_GetTubeId)
    SetInputImage = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageD2_SetInputImage)
    GetInputImage = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageD2_GetInputImage)
    SetInput = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageD2_SetInput)
    GetInput = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageD2_GetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageD2_GetOutput)
    GetOutputMask = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageD2_GetOutputMask)
    __swig_destroy__ = _tubeComputeTubeFlyThroughImagePython.delete_tubeComputeTubeFlyThroughImageD2
    cast = _swig_new_static_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageD2_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTubeFlyThroughImageD2

        Create a new object of the class tubeComputeTubeFlyThroughImageD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTubeFlyThroughImageD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTubeFlyThroughImageD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTubeFlyThroughImageD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTubeFlyThroughImageD2 in _tubeComputeTubeFlyThroughImagePython:
_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageD2_swigregister(tubeComputeTubeFlyThroughImageD2)
tubeComputeTubeFlyThroughImageD2___New_orig__ = _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageD2___New_orig__
tubeComputeTubeFlyThroughImageD2_cast = _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageD2_cast


def tubeComputeTubeFlyThroughImageD3_New():
    return tubeComputeTubeFlyThroughImageD3.New()

class tubeComputeTubeFlyThroughImageD3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTubeFlyThroughImageD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageD3___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageD3_Clone)
    SetTubeId = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageD3_SetTubeId)
    GetTubeId = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageD3_GetTubeId)
    SetInputImage = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageD3_SetInputImage)
    GetInputImage = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageD3_GetInputImage)
    SetInput = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageD3_SetInput)
    GetInput = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageD3_GetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageD3_GetOutput)
    GetOutputMask = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageD3_GetOutputMask)
    __swig_destroy__ = _tubeComputeTubeFlyThroughImagePython.delete_tubeComputeTubeFlyThroughImageD3
    cast = _swig_new_static_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageD3_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTubeFlyThroughImageD3

        Create a new object of the class tubeComputeTubeFlyThroughImageD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTubeFlyThroughImageD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTubeFlyThroughImageD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTubeFlyThroughImageD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTubeFlyThroughImageD3 in _tubeComputeTubeFlyThroughImagePython:
_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageD3_swigregister(tubeComputeTubeFlyThroughImageD3)
tubeComputeTubeFlyThroughImageD3___New_orig__ = _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageD3___New_orig__
tubeComputeTubeFlyThroughImageD3_cast = _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageD3_cast


def tubeComputeTubeFlyThroughImageF2_New():
    return tubeComputeTubeFlyThroughImageF2.New()

class tubeComputeTubeFlyThroughImageF2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTubeFlyThroughImageF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageF2___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageF2_Clone)
    SetTubeId = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageF2_SetTubeId)
    GetTubeId = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageF2_GetTubeId)
    SetInputImage = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageF2_SetInputImage)
    GetInputImage = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageF2_GetInputImage)
    SetInput = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageF2_SetInput)
    GetInput = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageF2_GetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageF2_GetOutput)
    GetOutputMask = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageF2_GetOutputMask)
    __swig_destroy__ = _tubeComputeTubeFlyThroughImagePython.delete_tubeComputeTubeFlyThroughImageF2
    cast = _swig_new_static_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageF2_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTubeFlyThroughImageF2

        Create a new object of the class tubeComputeTubeFlyThroughImageF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTubeFlyThroughImageF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTubeFlyThroughImageF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTubeFlyThroughImageF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTubeFlyThroughImageF2 in _tubeComputeTubeFlyThroughImagePython:
_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageF2_swigregister(tubeComputeTubeFlyThroughImageF2)
tubeComputeTubeFlyThroughImageF2___New_orig__ = _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageF2___New_orig__
tubeComputeTubeFlyThroughImageF2_cast = _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageF2_cast


def tubeComputeTubeFlyThroughImageF3_New():
    return tubeComputeTubeFlyThroughImageF3.New()

class tubeComputeTubeFlyThroughImageF3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTubeFlyThroughImageF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageF3___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageF3_Clone)
    SetTubeId = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageF3_SetTubeId)
    GetTubeId = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageF3_GetTubeId)
    SetInputImage = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageF3_SetInputImage)
    GetInputImage = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageF3_GetInputImage)
    SetInput = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageF3_SetInput)
    GetInput = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageF3_GetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageF3_GetOutput)
    GetOutputMask = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageF3_GetOutputMask)
    __swig_destroy__ = _tubeComputeTubeFlyThroughImagePython.delete_tubeComputeTubeFlyThroughImageF3
    cast = _swig_new_static_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageF3_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTubeFlyThroughImageF3

        Create a new object of the class tubeComputeTubeFlyThroughImageF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTubeFlyThroughImageF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTubeFlyThroughImageF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTubeFlyThroughImageF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTubeFlyThroughImageF3 in _tubeComputeTubeFlyThroughImagePython:
_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageF3_swigregister(tubeComputeTubeFlyThroughImageF3)
tubeComputeTubeFlyThroughImageF3___New_orig__ = _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageF3___New_orig__
tubeComputeTubeFlyThroughImageF3_cast = _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageF3_cast


def tubeComputeTubeFlyThroughImageSS2_New():
    return tubeComputeTubeFlyThroughImageSS2.New()

class tubeComputeTubeFlyThroughImageSS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTubeFlyThroughImageSS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageSS2___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageSS2_Clone)
    SetTubeId = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageSS2_SetTubeId)
    GetTubeId = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageSS2_GetTubeId)
    SetInputImage = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageSS2_SetInputImage)
    GetInputImage = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageSS2_GetInputImage)
    SetInput = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageSS2_SetInput)
    GetInput = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageSS2_GetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageSS2_GetOutput)
    GetOutputMask = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageSS2_GetOutputMask)
    __swig_destroy__ = _tubeComputeTubeFlyThroughImagePython.delete_tubeComputeTubeFlyThroughImageSS2
    cast = _swig_new_static_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageSS2_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTubeFlyThroughImageSS2

        Create a new object of the class tubeComputeTubeFlyThroughImageSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTubeFlyThroughImageSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTubeFlyThroughImageSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTubeFlyThroughImageSS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTubeFlyThroughImageSS2 in _tubeComputeTubeFlyThroughImagePython:
_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageSS2_swigregister(tubeComputeTubeFlyThroughImageSS2)
tubeComputeTubeFlyThroughImageSS2___New_orig__ = _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageSS2___New_orig__
tubeComputeTubeFlyThroughImageSS2_cast = _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageSS2_cast


def tubeComputeTubeFlyThroughImageSS3_New():
    return tubeComputeTubeFlyThroughImageSS3.New()

class tubeComputeTubeFlyThroughImageSS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTubeFlyThroughImageSS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageSS3___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageSS3_Clone)
    SetTubeId = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageSS3_SetTubeId)
    GetTubeId = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageSS3_GetTubeId)
    SetInputImage = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageSS3_SetInputImage)
    GetInputImage = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageSS3_GetInputImage)
    SetInput = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageSS3_SetInput)
    GetInput = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageSS3_GetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageSS3_GetOutput)
    GetOutputMask = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageSS3_GetOutputMask)
    __swig_destroy__ = _tubeComputeTubeFlyThroughImagePython.delete_tubeComputeTubeFlyThroughImageSS3
    cast = _swig_new_static_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageSS3_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTubeFlyThroughImageSS3

        Create a new object of the class tubeComputeTubeFlyThroughImageSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTubeFlyThroughImageSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTubeFlyThroughImageSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTubeFlyThroughImageSS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTubeFlyThroughImageSS3 in _tubeComputeTubeFlyThroughImagePython:
_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageSS3_swigregister(tubeComputeTubeFlyThroughImageSS3)
tubeComputeTubeFlyThroughImageSS3___New_orig__ = _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageSS3___New_orig__
tubeComputeTubeFlyThroughImageSS3_cast = _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageSS3_cast


def tubeComputeTubeFlyThroughImageUC2_New():
    return tubeComputeTubeFlyThroughImageUC2.New()

class tubeComputeTubeFlyThroughImageUC2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTubeFlyThroughImageUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUC2___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUC2_Clone)
    SetTubeId = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUC2_SetTubeId)
    GetTubeId = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUC2_GetTubeId)
    SetInputImage = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUC2_SetInputImage)
    GetInputImage = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUC2_GetInputImage)
    SetInput = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUC2_SetInput)
    GetInput = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUC2_GetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUC2_GetOutput)
    GetOutputMask = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUC2_GetOutputMask)
    __swig_destroy__ = _tubeComputeTubeFlyThroughImagePython.delete_tubeComputeTubeFlyThroughImageUC2
    cast = _swig_new_static_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUC2_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTubeFlyThroughImageUC2

        Create a new object of the class tubeComputeTubeFlyThroughImageUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTubeFlyThroughImageUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTubeFlyThroughImageUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTubeFlyThroughImageUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTubeFlyThroughImageUC2 in _tubeComputeTubeFlyThroughImagePython:
_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUC2_swigregister(tubeComputeTubeFlyThroughImageUC2)
tubeComputeTubeFlyThroughImageUC2___New_orig__ = _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUC2___New_orig__
tubeComputeTubeFlyThroughImageUC2_cast = _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUC2_cast


def tubeComputeTubeFlyThroughImageUC3_New():
    return tubeComputeTubeFlyThroughImageUC3.New()

class tubeComputeTubeFlyThroughImageUC3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTubeFlyThroughImageUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUC3___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUC3_Clone)
    SetTubeId = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUC3_SetTubeId)
    GetTubeId = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUC3_GetTubeId)
    SetInputImage = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUC3_SetInputImage)
    GetInputImage = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUC3_GetInputImage)
    SetInput = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUC3_SetInput)
    GetInput = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUC3_GetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUC3_GetOutput)
    GetOutputMask = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUC3_GetOutputMask)
    __swig_destroy__ = _tubeComputeTubeFlyThroughImagePython.delete_tubeComputeTubeFlyThroughImageUC3
    cast = _swig_new_static_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUC3_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTubeFlyThroughImageUC3

        Create a new object of the class tubeComputeTubeFlyThroughImageUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTubeFlyThroughImageUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTubeFlyThroughImageUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTubeFlyThroughImageUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTubeFlyThroughImageUC3 in _tubeComputeTubeFlyThroughImagePython:
_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUC3_swigregister(tubeComputeTubeFlyThroughImageUC3)
tubeComputeTubeFlyThroughImageUC3___New_orig__ = _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUC3___New_orig__
tubeComputeTubeFlyThroughImageUC3_cast = _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUC3_cast


def tubeComputeTubeFlyThroughImageUS2_New():
    return tubeComputeTubeFlyThroughImageUS2.New()

class tubeComputeTubeFlyThroughImageUS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTubeFlyThroughImageUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUS2___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUS2_Clone)
    SetTubeId = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUS2_SetTubeId)
    GetTubeId = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUS2_GetTubeId)
    SetInputImage = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUS2_SetInputImage)
    GetInputImage = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUS2_GetInputImage)
    SetInput = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUS2_SetInput)
    GetInput = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUS2_GetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUS2_GetOutput)
    GetOutputMask = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUS2_GetOutputMask)
    __swig_destroy__ = _tubeComputeTubeFlyThroughImagePython.delete_tubeComputeTubeFlyThroughImageUS2
    cast = _swig_new_static_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUS2_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTubeFlyThroughImageUS2

        Create a new object of the class tubeComputeTubeFlyThroughImageUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTubeFlyThroughImageUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTubeFlyThroughImageUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTubeFlyThroughImageUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTubeFlyThroughImageUS2 in _tubeComputeTubeFlyThroughImagePython:
_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUS2_swigregister(tubeComputeTubeFlyThroughImageUS2)
tubeComputeTubeFlyThroughImageUS2___New_orig__ = _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUS2___New_orig__
tubeComputeTubeFlyThroughImageUS2_cast = _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUS2_cast


def tubeComputeTubeFlyThroughImageUS3_New():
    return tubeComputeTubeFlyThroughImageUS3.New()

class tubeComputeTubeFlyThroughImageUS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTubeFlyThroughImageUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUS3___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUS3_Clone)
    SetTubeId = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUS3_SetTubeId)
    GetTubeId = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUS3_GetTubeId)
    SetInputImage = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUS3_SetInputImage)
    GetInputImage = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUS3_GetInputImage)
    SetInput = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUS3_SetInput)
    GetInput = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUS3_GetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUS3_GetOutput)
    GetOutputMask = _swig_new_instance_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUS3_GetOutputMask)
    __swig_destroy__ = _tubeComputeTubeFlyThroughImagePython.delete_tubeComputeTubeFlyThroughImageUS3
    cast = _swig_new_static_method(_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUS3_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTubeFlyThroughImageUS3

        Create a new object of the class tubeComputeTubeFlyThroughImageUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTubeFlyThroughImageUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTubeFlyThroughImageUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTubeFlyThroughImageUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTubeFlyThroughImageUS3 in _tubeComputeTubeFlyThroughImagePython:
_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUS3_swigregister(tubeComputeTubeFlyThroughImageUS3)
tubeComputeTubeFlyThroughImageUS3___New_orig__ = _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUS3___New_orig__
tubeComputeTubeFlyThroughImageUS3_cast = _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def compute_tube_fly_through_image(*args, **kwargs):
    """Procedural interface for ComputeTubeFlyThroughImage"""
    import itk
    instance = itk.ComputeTubeFlyThroughImage.New(*args, **kwargs)
    return instance.__internal_call__()

def compute_tube_fly_through_image_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ComputeTubeFlyThroughImage, itkTemplate.itkTemplate):
        filter_object = itk.ComputeTubeFlyThroughImage.values()[0]
    else:
        filter_object = itk.ComputeTubeFlyThroughImage

    compute_tube_fly_through_image.__doc__ = filter_object.__doc__
    compute_tube_fly_through_image.__doc__ += "\n Args are Input(s) to the filter.\n"
    compute_tube_fly_through_image.__doc__ += "Available Keyword Arguments:\n"
    compute_tube_fly_through_image.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



