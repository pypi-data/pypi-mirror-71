# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _tubeSegmentTubeUsingMinimalPathPython
else:
    import _tubeSegmentTubeUsingMinimalPathPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _tubeSegmentTubeUsingMinimalPathPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _tubeSegmentTubeUsingMinimalPathPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkPointPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.itkImagePython
import itk.itkCovariantVectorPython
import itk.itkRGBPixelPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkImageRegionPython
import itk.ITKCommonBasePython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkGroupSpatialObjectPython
import itk.itkSpatialObjectBasePython
import itk.itkAffineTransformPython
import itk.itkTransformBasePython
import itk.itkDiffusionTensor3DPython
import itk.itkArray2DPython
import itk.itkArrayPython
import itk.itkVariableLengthVectorPython
import itk.itkOptimizerParametersPython
import itk.itkMatrixOffsetTransformBasePython
import itk.itkBoundingBoxPython
import itk.itkVectorContainerPython
import itk.itkContinuousIndexPython
import itk.itkMapContainerPython
import itk.itkSpatialObjectPropertyPython

def tubeSegmentTubeUsingMinimalPath2D_New():
    return tubeSegmentTubeUsingMinimalPath2D.New()

class tubeSegmentTubeUsingMinimalPath2D(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeSegmentTubeUsingMinimalPath2D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D___New_orig__)
    Clone = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_Clone)
    SetTargetTubeGroup = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetTargetTubeGroup)
    SetSpeedImage = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetSpeedImage)
    GetSpeedImage = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_GetSpeedImage)
    SetRadiusImage = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetRadiusImage)
    GetRadiusImage = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_GetRadiusImage)
    SetStartPoint = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetStartPoint)
    SetEndPoint = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetEndPoint)
    SetConnectToTargetTubeSurface = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetConnectToTargetTubeSurface)
    SetOptimizationMethod = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetOptimizationMethod)
    SetOptimizerTerminationValue = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetOptimizerTerminationValue)
    SetOptimizerNumberOfIterations = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetOptimizerNumberOfIterations)
    SetOptimizerStepLengthFactor = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetOptimizerStepLengthFactor)
    SetOptimizerStepLengthRelax = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetOptimizerStepLengthRelax)
    SetStartRadius = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetStartRadius)
    SetMaxRadius = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetMaxRadius)
    SetStepSizeForRadiusEstimation = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetStepSizeForRadiusEstimation)
    GetCostAssociatedWithExtractedTube = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_GetCostAssociatedWithExtractedTube)
    GetOutput = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_GetOutput)
    SetIntermediatePoints = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetIntermediatePoints)
    __swig_destroy__ = _tubeSegmentTubeUsingMinimalPathPython.delete_tubeSegmentTubeUsingMinimalPath2D
    cast = _swig_new_static_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_cast)

    def New(*args, **kargs):
        """New() -> tubeSegmentTubeUsingMinimalPath2D

        Create a new object of the class tubeSegmentTubeUsingMinimalPath2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeSegmentTubeUsingMinimalPath2D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeSegmentTubeUsingMinimalPath2D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeSegmentTubeUsingMinimalPath2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeSegmentTubeUsingMinimalPath2D in _tubeSegmentTubeUsingMinimalPathPython:
_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_swigregister(tubeSegmentTubeUsingMinimalPath2D)
tubeSegmentTubeUsingMinimalPath2D___New_orig__ = _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D___New_orig__
tubeSegmentTubeUsingMinimalPath2D_cast = _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_cast


def tubeSegmentTubeUsingMinimalPath2F_New():
    return tubeSegmentTubeUsingMinimalPath2F.New()

class tubeSegmentTubeUsingMinimalPath2F(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeSegmentTubeUsingMinimalPath2F class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F___New_orig__)
    Clone = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_Clone)
    SetTargetTubeGroup = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetTargetTubeGroup)
    SetSpeedImage = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetSpeedImage)
    GetSpeedImage = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_GetSpeedImage)
    SetRadiusImage = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetRadiusImage)
    GetRadiusImage = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_GetRadiusImage)
    SetStartPoint = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetStartPoint)
    SetEndPoint = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetEndPoint)
    SetConnectToTargetTubeSurface = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetConnectToTargetTubeSurface)
    SetOptimizationMethod = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetOptimizationMethod)
    SetOptimizerTerminationValue = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetOptimizerTerminationValue)
    SetOptimizerNumberOfIterations = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetOptimizerNumberOfIterations)
    SetOptimizerStepLengthFactor = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetOptimizerStepLengthFactor)
    SetOptimizerStepLengthRelax = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetOptimizerStepLengthRelax)
    SetStartRadius = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetStartRadius)
    SetMaxRadius = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetMaxRadius)
    SetStepSizeForRadiusEstimation = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetStepSizeForRadiusEstimation)
    GetCostAssociatedWithExtractedTube = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_GetCostAssociatedWithExtractedTube)
    GetOutput = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_GetOutput)
    SetIntermediatePoints = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetIntermediatePoints)
    __swig_destroy__ = _tubeSegmentTubeUsingMinimalPathPython.delete_tubeSegmentTubeUsingMinimalPath2F
    cast = _swig_new_static_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_cast)

    def New(*args, **kargs):
        """New() -> tubeSegmentTubeUsingMinimalPath2F

        Create a new object of the class tubeSegmentTubeUsingMinimalPath2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeSegmentTubeUsingMinimalPath2F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeSegmentTubeUsingMinimalPath2F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeSegmentTubeUsingMinimalPath2F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeSegmentTubeUsingMinimalPath2F in _tubeSegmentTubeUsingMinimalPathPython:
_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_swigregister(tubeSegmentTubeUsingMinimalPath2F)
tubeSegmentTubeUsingMinimalPath2F___New_orig__ = _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F___New_orig__
tubeSegmentTubeUsingMinimalPath2F_cast = _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_cast


def tubeSegmentTubeUsingMinimalPath2SS_New():
    return tubeSegmentTubeUsingMinimalPath2SS.New()

class tubeSegmentTubeUsingMinimalPath2SS(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeSegmentTubeUsingMinimalPath2SS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS___New_orig__)
    Clone = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_Clone)
    SetTargetTubeGroup = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetTargetTubeGroup)
    SetSpeedImage = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetSpeedImage)
    GetSpeedImage = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_GetSpeedImage)
    SetRadiusImage = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetRadiusImage)
    GetRadiusImage = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_GetRadiusImage)
    SetStartPoint = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetStartPoint)
    SetEndPoint = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetEndPoint)
    SetConnectToTargetTubeSurface = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetConnectToTargetTubeSurface)
    SetOptimizationMethod = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetOptimizationMethod)
    SetOptimizerTerminationValue = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetOptimizerTerminationValue)
    SetOptimizerNumberOfIterations = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetOptimizerNumberOfIterations)
    SetOptimizerStepLengthFactor = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetOptimizerStepLengthFactor)
    SetOptimizerStepLengthRelax = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetOptimizerStepLengthRelax)
    SetStartRadius = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetStartRadius)
    SetMaxRadius = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetMaxRadius)
    SetStepSizeForRadiusEstimation = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetStepSizeForRadiusEstimation)
    GetCostAssociatedWithExtractedTube = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_GetCostAssociatedWithExtractedTube)
    GetOutput = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_GetOutput)
    SetIntermediatePoints = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetIntermediatePoints)
    __swig_destroy__ = _tubeSegmentTubeUsingMinimalPathPython.delete_tubeSegmentTubeUsingMinimalPath2SS
    cast = _swig_new_static_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_cast)

    def New(*args, **kargs):
        """New() -> tubeSegmentTubeUsingMinimalPath2SS

        Create a new object of the class tubeSegmentTubeUsingMinimalPath2SS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeSegmentTubeUsingMinimalPath2SS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeSegmentTubeUsingMinimalPath2SS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeSegmentTubeUsingMinimalPath2SS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeSegmentTubeUsingMinimalPath2SS in _tubeSegmentTubeUsingMinimalPathPython:
_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_swigregister(tubeSegmentTubeUsingMinimalPath2SS)
tubeSegmentTubeUsingMinimalPath2SS___New_orig__ = _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS___New_orig__
tubeSegmentTubeUsingMinimalPath2SS_cast = _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_cast


def tubeSegmentTubeUsingMinimalPath2UC_New():
    return tubeSegmentTubeUsingMinimalPath2UC.New()

class tubeSegmentTubeUsingMinimalPath2UC(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeSegmentTubeUsingMinimalPath2UC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC___New_orig__)
    Clone = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_Clone)
    SetTargetTubeGroup = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetTargetTubeGroup)
    SetSpeedImage = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetSpeedImage)
    GetSpeedImage = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_GetSpeedImage)
    SetRadiusImage = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetRadiusImage)
    GetRadiusImage = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_GetRadiusImage)
    SetStartPoint = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetStartPoint)
    SetEndPoint = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetEndPoint)
    SetConnectToTargetTubeSurface = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetConnectToTargetTubeSurface)
    SetOptimizationMethod = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetOptimizationMethod)
    SetOptimizerTerminationValue = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetOptimizerTerminationValue)
    SetOptimizerNumberOfIterations = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetOptimizerNumberOfIterations)
    SetOptimizerStepLengthFactor = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetOptimizerStepLengthFactor)
    SetOptimizerStepLengthRelax = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetOptimizerStepLengthRelax)
    SetStartRadius = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetStartRadius)
    SetMaxRadius = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetMaxRadius)
    SetStepSizeForRadiusEstimation = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetStepSizeForRadiusEstimation)
    GetCostAssociatedWithExtractedTube = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_GetCostAssociatedWithExtractedTube)
    GetOutput = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_GetOutput)
    SetIntermediatePoints = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetIntermediatePoints)
    __swig_destroy__ = _tubeSegmentTubeUsingMinimalPathPython.delete_tubeSegmentTubeUsingMinimalPath2UC
    cast = _swig_new_static_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_cast)

    def New(*args, **kargs):
        """New() -> tubeSegmentTubeUsingMinimalPath2UC

        Create a new object of the class tubeSegmentTubeUsingMinimalPath2UC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeSegmentTubeUsingMinimalPath2UC.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeSegmentTubeUsingMinimalPath2UC.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeSegmentTubeUsingMinimalPath2UC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeSegmentTubeUsingMinimalPath2UC in _tubeSegmentTubeUsingMinimalPathPython:
_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_swigregister(tubeSegmentTubeUsingMinimalPath2UC)
tubeSegmentTubeUsingMinimalPath2UC___New_orig__ = _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC___New_orig__
tubeSegmentTubeUsingMinimalPath2UC_cast = _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_cast


def tubeSegmentTubeUsingMinimalPath2US_New():
    return tubeSegmentTubeUsingMinimalPath2US.New()

class tubeSegmentTubeUsingMinimalPath2US(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeSegmentTubeUsingMinimalPath2US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US___New_orig__)
    Clone = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_Clone)
    SetTargetTubeGroup = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetTargetTubeGroup)
    SetSpeedImage = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetSpeedImage)
    GetSpeedImage = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_GetSpeedImage)
    SetRadiusImage = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetRadiusImage)
    GetRadiusImage = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_GetRadiusImage)
    SetStartPoint = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetStartPoint)
    SetEndPoint = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetEndPoint)
    SetConnectToTargetTubeSurface = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetConnectToTargetTubeSurface)
    SetOptimizationMethod = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetOptimizationMethod)
    SetOptimizerTerminationValue = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetOptimizerTerminationValue)
    SetOptimizerNumberOfIterations = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetOptimizerNumberOfIterations)
    SetOptimizerStepLengthFactor = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetOptimizerStepLengthFactor)
    SetOptimizerStepLengthRelax = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetOptimizerStepLengthRelax)
    SetStartRadius = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetStartRadius)
    SetMaxRadius = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetMaxRadius)
    SetStepSizeForRadiusEstimation = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetStepSizeForRadiusEstimation)
    GetCostAssociatedWithExtractedTube = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_GetCostAssociatedWithExtractedTube)
    GetOutput = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_GetOutput)
    SetIntermediatePoints = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetIntermediatePoints)
    __swig_destroy__ = _tubeSegmentTubeUsingMinimalPathPython.delete_tubeSegmentTubeUsingMinimalPath2US
    cast = _swig_new_static_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_cast)

    def New(*args, **kargs):
        """New() -> tubeSegmentTubeUsingMinimalPath2US

        Create a new object of the class tubeSegmentTubeUsingMinimalPath2US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeSegmentTubeUsingMinimalPath2US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeSegmentTubeUsingMinimalPath2US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeSegmentTubeUsingMinimalPath2US.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeSegmentTubeUsingMinimalPath2US in _tubeSegmentTubeUsingMinimalPathPython:
_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_swigregister(tubeSegmentTubeUsingMinimalPath2US)
tubeSegmentTubeUsingMinimalPath2US___New_orig__ = _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US___New_orig__
tubeSegmentTubeUsingMinimalPath2US_cast = _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_cast


def tubeSegmentTubeUsingMinimalPath3D_New():
    return tubeSegmentTubeUsingMinimalPath3D.New()

class tubeSegmentTubeUsingMinimalPath3D(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeSegmentTubeUsingMinimalPath3D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D___New_orig__)
    Clone = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_Clone)
    SetTargetTubeGroup = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetTargetTubeGroup)
    SetSpeedImage = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetSpeedImage)
    GetSpeedImage = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_GetSpeedImage)
    SetRadiusImage = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetRadiusImage)
    GetRadiusImage = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_GetRadiusImage)
    SetStartPoint = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetStartPoint)
    SetEndPoint = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetEndPoint)
    SetConnectToTargetTubeSurface = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetConnectToTargetTubeSurface)
    SetOptimizationMethod = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetOptimizationMethod)
    SetOptimizerTerminationValue = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetOptimizerTerminationValue)
    SetOptimizerNumberOfIterations = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetOptimizerNumberOfIterations)
    SetOptimizerStepLengthFactor = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetOptimizerStepLengthFactor)
    SetOptimizerStepLengthRelax = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetOptimizerStepLengthRelax)
    SetStartRadius = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetStartRadius)
    SetMaxRadius = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetMaxRadius)
    SetStepSizeForRadiusEstimation = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetStepSizeForRadiusEstimation)
    GetCostAssociatedWithExtractedTube = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_GetCostAssociatedWithExtractedTube)
    GetOutput = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_GetOutput)
    SetIntermediatePoints = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetIntermediatePoints)
    __swig_destroy__ = _tubeSegmentTubeUsingMinimalPathPython.delete_tubeSegmentTubeUsingMinimalPath3D
    cast = _swig_new_static_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_cast)

    def New(*args, **kargs):
        """New() -> tubeSegmentTubeUsingMinimalPath3D

        Create a new object of the class tubeSegmentTubeUsingMinimalPath3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeSegmentTubeUsingMinimalPath3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeSegmentTubeUsingMinimalPath3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeSegmentTubeUsingMinimalPath3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeSegmentTubeUsingMinimalPath3D in _tubeSegmentTubeUsingMinimalPathPython:
_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_swigregister(tubeSegmentTubeUsingMinimalPath3D)
tubeSegmentTubeUsingMinimalPath3D___New_orig__ = _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D___New_orig__
tubeSegmentTubeUsingMinimalPath3D_cast = _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_cast


def tubeSegmentTubeUsingMinimalPath3F_New():
    return tubeSegmentTubeUsingMinimalPath3F.New()

class tubeSegmentTubeUsingMinimalPath3F(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeSegmentTubeUsingMinimalPath3F class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F___New_orig__)
    Clone = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_Clone)
    SetTargetTubeGroup = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetTargetTubeGroup)
    SetSpeedImage = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetSpeedImage)
    GetSpeedImage = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_GetSpeedImage)
    SetRadiusImage = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetRadiusImage)
    GetRadiusImage = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_GetRadiusImage)
    SetStartPoint = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetStartPoint)
    SetEndPoint = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetEndPoint)
    SetConnectToTargetTubeSurface = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetConnectToTargetTubeSurface)
    SetOptimizationMethod = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetOptimizationMethod)
    SetOptimizerTerminationValue = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetOptimizerTerminationValue)
    SetOptimizerNumberOfIterations = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetOptimizerNumberOfIterations)
    SetOptimizerStepLengthFactor = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetOptimizerStepLengthFactor)
    SetOptimizerStepLengthRelax = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetOptimizerStepLengthRelax)
    SetStartRadius = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetStartRadius)
    SetMaxRadius = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetMaxRadius)
    SetStepSizeForRadiusEstimation = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetStepSizeForRadiusEstimation)
    GetCostAssociatedWithExtractedTube = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_GetCostAssociatedWithExtractedTube)
    GetOutput = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_GetOutput)
    SetIntermediatePoints = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetIntermediatePoints)
    __swig_destroy__ = _tubeSegmentTubeUsingMinimalPathPython.delete_tubeSegmentTubeUsingMinimalPath3F
    cast = _swig_new_static_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_cast)

    def New(*args, **kargs):
        """New() -> tubeSegmentTubeUsingMinimalPath3F

        Create a new object of the class tubeSegmentTubeUsingMinimalPath3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeSegmentTubeUsingMinimalPath3F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeSegmentTubeUsingMinimalPath3F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeSegmentTubeUsingMinimalPath3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeSegmentTubeUsingMinimalPath3F in _tubeSegmentTubeUsingMinimalPathPython:
_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_swigregister(tubeSegmentTubeUsingMinimalPath3F)
tubeSegmentTubeUsingMinimalPath3F___New_orig__ = _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F___New_orig__
tubeSegmentTubeUsingMinimalPath3F_cast = _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_cast


def tubeSegmentTubeUsingMinimalPath3SS_New():
    return tubeSegmentTubeUsingMinimalPath3SS.New()

class tubeSegmentTubeUsingMinimalPath3SS(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeSegmentTubeUsingMinimalPath3SS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS___New_orig__)
    Clone = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_Clone)
    SetTargetTubeGroup = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetTargetTubeGroup)
    SetSpeedImage = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetSpeedImage)
    GetSpeedImage = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_GetSpeedImage)
    SetRadiusImage = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetRadiusImage)
    GetRadiusImage = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_GetRadiusImage)
    SetStartPoint = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetStartPoint)
    SetEndPoint = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetEndPoint)
    SetConnectToTargetTubeSurface = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetConnectToTargetTubeSurface)
    SetOptimizationMethod = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetOptimizationMethod)
    SetOptimizerTerminationValue = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetOptimizerTerminationValue)
    SetOptimizerNumberOfIterations = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetOptimizerNumberOfIterations)
    SetOptimizerStepLengthFactor = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetOptimizerStepLengthFactor)
    SetOptimizerStepLengthRelax = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetOptimizerStepLengthRelax)
    SetStartRadius = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetStartRadius)
    SetMaxRadius = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetMaxRadius)
    SetStepSizeForRadiusEstimation = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetStepSizeForRadiusEstimation)
    GetCostAssociatedWithExtractedTube = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_GetCostAssociatedWithExtractedTube)
    GetOutput = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_GetOutput)
    SetIntermediatePoints = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetIntermediatePoints)
    __swig_destroy__ = _tubeSegmentTubeUsingMinimalPathPython.delete_tubeSegmentTubeUsingMinimalPath3SS
    cast = _swig_new_static_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_cast)

    def New(*args, **kargs):
        """New() -> tubeSegmentTubeUsingMinimalPath3SS

        Create a new object of the class tubeSegmentTubeUsingMinimalPath3SS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeSegmentTubeUsingMinimalPath3SS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeSegmentTubeUsingMinimalPath3SS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeSegmentTubeUsingMinimalPath3SS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeSegmentTubeUsingMinimalPath3SS in _tubeSegmentTubeUsingMinimalPathPython:
_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_swigregister(tubeSegmentTubeUsingMinimalPath3SS)
tubeSegmentTubeUsingMinimalPath3SS___New_orig__ = _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS___New_orig__
tubeSegmentTubeUsingMinimalPath3SS_cast = _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_cast


def tubeSegmentTubeUsingMinimalPath3UC_New():
    return tubeSegmentTubeUsingMinimalPath3UC.New()

class tubeSegmentTubeUsingMinimalPath3UC(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeSegmentTubeUsingMinimalPath3UC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC___New_orig__)
    Clone = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_Clone)
    SetTargetTubeGroup = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetTargetTubeGroup)
    SetSpeedImage = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetSpeedImage)
    GetSpeedImage = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_GetSpeedImage)
    SetRadiusImage = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetRadiusImage)
    GetRadiusImage = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_GetRadiusImage)
    SetStartPoint = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetStartPoint)
    SetEndPoint = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetEndPoint)
    SetConnectToTargetTubeSurface = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetConnectToTargetTubeSurface)
    SetOptimizationMethod = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetOptimizationMethod)
    SetOptimizerTerminationValue = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetOptimizerTerminationValue)
    SetOptimizerNumberOfIterations = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetOptimizerNumberOfIterations)
    SetOptimizerStepLengthFactor = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetOptimizerStepLengthFactor)
    SetOptimizerStepLengthRelax = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetOptimizerStepLengthRelax)
    SetStartRadius = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetStartRadius)
    SetMaxRadius = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetMaxRadius)
    SetStepSizeForRadiusEstimation = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetStepSizeForRadiusEstimation)
    GetCostAssociatedWithExtractedTube = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_GetCostAssociatedWithExtractedTube)
    GetOutput = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_GetOutput)
    SetIntermediatePoints = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetIntermediatePoints)
    __swig_destroy__ = _tubeSegmentTubeUsingMinimalPathPython.delete_tubeSegmentTubeUsingMinimalPath3UC
    cast = _swig_new_static_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_cast)

    def New(*args, **kargs):
        """New() -> tubeSegmentTubeUsingMinimalPath3UC

        Create a new object of the class tubeSegmentTubeUsingMinimalPath3UC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeSegmentTubeUsingMinimalPath3UC.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeSegmentTubeUsingMinimalPath3UC.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeSegmentTubeUsingMinimalPath3UC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeSegmentTubeUsingMinimalPath3UC in _tubeSegmentTubeUsingMinimalPathPython:
_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_swigregister(tubeSegmentTubeUsingMinimalPath3UC)
tubeSegmentTubeUsingMinimalPath3UC___New_orig__ = _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC___New_orig__
tubeSegmentTubeUsingMinimalPath3UC_cast = _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_cast


def tubeSegmentTubeUsingMinimalPath3US_New():
    return tubeSegmentTubeUsingMinimalPath3US.New()

class tubeSegmentTubeUsingMinimalPath3US(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeSegmentTubeUsingMinimalPath3US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US___New_orig__)
    Clone = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_Clone)
    SetTargetTubeGroup = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetTargetTubeGroup)
    SetSpeedImage = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetSpeedImage)
    GetSpeedImage = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_GetSpeedImage)
    SetRadiusImage = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetRadiusImage)
    GetRadiusImage = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_GetRadiusImage)
    SetStartPoint = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetStartPoint)
    SetEndPoint = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetEndPoint)
    SetConnectToTargetTubeSurface = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetConnectToTargetTubeSurface)
    SetOptimizationMethod = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetOptimizationMethod)
    SetOptimizerTerminationValue = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetOptimizerTerminationValue)
    SetOptimizerNumberOfIterations = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetOptimizerNumberOfIterations)
    SetOptimizerStepLengthFactor = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetOptimizerStepLengthFactor)
    SetOptimizerStepLengthRelax = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetOptimizerStepLengthRelax)
    SetStartRadius = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetStartRadius)
    SetMaxRadius = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetMaxRadius)
    SetStepSizeForRadiusEstimation = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetStepSizeForRadiusEstimation)
    GetCostAssociatedWithExtractedTube = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_GetCostAssociatedWithExtractedTube)
    GetOutput = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_GetOutput)
    SetIntermediatePoints = _swig_new_instance_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetIntermediatePoints)
    __swig_destroy__ = _tubeSegmentTubeUsingMinimalPathPython.delete_tubeSegmentTubeUsingMinimalPath3US
    cast = _swig_new_static_method(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_cast)

    def New(*args, **kargs):
        """New() -> tubeSegmentTubeUsingMinimalPath3US

        Create a new object of the class tubeSegmentTubeUsingMinimalPath3US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeSegmentTubeUsingMinimalPath3US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeSegmentTubeUsingMinimalPath3US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeSegmentTubeUsingMinimalPath3US.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeSegmentTubeUsingMinimalPath3US in _tubeSegmentTubeUsingMinimalPathPython:
_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_swigregister(tubeSegmentTubeUsingMinimalPath3US)
tubeSegmentTubeUsingMinimalPath3US___New_orig__ = _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US___New_orig__
tubeSegmentTubeUsingMinimalPath3US_cast = _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def segment_tube_using_minimal_path(*args, **kwargs):
    """Procedural interface for SegmentTubeUsingMinimalPath"""
    import itk
    instance = itk.SegmentTubeUsingMinimalPath.New(*args, **kwargs)
    return instance.__internal_call__()

def segment_tube_using_minimal_path_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.SegmentTubeUsingMinimalPath, itkTemplate.itkTemplate):
        filter_object = itk.SegmentTubeUsingMinimalPath.values()[0]
    else:
        filter_object = itk.SegmentTubeUsingMinimalPath

    segment_tube_using_minimal_path.__doc__ = filter_object.__doc__
    segment_tube_using_minimal_path.__doc__ += "\n Args are Input(s) to the filter.\n"
    segment_tube_using_minimal_path.__doc__ += "Available Keyword Arguments:\n"
    segment_tube_using_minimal_path.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



