# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _tubeComputeImageSimilarityMetricsPython
else:
    import _tubeComputeImageSimilarityMetricsPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _tubeComputeImageSimilarityMetricsPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _tubeComputeImageSimilarityMetricsPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImagePython
import itk.itkCovariantVectorPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.itkRGBPixelPython
import itk.itkPointPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkImageRegionPython
import itk.ITKCommonBasePython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython

def tubeComputeImageSimilarityMetricsID2_New():
    return tubeComputeImageSimilarityMetricsID2.New()

class tubeComputeImageSimilarityMetricsID2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeImageSimilarityMetricsID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID2___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID2_Clone)
    SetUseCorrelation = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID2_SetUseCorrelation)
    GetUseCorrelation = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID2_GetUseCorrelation)
    SetSamplingRate = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID2_SetSamplingRate)
    GetSamplingRate = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID2_GetSamplingRate)
    SetInput1 = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID2_SetInput1)
    GetInput1 = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID2_GetInput1)
    SetInput2 = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID2_SetInput2)
    GetInput2 = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID2_GetInput2)
    GetOutput = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID2_GetOutput)
    __swig_destroy__ = _tubeComputeImageSimilarityMetricsPython.delete_tubeComputeImageSimilarityMetricsID2
    cast = _swig_new_static_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID2_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeImageSimilarityMetricsID2

        Create a new object of the class tubeComputeImageSimilarityMetricsID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageSimilarityMetricsID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeImageSimilarityMetricsID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeImageSimilarityMetricsID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeImageSimilarityMetricsID2 in _tubeComputeImageSimilarityMetricsPython:
_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID2_swigregister(tubeComputeImageSimilarityMetricsID2)
tubeComputeImageSimilarityMetricsID2___New_orig__ = _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID2___New_orig__
tubeComputeImageSimilarityMetricsID2_cast = _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID2_cast


def tubeComputeImageSimilarityMetricsID3_New():
    return tubeComputeImageSimilarityMetricsID3.New()

class tubeComputeImageSimilarityMetricsID3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeImageSimilarityMetricsID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID3___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID3_Clone)
    SetUseCorrelation = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID3_SetUseCorrelation)
    GetUseCorrelation = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID3_GetUseCorrelation)
    SetSamplingRate = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID3_SetSamplingRate)
    GetSamplingRate = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID3_GetSamplingRate)
    SetInput1 = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID3_SetInput1)
    GetInput1 = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID3_GetInput1)
    SetInput2 = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID3_SetInput2)
    GetInput2 = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID3_GetInput2)
    GetOutput = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID3_GetOutput)
    __swig_destroy__ = _tubeComputeImageSimilarityMetricsPython.delete_tubeComputeImageSimilarityMetricsID3
    cast = _swig_new_static_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID3_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeImageSimilarityMetricsID3

        Create a new object of the class tubeComputeImageSimilarityMetricsID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageSimilarityMetricsID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeImageSimilarityMetricsID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeImageSimilarityMetricsID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeImageSimilarityMetricsID3 in _tubeComputeImageSimilarityMetricsPython:
_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID3_swigregister(tubeComputeImageSimilarityMetricsID3)
tubeComputeImageSimilarityMetricsID3___New_orig__ = _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID3___New_orig__
tubeComputeImageSimilarityMetricsID3_cast = _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID3_cast


def tubeComputeImageSimilarityMetricsIF2_New():
    return tubeComputeImageSimilarityMetricsIF2.New()

class tubeComputeImageSimilarityMetricsIF2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeImageSimilarityMetricsIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF2___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF2_Clone)
    SetUseCorrelation = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF2_SetUseCorrelation)
    GetUseCorrelation = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF2_GetUseCorrelation)
    SetSamplingRate = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF2_SetSamplingRate)
    GetSamplingRate = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF2_GetSamplingRate)
    SetInput1 = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF2_SetInput1)
    GetInput1 = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF2_GetInput1)
    SetInput2 = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF2_SetInput2)
    GetInput2 = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF2_GetInput2)
    GetOutput = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF2_GetOutput)
    __swig_destroy__ = _tubeComputeImageSimilarityMetricsPython.delete_tubeComputeImageSimilarityMetricsIF2
    cast = _swig_new_static_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF2_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeImageSimilarityMetricsIF2

        Create a new object of the class tubeComputeImageSimilarityMetricsIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageSimilarityMetricsIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeImageSimilarityMetricsIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeImageSimilarityMetricsIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeImageSimilarityMetricsIF2 in _tubeComputeImageSimilarityMetricsPython:
_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF2_swigregister(tubeComputeImageSimilarityMetricsIF2)
tubeComputeImageSimilarityMetricsIF2___New_orig__ = _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF2___New_orig__
tubeComputeImageSimilarityMetricsIF2_cast = _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF2_cast


def tubeComputeImageSimilarityMetricsIF3_New():
    return tubeComputeImageSimilarityMetricsIF3.New()

class tubeComputeImageSimilarityMetricsIF3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeImageSimilarityMetricsIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF3___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF3_Clone)
    SetUseCorrelation = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF3_SetUseCorrelation)
    GetUseCorrelation = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF3_GetUseCorrelation)
    SetSamplingRate = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF3_SetSamplingRate)
    GetSamplingRate = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF3_GetSamplingRate)
    SetInput1 = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF3_SetInput1)
    GetInput1 = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF3_GetInput1)
    SetInput2 = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF3_SetInput2)
    GetInput2 = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF3_GetInput2)
    GetOutput = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF3_GetOutput)
    __swig_destroy__ = _tubeComputeImageSimilarityMetricsPython.delete_tubeComputeImageSimilarityMetricsIF3
    cast = _swig_new_static_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF3_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeImageSimilarityMetricsIF3

        Create a new object of the class tubeComputeImageSimilarityMetricsIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageSimilarityMetricsIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeImageSimilarityMetricsIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeImageSimilarityMetricsIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeImageSimilarityMetricsIF3 in _tubeComputeImageSimilarityMetricsPython:
_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF3_swigregister(tubeComputeImageSimilarityMetricsIF3)
tubeComputeImageSimilarityMetricsIF3___New_orig__ = _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF3___New_orig__
tubeComputeImageSimilarityMetricsIF3_cast = _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF3_cast


def tubeComputeImageSimilarityMetricsISS2_New():
    return tubeComputeImageSimilarityMetricsISS2.New()

class tubeComputeImageSimilarityMetricsISS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeImageSimilarityMetricsISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS2___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS2_Clone)
    SetUseCorrelation = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS2_SetUseCorrelation)
    GetUseCorrelation = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS2_GetUseCorrelation)
    SetSamplingRate = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS2_SetSamplingRate)
    GetSamplingRate = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS2_GetSamplingRate)
    SetInput1 = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS2_SetInput1)
    GetInput1 = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS2_GetInput1)
    SetInput2 = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS2_SetInput2)
    GetInput2 = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS2_GetInput2)
    GetOutput = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS2_GetOutput)
    __swig_destroy__ = _tubeComputeImageSimilarityMetricsPython.delete_tubeComputeImageSimilarityMetricsISS2
    cast = _swig_new_static_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS2_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeImageSimilarityMetricsISS2

        Create a new object of the class tubeComputeImageSimilarityMetricsISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageSimilarityMetricsISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeImageSimilarityMetricsISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeImageSimilarityMetricsISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeImageSimilarityMetricsISS2 in _tubeComputeImageSimilarityMetricsPython:
_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS2_swigregister(tubeComputeImageSimilarityMetricsISS2)
tubeComputeImageSimilarityMetricsISS2___New_orig__ = _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS2___New_orig__
tubeComputeImageSimilarityMetricsISS2_cast = _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS2_cast


def tubeComputeImageSimilarityMetricsISS3_New():
    return tubeComputeImageSimilarityMetricsISS3.New()

class tubeComputeImageSimilarityMetricsISS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeImageSimilarityMetricsISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS3___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS3_Clone)
    SetUseCorrelation = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS3_SetUseCorrelation)
    GetUseCorrelation = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS3_GetUseCorrelation)
    SetSamplingRate = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS3_SetSamplingRate)
    GetSamplingRate = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS3_GetSamplingRate)
    SetInput1 = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS3_SetInput1)
    GetInput1 = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS3_GetInput1)
    SetInput2 = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS3_SetInput2)
    GetInput2 = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS3_GetInput2)
    GetOutput = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS3_GetOutput)
    __swig_destroy__ = _tubeComputeImageSimilarityMetricsPython.delete_tubeComputeImageSimilarityMetricsISS3
    cast = _swig_new_static_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS3_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeImageSimilarityMetricsISS3

        Create a new object of the class tubeComputeImageSimilarityMetricsISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageSimilarityMetricsISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeImageSimilarityMetricsISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeImageSimilarityMetricsISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeImageSimilarityMetricsISS3 in _tubeComputeImageSimilarityMetricsPython:
_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS3_swigregister(tubeComputeImageSimilarityMetricsISS3)
tubeComputeImageSimilarityMetricsISS3___New_orig__ = _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS3___New_orig__
tubeComputeImageSimilarityMetricsISS3_cast = _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS3_cast


def tubeComputeImageSimilarityMetricsIUC2_New():
    return tubeComputeImageSimilarityMetricsIUC2.New()

class tubeComputeImageSimilarityMetricsIUC2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeImageSimilarityMetricsIUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC2___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC2_Clone)
    SetUseCorrelation = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC2_SetUseCorrelation)
    GetUseCorrelation = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC2_GetUseCorrelation)
    SetSamplingRate = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC2_SetSamplingRate)
    GetSamplingRate = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC2_GetSamplingRate)
    SetInput1 = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC2_SetInput1)
    GetInput1 = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC2_GetInput1)
    SetInput2 = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC2_SetInput2)
    GetInput2 = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC2_GetInput2)
    GetOutput = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC2_GetOutput)
    __swig_destroy__ = _tubeComputeImageSimilarityMetricsPython.delete_tubeComputeImageSimilarityMetricsIUC2
    cast = _swig_new_static_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC2_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeImageSimilarityMetricsIUC2

        Create a new object of the class tubeComputeImageSimilarityMetricsIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageSimilarityMetricsIUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeImageSimilarityMetricsIUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeImageSimilarityMetricsIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeImageSimilarityMetricsIUC2 in _tubeComputeImageSimilarityMetricsPython:
_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC2_swigregister(tubeComputeImageSimilarityMetricsIUC2)
tubeComputeImageSimilarityMetricsIUC2___New_orig__ = _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC2___New_orig__
tubeComputeImageSimilarityMetricsIUC2_cast = _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC2_cast


def tubeComputeImageSimilarityMetricsIUC3_New():
    return tubeComputeImageSimilarityMetricsIUC3.New()

class tubeComputeImageSimilarityMetricsIUC3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeImageSimilarityMetricsIUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC3___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC3_Clone)
    SetUseCorrelation = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC3_SetUseCorrelation)
    GetUseCorrelation = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC3_GetUseCorrelation)
    SetSamplingRate = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC3_SetSamplingRate)
    GetSamplingRate = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC3_GetSamplingRate)
    SetInput1 = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC3_SetInput1)
    GetInput1 = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC3_GetInput1)
    SetInput2 = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC3_SetInput2)
    GetInput2 = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC3_GetInput2)
    GetOutput = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC3_GetOutput)
    __swig_destroy__ = _tubeComputeImageSimilarityMetricsPython.delete_tubeComputeImageSimilarityMetricsIUC3
    cast = _swig_new_static_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC3_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeImageSimilarityMetricsIUC3

        Create a new object of the class tubeComputeImageSimilarityMetricsIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageSimilarityMetricsIUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeImageSimilarityMetricsIUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeImageSimilarityMetricsIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeImageSimilarityMetricsIUC3 in _tubeComputeImageSimilarityMetricsPython:
_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC3_swigregister(tubeComputeImageSimilarityMetricsIUC3)
tubeComputeImageSimilarityMetricsIUC3___New_orig__ = _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC3___New_orig__
tubeComputeImageSimilarityMetricsIUC3_cast = _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC3_cast


def tubeComputeImageSimilarityMetricsIUS2_New():
    return tubeComputeImageSimilarityMetricsIUS2.New()

class tubeComputeImageSimilarityMetricsIUS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeImageSimilarityMetricsIUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS2___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS2_Clone)
    SetUseCorrelation = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS2_SetUseCorrelation)
    GetUseCorrelation = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS2_GetUseCorrelation)
    SetSamplingRate = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS2_SetSamplingRate)
    GetSamplingRate = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS2_GetSamplingRate)
    SetInput1 = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS2_SetInput1)
    GetInput1 = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS2_GetInput1)
    SetInput2 = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS2_SetInput2)
    GetInput2 = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS2_GetInput2)
    GetOutput = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS2_GetOutput)
    __swig_destroy__ = _tubeComputeImageSimilarityMetricsPython.delete_tubeComputeImageSimilarityMetricsIUS2
    cast = _swig_new_static_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS2_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeImageSimilarityMetricsIUS2

        Create a new object of the class tubeComputeImageSimilarityMetricsIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageSimilarityMetricsIUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeImageSimilarityMetricsIUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeImageSimilarityMetricsIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeImageSimilarityMetricsIUS2 in _tubeComputeImageSimilarityMetricsPython:
_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS2_swigregister(tubeComputeImageSimilarityMetricsIUS2)
tubeComputeImageSimilarityMetricsIUS2___New_orig__ = _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS2___New_orig__
tubeComputeImageSimilarityMetricsIUS2_cast = _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS2_cast


def tubeComputeImageSimilarityMetricsIUS3_New():
    return tubeComputeImageSimilarityMetricsIUS3.New()

class tubeComputeImageSimilarityMetricsIUS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeImageSimilarityMetricsIUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS3___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS3_Clone)
    SetUseCorrelation = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS3_SetUseCorrelation)
    GetUseCorrelation = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS3_GetUseCorrelation)
    SetSamplingRate = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS3_SetSamplingRate)
    GetSamplingRate = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS3_GetSamplingRate)
    SetInput1 = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS3_SetInput1)
    GetInput1 = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS3_GetInput1)
    SetInput2 = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS3_SetInput2)
    GetInput2 = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS3_GetInput2)
    GetOutput = _swig_new_instance_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS3_GetOutput)
    __swig_destroy__ = _tubeComputeImageSimilarityMetricsPython.delete_tubeComputeImageSimilarityMetricsIUS3
    cast = _swig_new_static_method(_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS3_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeImageSimilarityMetricsIUS3

        Create a new object of the class tubeComputeImageSimilarityMetricsIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageSimilarityMetricsIUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeImageSimilarityMetricsIUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeImageSimilarityMetricsIUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeImageSimilarityMetricsIUS3 in _tubeComputeImageSimilarityMetricsPython:
_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS3_swigregister(tubeComputeImageSimilarityMetricsIUS3)
tubeComputeImageSimilarityMetricsIUS3___New_orig__ = _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS3___New_orig__
tubeComputeImageSimilarityMetricsIUS3_cast = _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def compute_image_similarity_metrics(*args, **kwargs):
    """Procedural interface for ComputeImageSimilarityMetrics"""
    import itk
    instance = itk.ComputeImageSimilarityMetrics.New(*args, **kwargs)
    return instance.__internal_call__()

def compute_image_similarity_metrics_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ComputeImageSimilarityMetrics, itkTemplate.itkTemplate):
        filter_object = itk.ComputeImageSimilarityMetrics.values()[0]
    else:
        filter_object = itk.ComputeImageSimilarityMetrics

    compute_image_similarity_metrics.__doc__ = filter_object.__doc__
    compute_image_similarity_metrics.__doc__ += "\n Args are Input(s) to the filter.\n"
    compute_image_similarity_metrics.__doc__ += "Available Keyword Arguments:\n"
    compute_image_similarity_metrics.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



