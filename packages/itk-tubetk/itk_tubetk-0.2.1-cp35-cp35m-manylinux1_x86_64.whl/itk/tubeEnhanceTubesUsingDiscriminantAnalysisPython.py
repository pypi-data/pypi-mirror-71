# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _tubeEnhanceTubesUsingDiscriminantAnalysisPython
else:
    import _tubeEnhanceTubesUsingDiscriminantAnalysisPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.vnl_matrixPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkImagePython
import itk.itkCovariantVectorPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.itkRGBPixelPython
import itk.itkPointPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkImageRegionPython
import itk.ITKCommonBasePython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython

def tubeEnhanceTubesUsingDiscriminantAnalysisDD2_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisDD2.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisDD2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisDD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_Clone)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_SetInput)
    AddInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_AddInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_GetInput)
    SetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_SetLabelMap)
    GetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_GetLabelMap)
    SetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_SetRidgeId)
    GetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_GetRidgeId)
    SetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_SetBackgroundId)
    GetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_GetBackgroundId)
    SetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_SetUnknownId)
    GetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_GetUnknownId)
    SetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_SetScales)
    GetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_GetScales)
    SetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_SetInputWhitenMeans)
    GetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_GetInputWhitenMeans)
    SetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_SetInputWhitenStdDevs)
    GetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_GetInputWhitenStdDevs)
    SetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_SetOutputWhitenMeans)
    GetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_GetOutputWhitenMeans)
    SetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_SetOutputWhitenStdDevs)
    GetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_GetOutputWhitenStdDevs)
    GetNumberOfBasis = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_GetNumberOfBasis)
    GetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_GetBasisValue)
    SetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_SetBasisValue)
    GetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_GetBasisVector)
    SetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_SetBasisVector)
    GetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_GetBasisMatrix)
    SetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_SetBasisMatrix)
    GetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_GetBasisValues)
    SetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_SetBasisValues)
    GetClassProbabilityImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_GetClassProbabilityImage)
    GetClassLikelihoodRatioImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_GetClassLikelihoodRatioImage)
    LoadParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_LoadParameterFile)
    SaveParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_SaveParameterFile)
    SetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_SetSeedTolerance)
    GetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_GetSeedTolerance)
    SetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_SetSkeletonize)
    GetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_GetSkeletonize)
    SetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_SetUseIntensityOnly)
    GetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_GetUseIntensityOnly)
    SetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_SetTrainClassifier)
    GetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_GetTrainClassifier)
    ClassifyImages = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_ClassifyImages)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_GetOutput)
    GetOutputSeedScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_GetOutputSeedScales)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisDD2
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisDD2

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisDD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisDD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisDD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisDD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisDD2 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisDD2)
tubeEnhanceTubesUsingDiscriminantAnalysisDD2___New_orig__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2___New_orig__
tubeEnhanceTubesUsingDiscriminantAnalysisDD2_cast = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_cast


def tubeEnhanceTubesUsingDiscriminantAnalysisDD3_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisDD3.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisDD3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisDD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_Clone)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_SetInput)
    AddInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_AddInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_GetInput)
    SetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_SetLabelMap)
    GetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_GetLabelMap)
    SetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_SetRidgeId)
    GetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_GetRidgeId)
    SetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_SetBackgroundId)
    GetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_GetBackgroundId)
    SetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_SetUnknownId)
    GetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_GetUnknownId)
    SetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_SetScales)
    GetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_GetScales)
    SetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_SetInputWhitenMeans)
    GetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_GetInputWhitenMeans)
    SetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_SetInputWhitenStdDevs)
    GetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_GetInputWhitenStdDevs)
    SetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_SetOutputWhitenMeans)
    GetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_GetOutputWhitenMeans)
    SetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_SetOutputWhitenStdDevs)
    GetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_GetOutputWhitenStdDevs)
    GetNumberOfBasis = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_GetNumberOfBasis)
    GetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_GetBasisValue)
    SetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_SetBasisValue)
    GetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_GetBasisVector)
    SetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_SetBasisVector)
    GetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_GetBasisMatrix)
    SetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_SetBasisMatrix)
    GetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_GetBasisValues)
    SetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_SetBasisValues)
    GetClassProbabilityImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_GetClassProbabilityImage)
    GetClassLikelihoodRatioImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_GetClassLikelihoodRatioImage)
    LoadParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_LoadParameterFile)
    SaveParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_SaveParameterFile)
    SetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_SetSeedTolerance)
    GetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_GetSeedTolerance)
    SetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_SetSkeletonize)
    GetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_GetSkeletonize)
    SetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_SetUseIntensityOnly)
    GetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_GetUseIntensityOnly)
    SetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_SetTrainClassifier)
    GetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_GetTrainClassifier)
    ClassifyImages = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_ClassifyImages)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_GetOutput)
    GetOutputSeedScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_GetOutputSeedScales)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisDD3
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisDD3

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisDD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisDD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisDD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisDD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisDD3 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisDD3)
tubeEnhanceTubesUsingDiscriminantAnalysisDD3___New_orig__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3___New_orig__
tubeEnhanceTubesUsingDiscriminantAnalysisDD3_cast = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_cast


def tubeEnhanceTubesUsingDiscriminantAnalysisDF2_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisDF2.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisDF2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisDF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_Clone)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_SetInput)
    AddInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_AddInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_GetInput)
    SetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_SetLabelMap)
    GetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_GetLabelMap)
    SetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_SetRidgeId)
    GetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_GetRidgeId)
    SetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_SetBackgroundId)
    GetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_GetBackgroundId)
    SetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_SetUnknownId)
    GetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_GetUnknownId)
    SetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_SetScales)
    GetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_GetScales)
    SetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_SetInputWhitenMeans)
    GetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_GetInputWhitenMeans)
    SetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_SetInputWhitenStdDevs)
    GetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_GetInputWhitenStdDevs)
    SetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_SetOutputWhitenMeans)
    GetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_GetOutputWhitenMeans)
    SetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_SetOutputWhitenStdDevs)
    GetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_GetOutputWhitenStdDevs)
    GetNumberOfBasis = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_GetNumberOfBasis)
    GetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_GetBasisValue)
    SetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_SetBasisValue)
    GetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_GetBasisVector)
    SetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_SetBasisVector)
    GetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_GetBasisMatrix)
    SetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_SetBasisMatrix)
    GetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_GetBasisValues)
    SetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_SetBasisValues)
    GetClassProbabilityImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_GetClassProbabilityImage)
    GetClassLikelihoodRatioImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_GetClassLikelihoodRatioImage)
    LoadParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_LoadParameterFile)
    SaveParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_SaveParameterFile)
    SetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_SetSeedTolerance)
    GetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_GetSeedTolerance)
    SetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_SetSkeletonize)
    GetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_GetSkeletonize)
    SetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_SetUseIntensityOnly)
    GetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_GetUseIntensityOnly)
    SetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_SetTrainClassifier)
    GetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_GetTrainClassifier)
    ClassifyImages = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_ClassifyImages)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_GetOutput)
    GetOutputSeedScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_GetOutputSeedScales)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisDF2
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisDF2

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisDF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisDF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisDF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisDF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisDF2 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisDF2)
tubeEnhanceTubesUsingDiscriminantAnalysisDF2___New_orig__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2___New_orig__
tubeEnhanceTubesUsingDiscriminantAnalysisDF2_cast = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_cast


def tubeEnhanceTubesUsingDiscriminantAnalysisDF3_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisDF3.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisDF3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisDF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_Clone)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_SetInput)
    AddInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_AddInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_GetInput)
    SetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_SetLabelMap)
    GetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_GetLabelMap)
    SetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_SetRidgeId)
    GetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_GetRidgeId)
    SetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_SetBackgroundId)
    GetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_GetBackgroundId)
    SetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_SetUnknownId)
    GetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_GetUnknownId)
    SetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_SetScales)
    GetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_GetScales)
    SetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_SetInputWhitenMeans)
    GetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_GetInputWhitenMeans)
    SetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_SetInputWhitenStdDevs)
    GetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_GetInputWhitenStdDevs)
    SetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_SetOutputWhitenMeans)
    GetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_GetOutputWhitenMeans)
    SetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_SetOutputWhitenStdDevs)
    GetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_GetOutputWhitenStdDevs)
    GetNumberOfBasis = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_GetNumberOfBasis)
    GetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_GetBasisValue)
    SetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_SetBasisValue)
    GetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_GetBasisVector)
    SetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_SetBasisVector)
    GetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_GetBasisMatrix)
    SetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_SetBasisMatrix)
    GetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_GetBasisValues)
    SetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_SetBasisValues)
    GetClassProbabilityImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_GetClassProbabilityImage)
    GetClassLikelihoodRatioImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_GetClassLikelihoodRatioImage)
    LoadParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_LoadParameterFile)
    SaveParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_SaveParameterFile)
    SetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_SetSeedTolerance)
    GetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_GetSeedTolerance)
    SetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_SetSkeletonize)
    GetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_GetSkeletonize)
    SetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_SetUseIntensityOnly)
    GetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_GetUseIntensityOnly)
    SetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_SetTrainClassifier)
    GetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_GetTrainClassifier)
    ClassifyImages = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_ClassifyImages)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_GetOutput)
    GetOutputSeedScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_GetOutputSeedScales)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisDF3
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisDF3

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisDF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisDF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisDF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisDF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisDF3 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisDF3)
tubeEnhanceTubesUsingDiscriminantAnalysisDF3___New_orig__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3___New_orig__
tubeEnhanceTubesUsingDiscriminantAnalysisDF3_cast = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_cast


def tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisDSS2.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisDSS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisDSS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_Clone)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_SetInput)
    AddInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_AddInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_GetInput)
    SetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_SetLabelMap)
    GetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_GetLabelMap)
    SetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_SetRidgeId)
    GetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_GetRidgeId)
    SetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_SetBackgroundId)
    GetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_GetBackgroundId)
    SetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_SetUnknownId)
    GetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_GetUnknownId)
    SetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_SetScales)
    GetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_GetScales)
    SetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_SetInputWhitenMeans)
    GetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_GetInputWhitenMeans)
    SetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_SetInputWhitenStdDevs)
    GetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_GetInputWhitenStdDevs)
    SetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_SetOutputWhitenMeans)
    GetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_GetOutputWhitenMeans)
    SetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_SetOutputWhitenStdDevs)
    GetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_GetOutputWhitenStdDevs)
    GetNumberOfBasis = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_GetNumberOfBasis)
    GetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_GetBasisValue)
    SetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_SetBasisValue)
    GetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_GetBasisVector)
    SetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_SetBasisVector)
    GetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_GetBasisMatrix)
    SetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_SetBasisMatrix)
    GetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_GetBasisValues)
    SetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_SetBasisValues)
    GetClassProbabilityImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_GetClassProbabilityImage)
    GetClassLikelihoodRatioImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_GetClassLikelihoodRatioImage)
    LoadParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_LoadParameterFile)
    SaveParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_SaveParameterFile)
    SetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_SetSeedTolerance)
    GetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_GetSeedTolerance)
    SetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_SetSkeletonize)
    GetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_GetSkeletonize)
    SetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_SetUseIntensityOnly)
    GetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_GetUseIntensityOnly)
    SetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_SetTrainClassifier)
    GetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_GetTrainClassifier)
    ClassifyImages = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_ClassifyImages)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_GetOutput)
    GetOutputSeedScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_GetOutputSeedScales)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisDSS2
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisDSS2

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisDSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisDSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisDSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisDSS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisDSS2 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisDSS2)
tubeEnhanceTubesUsingDiscriminantAnalysisDSS2___New_orig__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2___New_orig__
tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_cast = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_cast


def tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisDSS3.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisDSS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisDSS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_Clone)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_SetInput)
    AddInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_AddInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_GetInput)
    SetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_SetLabelMap)
    GetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_GetLabelMap)
    SetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_SetRidgeId)
    GetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_GetRidgeId)
    SetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_SetBackgroundId)
    GetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_GetBackgroundId)
    SetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_SetUnknownId)
    GetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_GetUnknownId)
    SetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_SetScales)
    GetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_GetScales)
    SetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_SetInputWhitenMeans)
    GetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_GetInputWhitenMeans)
    SetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_SetInputWhitenStdDevs)
    GetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_GetInputWhitenStdDevs)
    SetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_SetOutputWhitenMeans)
    GetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_GetOutputWhitenMeans)
    SetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_SetOutputWhitenStdDevs)
    GetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_GetOutputWhitenStdDevs)
    GetNumberOfBasis = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_GetNumberOfBasis)
    GetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_GetBasisValue)
    SetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_SetBasisValue)
    GetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_GetBasisVector)
    SetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_SetBasisVector)
    GetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_GetBasisMatrix)
    SetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_SetBasisMatrix)
    GetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_GetBasisValues)
    SetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_SetBasisValues)
    GetClassProbabilityImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_GetClassProbabilityImage)
    GetClassLikelihoodRatioImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_GetClassLikelihoodRatioImage)
    LoadParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_LoadParameterFile)
    SaveParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_SaveParameterFile)
    SetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_SetSeedTolerance)
    GetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_GetSeedTolerance)
    SetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_SetSkeletonize)
    GetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_GetSkeletonize)
    SetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_SetUseIntensityOnly)
    GetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_GetUseIntensityOnly)
    SetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_SetTrainClassifier)
    GetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_GetTrainClassifier)
    ClassifyImages = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_ClassifyImages)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_GetOutput)
    GetOutputSeedScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_GetOutputSeedScales)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisDSS3
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisDSS3

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisDSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisDSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisDSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisDSS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisDSS3 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisDSS3)
tubeEnhanceTubesUsingDiscriminantAnalysisDSS3___New_orig__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3___New_orig__
tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_cast = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_cast


def tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisDUC2.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisDUC2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisDUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_Clone)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_SetInput)
    AddInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_AddInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_GetInput)
    SetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_SetLabelMap)
    GetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_GetLabelMap)
    SetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_SetRidgeId)
    GetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_GetRidgeId)
    SetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_SetBackgroundId)
    GetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_GetBackgroundId)
    SetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_SetUnknownId)
    GetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_GetUnknownId)
    SetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_SetScales)
    GetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_GetScales)
    SetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_SetInputWhitenMeans)
    GetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_GetInputWhitenMeans)
    SetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_SetInputWhitenStdDevs)
    GetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_GetInputWhitenStdDevs)
    SetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_SetOutputWhitenMeans)
    GetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_GetOutputWhitenMeans)
    SetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_SetOutputWhitenStdDevs)
    GetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_GetOutputWhitenStdDevs)
    GetNumberOfBasis = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_GetNumberOfBasis)
    GetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_GetBasisValue)
    SetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_SetBasisValue)
    GetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_GetBasisVector)
    SetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_SetBasisVector)
    GetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_GetBasisMatrix)
    SetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_SetBasisMatrix)
    GetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_GetBasisValues)
    SetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_SetBasisValues)
    GetClassProbabilityImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_GetClassProbabilityImage)
    GetClassLikelihoodRatioImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_GetClassLikelihoodRatioImage)
    LoadParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_LoadParameterFile)
    SaveParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_SaveParameterFile)
    SetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_SetSeedTolerance)
    GetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_GetSeedTolerance)
    SetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_SetSkeletonize)
    GetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_GetSkeletonize)
    SetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_SetUseIntensityOnly)
    GetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_GetUseIntensityOnly)
    SetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_SetTrainClassifier)
    GetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_GetTrainClassifier)
    ClassifyImages = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_ClassifyImages)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_GetOutput)
    GetOutputSeedScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_GetOutputSeedScales)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisDUC2
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisDUC2

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisDUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisDUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisDUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisDUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisDUC2 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisDUC2)
tubeEnhanceTubesUsingDiscriminantAnalysisDUC2___New_orig__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2___New_orig__
tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_cast = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_cast


def tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisDUC3.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisDUC3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisDUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_Clone)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_SetInput)
    AddInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_AddInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_GetInput)
    SetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_SetLabelMap)
    GetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_GetLabelMap)
    SetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_SetRidgeId)
    GetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_GetRidgeId)
    SetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_SetBackgroundId)
    GetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_GetBackgroundId)
    SetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_SetUnknownId)
    GetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_GetUnknownId)
    SetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_SetScales)
    GetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_GetScales)
    SetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_SetInputWhitenMeans)
    GetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_GetInputWhitenMeans)
    SetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_SetInputWhitenStdDevs)
    GetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_GetInputWhitenStdDevs)
    SetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_SetOutputWhitenMeans)
    GetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_GetOutputWhitenMeans)
    SetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_SetOutputWhitenStdDevs)
    GetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_GetOutputWhitenStdDevs)
    GetNumberOfBasis = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_GetNumberOfBasis)
    GetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_GetBasisValue)
    SetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_SetBasisValue)
    GetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_GetBasisVector)
    SetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_SetBasisVector)
    GetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_GetBasisMatrix)
    SetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_SetBasisMatrix)
    GetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_GetBasisValues)
    SetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_SetBasisValues)
    GetClassProbabilityImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_GetClassProbabilityImage)
    GetClassLikelihoodRatioImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_GetClassLikelihoodRatioImage)
    LoadParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_LoadParameterFile)
    SaveParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_SaveParameterFile)
    SetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_SetSeedTolerance)
    GetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_GetSeedTolerance)
    SetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_SetSkeletonize)
    GetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_GetSkeletonize)
    SetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_SetUseIntensityOnly)
    GetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_GetUseIntensityOnly)
    SetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_SetTrainClassifier)
    GetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_GetTrainClassifier)
    ClassifyImages = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_ClassifyImages)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_GetOutput)
    GetOutputSeedScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_GetOutputSeedScales)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisDUC3
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisDUC3

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisDUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisDUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisDUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisDUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisDUC3 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisDUC3)
tubeEnhanceTubesUsingDiscriminantAnalysisDUC3___New_orig__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3___New_orig__
tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_cast = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_cast


def tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisDUS2.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisDUS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisDUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_Clone)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_SetInput)
    AddInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_AddInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_GetInput)
    SetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_SetLabelMap)
    GetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_GetLabelMap)
    SetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_SetRidgeId)
    GetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_GetRidgeId)
    SetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_SetBackgroundId)
    GetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_GetBackgroundId)
    SetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_SetUnknownId)
    GetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_GetUnknownId)
    SetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_SetScales)
    GetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_GetScales)
    SetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_SetInputWhitenMeans)
    GetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_GetInputWhitenMeans)
    SetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_SetInputWhitenStdDevs)
    GetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_GetInputWhitenStdDevs)
    SetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_SetOutputWhitenMeans)
    GetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_GetOutputWhitenMeans)
    SetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_SetOutputWhitenStdDevs)
    GetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_GetOutputWhitenStdDevs)
    GetNumberOfBasis = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_GetNumberOfBasis)
    GetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_GetBasisValue)
    SetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_SetBasisValue)
    GetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_GetBasisVector)
    SetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_SetBasisVector)
    GetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_GetBasisMatrix)
    SetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_SetBasisMatrix)
    GetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_GetBasisValues)
    SetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_SetBasisValues)
    GetClassProbabilityImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_GetClassProbabilityImage)
    GetClassLikelihoodRatioImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_GetClassLikelihoodRatioImage)
    LoadParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_LoadParameterFile)
    SaveParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_SaveParameterFile)
    SetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_SetSeedTolerance)
    GetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_GetSeedTolerance)
    SetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_SetSkeletonize)
    GetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_GetSkeletonize)
    SetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_SetUseIntensityOnly)
    GetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_GetUseIntensityOnly)
    SetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_SetTrainClassifier)
    GetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_GetTrainClassifier)
    ClassifyImages = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_ClassifyImages)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_GetOutput)
    GetOutputSeedScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_GetOutputSeedScales)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisDUS2
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisDUS2

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisDUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisDUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisDUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisDUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisDUS2 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisDUS2)
tubeEnhanceTubesUsingDiscriminantAnalysisDUS2___New_orig__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2___New_orig__
tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_cast = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_cast


def tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisDUS3.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisDUS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisDUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_Clone)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_SetInput)
    AddInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_AddInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_GetInput)
    SetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_SetLabelMap)
    GetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_GetLabelMap)
    SetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_SetRidgeId)
    GetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_GetRidgeId)
    SetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_SetBackgroundId)
    GetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_GetBackgroundId)
    SetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_SetUnknownId)
    GetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_GetUnknownId)
    SetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_SetScales)
    GetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_GetScales)
    SetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_SetInputWhitenMeans)
    GetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_GetInputWhitenMeans)
    SetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_SetInputWhitenStdDevs)
    GetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_GetInputWhitenStdDevs)
    SetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_SetOutputWhitenMeans)
    GetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_GetOutputWhitenMeans)
    SetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_SetOutputWhitenStdDevs)
    GetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_GetOutputWhitenStdDevs)
    GetNumberOfBasis = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_GetNumberOfBasis)
    GetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_GetBasisValue)
    SetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_SetBasisValue)
    GetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_GetBasisVector)
    SetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_SetBasisVector)
    GetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_GetBasisMatrix)
    SetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_SetBasisMatrix)
    GetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_GetBasisValues)
    SetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_SetBasisValues)
    GetClassProbabilityImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_GetClassProbabilityImage)
    GetClassLikelihoodRatioImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_GetClassLikelihoodRatioImage)
    LoadParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_LoadParameterFile)
    SaveParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_SaveParameterFile)
    SetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_SetSeedTolerance)
    GetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_GetSeedTolerance)
    SetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_SetSkeletonize)
    GetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_GetSkeletonize)
    SetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_SetUseIntensityOnly)
    GetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_GetUseIntensityOnly)
    SetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_SetTrainClassifier)
    GetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_GetTrainClassifier)
    ClassifyImages = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_ClassifyImages)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_GetOutput)
    GetOutputSeedScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_GetOutputSeedScales)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisDUS3
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisDUS3

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisDUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisDUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisDUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisDUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisDUS3 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisDUS3)
tubeEnhanceTubesUsingDiscriminantAnalysisDUS3___New_orig__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3___New_orig__
tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_cast = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_cast


def tubeEnhanceTubesUsingDiscriminantAnalysisFD2_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisFD2.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisFD2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisFD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_Clone)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_SetInput)
    AddInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_AddInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_GetInput)
    SetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_SetLabelMap)
    GetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_GetLabelMap)
    SetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_SetRidgeId)
    GetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_GetRidgeId)
    SetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_SetBackgroundId)
    GetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_GetBackgroundId)
    SetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_SetUnknownId)
    GetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_GetUnknownId)
    SetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_SetScales)
    GetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_GetScales)
    SetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_SetInputWhitenMeans)
    GetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_GetInputWhitenMeans)
    SetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_SetInputWhitenStdDevs)
    GetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_GetInputWhitenStdDevs)
    SetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_SetOutputWhitenMeans)
    GetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_GetOutputWhitenMeans)
    SetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_SetOutputWhitenStdDevs)
    GetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_GetOutputWhitenStdDevs)
    GetNumberOfBasis = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_GetNumberOfBasis)
    GetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_GetBasisValue)
    SetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_SetBasisValue)
    GetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_GetBasisVector)
    SetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_SetBasisVector)
    GetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_GetBasisMatrix)
    SetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_SetBasisMatrix)
    GetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_GetBasisValues)
    SetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_SetBasisValues)
    GetClassProbabilityImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_GetClassProbabilityImage)
    GetClassLikelihoodRatioImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_GetClassLikelihoodRatioImage)
    LoadParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_LoadParameterFile)
    SaveParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_SaveParameterFile)
    SetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_SetSeedTolerance)
    GetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_GetSeedTolerance)
    SetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_SetSkeletonize)
    GetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_GetSkeletonize)
    SetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_SetUseIntensityOnly)
    GetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_GetUseIntensityOnly)
    SetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_SetTrainClassifier)
    GetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_GetTrainClassifier)
    ClassifyImages = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_ClassifyImages)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_GetOutput)
    GetOutputSeedScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_GetOutputSeedScales)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisFD2
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisFD2

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisFD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisFD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisFD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisFD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisFD2 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisFD2)
tubeEnhanceTubesUsingDiscriminantAnalysisFD2___New_orig__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2___New_orig__
tubeEnhanceTubesUsingDiscriminantAnalysisFD2_cast = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_cast


def tubeEnhanceTubesUsingDiscriminantAnalysisFD3_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisFD3.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisFD3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisFD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_Clone)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_SetInput)
    AddInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_AddInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_GetInput)
    SetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_SetLabelMap)
    GetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_GetLabelMap)
    SetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_SetRidgeId)
    GetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_GetRidgeId)
    SetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_SetBackgroundId)
    GetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_GetBackgroundId)
    SetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_SetUnknownId)
    GetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_GetUnknownId)
    SetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_SetScales)
    GetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_GetScales)
    SetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_SetInputWhitenMeans)
    GetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_GetInputWhitenMeans)
    SetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_SetInputWhitenStdDevs)
    GetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_GetInputWhitenStdDevs)
    SetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_SetOutputWhitenMeans)
    GetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_GetOutputWhitenMeans)
    SetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_SetOutputWhitenStdDevs)
    GetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_GetOutputWhitenStdDevs)
    GetNumberOfBasis = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_GetNumberOfBasis)
    GetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_GetBasisValue)
    SetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_SetBasisValue)
    GetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_GetBasisVector)
    SetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_SetBasisVector)
    GetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_GetBasisMatrix)
    SetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_SetBasisMatrix)
    GetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_GetBasisValues)
    SetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_SetBasisValues)
    GetClassProbabilityImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_GetClassProbabilityImage)
    GetClassLikelihoodRatioImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_GetClassLikelihoodRatioImage)
    LoadParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_LoadParameterFile)
    SaveParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_SaveParameterFile)
    SetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_SetSeedTolerance)
    GetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_GetSeedTolerance)
    SetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_SetSkeletonize)
    GetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_GetSkeletonize)
    SetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_SetUseIntensityOnly)
    GetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_GetUseIntensityOnly)
    SetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_SetTrainClassifier)
    GetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_GetTrainClassifier)
    ClassifyImages = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_ClassifyImages)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_GetOutput)
    GetOutputSeedScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_GetOutputSeedScales)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisFD3
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisFD3

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisFD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisFD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisFD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisFD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisFD3 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisFD3)
tubeEnhanceTubesUsingDiscriminantAnalysisFD3___New_orig__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3___New_orig__
tubeEnhanceTubesUsingDiscriminantAnalysisFD3_cast = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_cast


def tubeEnhanceTubesUsingDiscriminantAnalysisFF2_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisFF2.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisFF2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisFF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_Clone)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_SetInput)
    AddInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_AddInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_GetInput)
    SetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_SetLabelMap)
    GetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_GetLabelMap)
    SetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_SetRidgeId)
    GetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_GetRidgeId)
    SetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_SetBackgroundId)
    GetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_GetBackgroundId)
    SetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_SetUnknownId)
    GetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_GetUnknownId)
    SetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_SetScales)
    GetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_GetScales)
    SetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_SetInputWhitenMeans)
    GetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_GetInputWhitenMeans)
    SetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_SetInputWhitenStdDevs)
    GetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_GetInputWhitenStdDevs)
    SetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_SetOutputWhitenMeans)
    GetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_GetOutputWhitenMeans)
    SetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_SetOutputWhitenStdDevs)
    GetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_GetOutputWhitenStdDevs)
    GetNumberOfBasis = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_GetNumberOfBasis)
    GetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_GetBasisValue)
    SetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_SetBasisValue)
    GetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_GetBasisVector)
    SetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_SetBasisVector)
    GetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_GetBasisMatrix)
    SetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_SetBasisMatrix)
    GetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_GetBasisValues)
    SetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_SetBasisValues)
    GetClassProbabilityImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_GetClassProbabilityImage)
    GetClassLikelihoodRatioImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_GetClassLikelihoodRatioImage)
    LoadParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_LoadParameterFile)
    SaveParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_SaveParameterFile)
    SetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_SetSeedTolerance)
    GetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_GetSeedTolerance)
    SetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_SetSkeletonize)
    GetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_GetSkeletonize)
    SetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_SetUseIntensityOnly)
    GetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_GetUseIntensityOnly)
    SetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_SetTrainClassifier)
    GetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_GetTrainClassifier)
    ClassifyImages = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_ClassifyImages)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_GetOutput)
    GetOutputSeedScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_GetOutputSeedScales)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisFF2
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisFF2

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisFF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisFF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisFF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisFF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisFF2 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisFF2)
tubeEnhanceTubesUsingDiscriminantAnalysisFF2___New_orig__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2___New_orig__
tubeEnhanceTubesUsingDiscriminantAnalysisFF2_cast = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_cast


def tubeEnhanceTubesUsingDiscriminantAnalysisFF3_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisFF3.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisFF3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisFF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_Clone)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_SetInput)
    AddInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_AddInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_GetInput)
    SetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_SetLabelMap)
    GetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_GetLabelMap)
    SetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_SetRidgeId)
    GetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_GetRidgeId)
    SetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_SetBackgroundId)
    GetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_GetBackgroundId)
    SetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_SetUnknownId)
    GetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_GetUnknownId)
    SetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_SetScales)
    GetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_GetScales)
    SetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_SetInputWhitenMeans)
    GetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_GetInputWhitenMeans)
    SetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_SetInputWhitenStdDevs)
    GetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_GetInputWhitenStdDevs)
    SetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_SetOutputWhitenMeans)
    GetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_GetOutputWhitenMeans)
    SetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_SetOutputWhitenStdDevs)
    GetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_GetOutputWhitenStdDevs)
    GetNumberOfBasis = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_GetNumberOfBasis)
    GetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_GetBasisValue)
    SetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_SetBasisValue)
    GetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_GetBasisVector)
    SetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_SetBasisVector)
    GetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_GetBasisMatrix)
    SetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_SetBasisMatrix)
    GetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_GetBasisValues)
    SetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_SetBasisValues)
    GetClassProbabilityImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_GetClassProbabilityImage)
    GetClassLikelihoodRatioImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_GetClassLikelihoodRatioImage)
    LoadParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_LoadParameterFile)
    SaveParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_SaveParameterFile)
    SetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_SetSeedTolerance)
    GetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_GetSeedTolerance)
    SetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_SetSkeletonize)
    GetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_GetSkeletonize)
    SetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_SetUseIntensityOnly)
    GetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_GetUseIntensityOnly)
    SetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_SetTrainClassifier)
    GetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_GetTrainClassifier)
    ClassifyImages = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_ClassifyImages)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_GetOutput)
    GetOutputSeedScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_GetOutputSeedScales)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisFF3
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisFF3

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisFF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisFF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisFF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisFF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisFF3 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisFF3)
tubeEnhanceTubesUsingDiscriminantAnalysisFF3___New_orig__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3___New_orig__
tubeEnhanceTubesUsingDiscriminantAnalysisFF3_cast = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_cast


def tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisFSS2.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisFSS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisFSS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_Clone)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_SetInput)
    AddInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_AddInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_GetInput)
    SetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_SetLabelMap)
    GetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_GetLabelMap)
    SetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_SetRidgeId)
    GetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_GetRidgeId)
    SetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_SetBackgroundId)
    GetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_GetBackgroundId)
    SetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_SetUnknownId)
    GetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_GetUnknownId)
    SetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_SetScales)
    GetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_GetScales)
    SetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_SetInputWhitenMeans)
    GetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_GetInputWhitenMeans)
    SetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_SetInputWhitenStdDevs)
    GetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_GetInputWhitenStdDevs)
    SetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_SetOutputWhitenMeans)
    GetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_GetOutputWhitenMeans)
    SetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_SetOutputWhitenStdDevs)
    GetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_GetOutputWhitenStdDevs)
    GetNumberOfBasis = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_GetNumberOfBasis)
    GetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_GetBasisValue)
    SetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_SetBasisValue)
    GetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_GetBasisVector)
    SetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_SetBasisVector)
    GetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_GetBasisMatrix)
    SetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_SetBasisMatrix)
    GetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_GetBasisValues)
    SetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_SetBasisValues)
    GetClassProbabilityImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_GetClassProbabilityImage)
    GetClassLikelihoodRatioImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_GetClassLikelihoodRatioImage)
    LoadParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_LoadParameterFile)
    SaveParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_SaveParameterFile)
    SetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_SetSeedTolerance)
    GetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_GetSeedTolerance)
    SetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_SetSkeletonize)
    GetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_GetSkeletonize)
    SetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_SetUseIntensityOnly)
    GetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_GetUseIntensityOnly)
    SetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_SetTrainClassifier)
    GetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_GetTrainClassifier)
    ClassifyImages = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_ClassifyImages)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_GetOutput)
    GetOutputSeedScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_GetOutputSeedScales)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisFSS2
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisFSS2

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisFSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisFSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisFSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisFSS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisFSS2 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisFSS2)
tubeEnhanceTubesUsingDiscriminantAnalysisFSS2___New_orig__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2___New_orig__
tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_cast = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_cast


def tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisFSS3.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisFSS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisFSS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_Clone)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_SetInput)
    AddInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_AddInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_GetInput)
    SetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_SetLabelMap)
    GetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_GetLabelMap)
    SetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_SetRidgeId)
    GetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_GetRidgeId)
    SetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_SetBackgroundId)
    GetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_GetBackgroundId)
    SetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_SetUnknownId)
    GetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_GetUnknownId)
    SetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_SetScales)
    GetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_GetScales)
    SetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_SetInputWhitenMeans)
    GetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_GetInputWhitenMeans)
    SetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_SetInputWhitenStdDevs)
    GetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_GetInputWhitenStdDevs)
    SetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_SetOutputWhitenMeans)
    GetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_GetOutputWhitenMeans)
    SetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_SetOutputWhitenStdDevs)
    GetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_GetOutputWhitenStdDevs)
    GetNumberOfBasis = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_GetNumberOfBasis)
    GetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_GetBasisValue)
    SetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_SetBasisValue)
    GetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_GetBasisVector)
    SetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_SetBasisVector)
    GetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_GetBasisMatrix)
    SetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_SetBasisMatrix)
    GetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_GetBasisValues)
    SetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_SetBasisValues)
    GetClassProbabilityImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_GetClassProbabilityImage)
    GetClassLikelihoodRatioImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_GetClassLikelihoodRatioImage)
    LoadParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_LoadParameterFile)
    SaveParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_SaveParameterFile)
    SetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_SetSeedTolerance)
    GetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_GetSeedTolerance)
    SetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_SetSkeletonize)
    GetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_GetSkeletonize)
    SetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_SetUseIntensityOnly)
    GetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_GetUseIntensityOnly)
    SetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_SetTrainClassifier)
    GetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_GetTrainClassifier)
    ClassifyImages = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_ClassifyImages)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_GetOutput)
    GetOutputSeedScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_GetOutputSeedScales)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisFSS3
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisFSS3

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisFSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisFSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisFSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisFSS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisFSS3 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisFSS3)
tubeEnhanceTubesUsingDiscriminantAnalysisFSS3___New_orig__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3___New_orig__
tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_cast = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_cast


def tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisFUC2.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisFUC2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisFUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_Clone)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_SetInput)
    AddInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_AddInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_GetInput)
    SetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_SetLabelMap)
    GetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_GetLabelMap)
    SetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_SetRidgeId)
    GetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_GetRidgeId)
    SetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_SetBackgroundId)
    GetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_GetBackgroundId)
    SetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_SetUnknownId)
    GetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_GetUnknownId)
    SetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_SetScales)
    GetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_GetScales)
    SetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_SetInputWhitenMeans)
    GetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_GetInputWhitenMeans)
    SetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_SetInputWhitenStdDevs)
    GetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_GetInputWhitenStdDevs)
    SetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_SetOutputWhitenMeans)
    GetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_GetOutputWhitenMeans)
    SetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_SetOutputWhitenStdDevs)
    GetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_GetOutputWhitenStdDevs)
    GetNumberOfBasis = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_GetNumberOfBasis)
    GetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_GetBasisValue)
    SetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_SetBasisValue)
    GetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_GetBasisVector)
    SetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_SetBasisVector)
    GetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_GetBasisMatrix)
    SetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_SetBasisMatrix)
    GetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_GetBasisValues)
    SetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_SetBasisValues)
    GetClassProbabilityImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_GetClassProbabilityImage)
    GetClassLikelihoodRatioImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_GetClassLikelihoodRatioImage)
    LoadParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_LoadParameterFile)
    SaveParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_SaveParameterFile)
    SetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_SetSeedTolerance)
    GetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_GetSeedTolerance)
    SetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_SetSkeletonize)
    GetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_GetSkeletonize)
    SetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_SetUseIntensityOnly)
    GetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_GetUseIntensityOnly)
    SetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_SetTrainClassifier)
    GetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_GetTrainClassifier)
    ClassifyImages = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_ClassifyImages)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_GetOutput)
    GetOutputSeedScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_GetOutputSeedScales)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisFUC2
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisFUC2

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisFUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisFUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisFUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisFUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisFUC2 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisFUC2)
tubeEnhanceTubesUsingDiscriminantAnalysisFUC2___New_orig__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2___New_orig__
tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_cast = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_cast


def tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisFUC3.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisFUC3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisFUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_Clone)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_SetInput)
    AddInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_AddInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_GetInput)
    SetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_SetLabelMap)
    GetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_GetLabelMap)
    SetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_SetRidgeId)
    GetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_GetRidgeId)
    SetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_SetBackgroundId)
    GetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_GetBackgroundId)
    SetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_SetUnknownId)
    GetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_GetUnknownId)
    SetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_SetScales)
    GetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_GetScales)
    SetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_SetInputWhitenMeans)
    GetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_GetInputWhitenMeans)
    SetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_SetInputWhitenStdDevs)
    GetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_GetInputWhitenStdDevs)
    SetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_SetOutputWhitenMeans)
    GetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_GetOutputWhitenMeans)
    SetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_SetOutputWhitenStdDevs)
    GetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_GetOutputWhitenStdDevs)
    GetNumberOfBasis = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_GetNumberOfBasis)
    GetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_GetBasisValue)
    SetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_SetBasisValue)
    GetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_GetBasisVector)
    SetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_SetBasisVector)
    GetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_GetBasisMatrix)
    SetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_SetBasisMatrix)
    GetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_GetBasisValues)
    SetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_SetBasisValues)
    GetClassProbabilityImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_GetClassProbabilityImage)
    GetClassLikelihoodRatioImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_GetClassLikelihoodRatioImage)
    LoadParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_LoadParameterFile)
    SaveParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_SaveParameterFile)
    SetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_SetSeedTolerance)
    GetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_GetSeedTolerance)
    SetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_SetSkeletonize)
    GetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_GetSkeletonize)
    SetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_SetUseIntensityOnly)
    GetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_GetUseIntensityOnly)
    SetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_SetTrainClassifier)
    GetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_GetTrainClassifier)
    ClassifyImages = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_ClassifyImages)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_GetOutput)
    GetOutputSeedScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_GetOutputSeedScales)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisFUC3
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisFUC3

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisFUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisFUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisFUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisFUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisFUC3 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisFUC3)
tubeEnhanceTubesUsingDiscriminantAnalysisFUC3___New_orig__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3___New_orig__
tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_cast = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_cast


def tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisFUS2.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisFUS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisFUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_Clone)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_SetInput)
    AddInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_AddInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_GetInput)
    SetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_SetLabelMap)
    GetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_GetLabelMap)
    SetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_SetRidgeId)
    GetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_GetRidgeId)
    SetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_SetBackgroundId)
    GetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_GetBackgroundId)
    SetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_SetUnknownId)
    GetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_GetUnknownId)
    SetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_SetScales)
    GetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_GetScales)
    SetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_SetInputWhitenMeans)
    GetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_GetInputWhitenMeans)
    SetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_SetInputWhitenStdDevs)
    GetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_GetInputWhitenStdDevs)
    SetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_SetOutputWhitenMeans)
    GetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_GetOutputWhitenMeans)
    SetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_SetOutputWhitenStdDevs)
    GetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_GetOutputWhitenStdDevs)
    GetNumberOfBasis = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_GetNumberOfBasis)
    GetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_GetBasisValue)
    SetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_SetBasisValue)
    GetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_GetBasisVector)
    SetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_SetBasisVector)
    GetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_GetBasisMatrix)
    SetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_SetBasisMatrix)
    GetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_GetBasisValues)
    SetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_SetBasisValues)
    GetClassProbabilityImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_GetClassProbabilityImage)
    GetClassLikelihoodRatioImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_GetClassLikelihoodRatioImage)
    LoadParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_LoadParameterFile)
    SaveParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_SaveParameterFile)
    SetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_SetSeedTolerance)
    GetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_GetSeedTolerance)
    SetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_SetSkeletonize)
    GetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_GetSkeletonize)
    SetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_SetUseIntensityOnly)
    GetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_GetUseIntensityOnly)
    SetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_SetTrainClassifier)
    GetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_GetTrainClassifier)
    ClassifyImages = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_ClassifyImages)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_GetOutput)
    GetOutputSeedScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_GetOutputSeedScales)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisFUS2
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisFUS2

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisFUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisFUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisFUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisFUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisFUS2 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisFUS2)
tubeEnhanceTubesUsingDiscriminantAnalysisFUS2___New_orig__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2___New_orig__
tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_cast = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_cast


def tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisFUS3.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisFUS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisFUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_Clone)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_SetInput)
    AddInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_AddInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_GetInput)
    SetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_SetLabelMap)
    GetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_GetLabelMap)
    SetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_SetRidgeId)
    GetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_GetRidgeId)
    SetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_SetBackgroundId)
    GetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_GetBackgroundId)
    SetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_SetUnknownId)
    GetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_GetUnknownId)
    SetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_SetScales)
    GetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_GetScales)
    SetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_SetInputWhitenMeans)
    GetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_GetInputWhitenMeans)
    SetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_SetInputWhitenStdDevs)
    GetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_GetInputWhitenStdDevs)
    SetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_SetOutputWhitenMeans)
    GetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_GetOutputWhitenMeans)
    SetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_SetOutputWhitenStdDevs)
    GetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_GetOutputWhitenStdDevs)
    GetNumberOfBasis = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_GetNumberOfBasis)
    GetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_GetBasisValue)
    SetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_SetBasisValue)
    GetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_GetBasisVector)
    SetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_SetBasisVector)
    GetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_GetBasisMatrix)
    SetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_SetBasisMatrix)
    GetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_GetBasisValues)
    SetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_SetBasisValues)
    GetClassProbabilityImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_GetClassProbabilityImage)
    GetClassLikelihoodRatioImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_GetClassLikelihoodRatioImage)
    LoadParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_LoadParameterFile)
    SaveParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_SaveParameterFile)
    SetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_SetSeedTolerance)
    GetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_GetSeedTolerance)
    SetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_SetSkeletonize)
    GetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_GetSkeletonize)
    SetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_SetUseIntensityOnly)
    GetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_GetUseIntensityOnly)
    SetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_SetTrainClassifier)
    GetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_GetTrainClassifier)
    ClassifyImages = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_ClassifyImages)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_GetOutput)
    GetOutputSeedScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_GetOutputSeedScales)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisFUS3
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisFUS3

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisFUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisFUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisFUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisFUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisFUS3 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisFUS3)
tubeEnhanceTubesUsingDiscriminantAnalysisFUS3___New_orig__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3___New_orig__
tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_cast = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_cast


def tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisSSD2.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisSSD2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisSSD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_Clone)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_SetInput)
    AddInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_AddInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_GetInput)
    SetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_SetLabelMap)
    GetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_GetLabelMap)
    SetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_SetRidgeId)
    GetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_GetRidgeId)
    SetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_SetBackgroundId)
    GetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_GetBackgroundId)
    SetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_SetUnknownId)
    GetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_GetUnknownId)
    SetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_SetScales)
    GetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_GetScales)
    SetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_SetInputWhitenMeans)
    GetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_GetInputWhitenMeans)
    SetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_SetInputWhitenStdDevs)
    GetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_GetInputWhitenStdDevs)
    SetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_SetOutputWhitenMeans)
    GetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_GetOutputWhitenMeans)
    SetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_SetOutputWhitenStdDevs)
    GetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_GetOutputWhitenStdDevs)
    GetNumberOfBasis = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_GetNumberOfBasis)
    GetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_GetBasisValue)
    SetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_SetBasisValue)
    GetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_GetBasisVector)
    SetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_SetBasisVector)
    GetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_GetBasisMatrix)
    SetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_SetBasisMatrix)
    GetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_GetBasisValues)
    SetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_SetBasisValues)
    GetClassProbabilityImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_GetClassProbabilityImage)
    GetClassLikelihoodRatioImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_GetClassLikelihoodRatioImage)
    LoadParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_LoadParameterFile)
    SaveParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_SaveParameterFile)
    SetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_SetSeedTolerance)
    GetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_GetSeedTolerance)
    SetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_SetSkeletonize)
    GetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_GetSkeletonize)
    SetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_SetUseIntensityOnly)
    GetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_GetUseIntensityOnly)
    SetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_SetTrainClassifier)
    GetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_GetTrainClassifier)
    ClassifyImages = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_ClassifyImages)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_GetOutput)
    GetOutputSeedScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_GetOutputSeedScales)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisSSD2
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisSSD2

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisSSD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisSSD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisSSD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisSSD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisSSD2 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisSSD2)
tubeEnhanceTubesUsingDiscriminantAnalysisSSD2___New_orig__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2___New_orig__
tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_cast = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_cast


def tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisSSD3.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisSSD3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisSSD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_Clone)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_SetInput)
    AddInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_AddInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_GetInput)
    SetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_SetLabelMap)
    GetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_GetLabelMap)
    SetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_SetRidgeId)
    GetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_GetRidgeId)
    SetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_SetBackgroundId)
    GetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_GetBackgroundId)
    SetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_SetUnknownId)
    GetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_GetUnknownId)
    SetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_SetScales)
    GetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_GetScales)
    SetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_SetInputWhitenMeans)
    GetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_GetInputWhitenMeans)
    SetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_SetInputWhitenStdDevs)
    GetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_GetInputWhitenStdDevs)
    SetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_SetOutputWhitenMeans)
    GetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_GetOutputWhitenMeans)
    SetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_SetOutputWhitenStdDevs)
    GetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_GetOutputWhitenStdDevs)
    GetNumberOfBasis = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_GetNumberOfBasis)
    GetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_GetBasisValue)
    SetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_SetBasisValue)
    GetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_GetBasisVector)
    SetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_SetBasisVector)
    GetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_GetBasisMatrix)
    SetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_SetBasisMatrix)
    GetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_GetBasisValues)
    SetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_SetBasisValues)
    GetClassProbabilityImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_GetClassProbabilityImage)
    GetClassLikelihoodRatioImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_GetClassLikelihoodRatioImage)
    LoadParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_LoadParameterFile)
    SaveParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_SaveParameterFile)
    SetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_SetSeedTolerance)
    GetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_GetSeedTolerance)
    SetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_SetSkeletonize)
    GetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_GetSkeletonize)
    SetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_SetUseIntensityOnly)
    GetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_GetUseIntensityOnly)
    SetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_SetTrainClassifier)
    GetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_GetTrainClassifier)
    ClassifyImages = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_ClassifyImages)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_GetOutput)
    GetOutputSeedScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_GetOutputSeedScales)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisSSD3
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisSSD3

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisSSD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisSSD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisSSD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisSSD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisSSD3 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisSSD3)
tubeEnhanceTubesUsingDiscriminantAnalysisSSD3___New_orig__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3___New_orig__
tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_cast = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_cast


def tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisSSF2.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisSSF2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisSSF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_Clone)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_SetInput)
    AddInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_AddInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_GetInput)
    SetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_SetLabelMap)
    GetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_GetLabelMap)
    SetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_SetRidgeId)
    GetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_GetRidgeId)
    SetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_SetBackgroundId)
    GetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_GetBackgroundId)
    SetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_SetUnknownId)
    GetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_GetUnknownId)
    SetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_SetScales)
    GetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_GetScales)
    SetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_SetInputWhitenMeans)
    GetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_GetInputWhitenMeans)
    SetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_SetInputWhitenStdDevs)
    GetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_GetInputWhitenStdDevs)
    SetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_SetOutputWhitenMeans)
    GetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_GetOutputWhitenMeans)
    SetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_SetOutputWhitenStdDevs)
    GetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_GetOutputWhitenStdDevs)
    GetNumberOfBasis = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_GetNumberOfBasis)
    GetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_GetBasisValue)
    SetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_SetBasisValue)
    GetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_GetBasisVector)
    SetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_SetBasisVector)
    GetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_GetBasisMatrix)
    SetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_SetBasisMatrix)
    GetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_GetBasisValues)
    SetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_SetBasisValues)
    GetClassProbabilityImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_GetClassProbabilityImage)
    GetClassLikelihoodRatioImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_GetClassLikelihoodRatioImage)
    LoadParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_LoadParameterFile)
    SaveParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_SaveParameterFile)
    SetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_SetSeedTolerance)
    GetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_GetSeedTolerance)
    SetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_SetSkeletonize)
    GetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_GetSkeletonize)
    SetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_SetUseIntensityOnly)
    GetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_GetUseIntensityOnly)
    SetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_SetTrainClassifier)
    GetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_GetTrainClassifier)
    ClassifyImages = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_ClassifyImages)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_GetOutput)
    GetOutputSeedScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_GetOutputSeedScales)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisSSF2
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisSSF2

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisSSF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisSSF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisSSF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisSSF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisSSF2 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisSSF2)
tubeEnhanceTubesUsingDiscriminantAnalysisSSF2___New_orig__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2___New_orig__
tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_cast = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_cast


def tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisSSF3.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisSSF3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisSSF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_Clone)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_SetInput)
    AddInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_AddInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_GetInput)
    SetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_SetLabelMap)
    GetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_GetLabelMap)
    SetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_SetRidgeId)
    GetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_GetRidgeId)
    SetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_SetBackgroundId)
    GetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_GetBackgroundId)
    SetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_SetUnknownId)
    GetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_GetUnknownId)
    SetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_SetScales)
    GetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_GetScales)
    SetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_SetInputWhitenMeans)
    GetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_GetInputWhitenMeans)
    SetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_SetInputWhitenStdDevs)
    GetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_GetInputWhitenStdDevs)
    SetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_SetOutputWhitenMeans)
    GetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_GetOutputWhitenMeans)
    SetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_SetOutputWhitenStdDevs)
    GetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_GetOutputWhitenStdDevs)
    GetNumberOfBasis = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_GetNumberOfBasis)
    GetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_GetBasisValue)
    SetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_SetBasisValue)
    GetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_GetBasisVector)
    SetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_SetBasisVector)
    GetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_GetBasisMatrix)
    SetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_SetBasisMatrix)
    GetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_GetBasisValues)
    SetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_SetBasisValues)
    GetClassProbabilityImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_GetClassProbabilityImage)
    GetClassLikelihoodRatioImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_GetClassLikelihoodRatioImage)
    LoadParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_LoadParameterFile)
    SaveParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_SaveParameterFile)
    SetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_SetSeedTolerance)
    GetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_GetSeedTolerance)
    SetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_SetSkeletonize)
    GetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_GetSkeletonize)
    SetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_SetUseIntensityOnly)
    GetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_GetUseIntensityOnly)
    SetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_SetTrainClassifier)
    GetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_GetTrainClassifier)
    ClassifyImages = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_ClassifyImages)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_GetOutput)
    GetOutputSeedScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_GetOutputSeedScales)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisSSF3
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisSSF3

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisSSF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisSSF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisSSF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisSSF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisSSF3 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisSSF3)
tubeEnhanceTubesUsingDiscriminantAnalysisSSF3___New_orig__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3___New_orig__
tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_cast = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_cast


def tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_Clone)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_SetInput)
    AddInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_AddInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_GetInput)
    SetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_SetLabelMap)
    GetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_GetLabelMap)
    SetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_SetRidgeId)
    GetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_GetRidgeId)
    SetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_SetBackgroundId)
    GetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_GetBackgroundId)
    SetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_SetUnknownId)
    GetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_GetUnknownId)
    SetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_SetScales)
    GetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_GetScales)
    SetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_SetInputWhitenMeans)
    GetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_GetInputWhitenMeans)
    SetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_SetInputWhitenStdDevs)
    GetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_GetInputWhitenStdDevs)
    SetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_SetOutputWhitenMeans)
    GetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_GetOutputWhitenMeans)
    SetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_SetOutputWhitenStdDevs)
    GetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_GetOutputWhitenStdDevs)
    GetNumberOfBasis = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_GetNumberOfBasis)
    GetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_GetBasisValue)
    SetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_SetBasisValue)
    GetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_GetBasisVector)
    SetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_SetBasisVector)
    GetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_GetBasisMatrix)
    SetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_SetBasisMatrix)
    GetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_GetBasisValues)
    SetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_SetBasisValues)
    GetClassProbabilityImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_GetClassProbabilityImage)
    GetClassLikelihoodRatioImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_GetClassLikelihoodRatioImage)
    LoadParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_LoadParameterFile)
    SaveParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_SaveParameterFile)
    SetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_SetSeedTolerance)
    GetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_GetSeedTolerance)
    SetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_SetSkeletonize)
    GetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_GetSkeletonize)
    SetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_SetUseIntensityOnly)
    GetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_GetUseIntensityOnly)
    SetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_SetTrainClassifier)
    GetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_GetTrainClassifier)
    ClassifyImages = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_ClassifyImages)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_GetOutput)
    GetOutputSeedScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_GetOutputSeedScales)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2)
tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2___New_orig__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2___New_orig__
tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_cast = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_cast


def tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_Clone)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_SetInput)
    AddInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_AddInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_GetInput)
    SetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_SetLabelMap)
    GetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_GetLabelMap)
    SetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_SetRidgeId)
    GetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_GetRidgeId)
    SetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_SetBackgroundId)
    GetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_GetBackgroundId)
    SetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_SetUnknownId)
    GetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_GetUnknownId)
    SetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_SetScales)
    GetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_GetScales)
    SetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_SetInputWhitenMeans)
    GetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_GetInputWhitenMeans)
    SetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_SetInputWhitenStdDevs)
    GetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_GetInputWhitenStdDevs)
    SetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_SetOutputWhitenMeans)
    GetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_GetOutputWhitenMeans)
    SetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_SetOutputWhitenStdDevs)
    GetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_GetOutputWhitenStdDevs)
    GetNumberOfBasis = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_GetNumberOfBasis)
    GetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_GetBasisValue)
    SetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_SetBasisValue)
    GetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_GetBasisVector)
    SetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_SetBasisVector)
    GetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_GetBasisMatrix)
    SetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_SetBasisMatrix)
    GetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_GetBasisValues)
    SetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_SetBasisValues)
    GetClassProbabilityImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_GetClassProbabilityImage)
    GetClassLikelihoodRatioImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_GetClassLikelihoodRatioImage)
    LoadParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_LoadParameterFile)
    SaveParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_SaveParameterFile)
    SetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_SetSeedTolerance)
    GetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_GetSeedTolerance)
    SetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_SetSkeletonize)
    GetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_GetSkeletonize)
    SetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_SetUseIntensityOnly)
    GetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_GetUseIntensityOnly)
    SetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_SetTrainClassifier)
    GetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_GetTrainClassifier)
    ClassifyImages = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_ClassifyImages)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_GetOutput)
    GetOutputSeedScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_GetOutputSeedScales)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3)
tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3___New_orig__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3___New_orig__
tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_cast = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_cast


def tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_Clone)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_SetInput)
    AddInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_AddInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_GetInput)
    SetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_SetLabelMap)
    GetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_GetLabelMap)
    SetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_SetRidgeId)
    GetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_GetRidgeId)
    SetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_SetBackgroundId)
    GetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_GetBackgroundId)
    SetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_SetUnknownId)
    GetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_GetUnknownId)
    SetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_SetScales)
    GetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_GetScales)
    SetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_SetInputWhitenMeans)
    GetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_GetInputWhitenMeans)
    SetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_SetInputWhitenStdDevs)
    GetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_GetInputWhitenStdDevs)
    SetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_SetOutputWhitenMeans)
    GetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_GetOutputWhitenMeans)
    SetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_SetOutputWhitenStdDevs)
    GetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_GetOutputWhitenStdDevs)
    GetNumberOfBasis = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_GetNumberOfBasis)
    GetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_GetBasisValue)
    SetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_SetBasisValue)
    GetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_GetBasisVector)
    SetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_SetBasisVector)
    GetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_GetBasisMatrix)
    SetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_SetBasisMatrix)
    GetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_GetBasisValues)
    SetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_SetBasisValues)
    GetClassProbabilityImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_GetClassProbabilityImage)
    GetClassLikelihoodRatioImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_GetClassLikelihoodRatioImage)
    LoadParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_LoadParameterFile)
    SaveParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_SaveParameterFile)
    SetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_SetSeedTolerance)
    GetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_GetSeedTolerance)
    SetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_SetSkeletonize)
    GetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_GetSkeletonize)
    SetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_SetUseIntensityOnly)
    GetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_GetUseIntensityOnly)
    SetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_SetTrainClassifier)
    GetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_GetTrainClassifier)
    ClassifyImages = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_ClassifyImages)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_GetOutput)
    GetOutputSeedScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_GetOutputSeedScales)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2)
tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2___New_orig__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2___New_orig__
tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_cast = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_cast


def tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_Clone)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_SetInput)
    AddInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_AddInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_GetInput)
    SetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_SetLabelMap)
    GetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_GetLabelMap)
    SetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_SetRidgeId)
    GetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_GetRidgeId)
    SetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_SetBackgroundId)
    GetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_GetBackgroundId)
    SetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_SetUnknownId)
    GetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_GetUnknownId)
    SetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_SetScales)
    GetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_GetScales)
    SetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_SetInputWhitenMeans)
    GetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_GetInputWhitenMeans)
    SetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_SetInputWhitenStdDevs)
    GetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_GetInputWhitenStdDevs)
    SetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_SetOutputWhitenMeans)
    GetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_GetOutputWhitenMeans)
    SetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_SetOutputWhitenStdDevs)
    GetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_GetOutputWhitenStdDevs)
    GetNumberOfBasis = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_GetNumberOfBasis)
    GetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_GetBasisValue)
    SetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_SetBasisValue)
    GetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_GetBasisVector)
    SetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_SetBasisVector)
    GetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_GetBasisMatrix)
    SetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_SetBasisMatrix)
    GetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_GetBasisValues)
    SetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_SetBasisValues)
    GetClassProbabilityImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_GetClassProbabilityImage)
    GetClassLikelihoodRatioImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_GetClassLikelihoodRatioImage)
    LoadParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_LoadParameterFile)
    SaveParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_SaveParameterFile)
    SetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_SetSeedTolerance)
    GetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_GetSeedTolerance)
    SetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_SetSkeletonize)
    GetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_GetSkeletonize)
    SetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_SetUseIntensityOnly)
    GetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_GetUseIntensityOnly)
    SetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_SetTrainClassifier)
    GetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_GetTrainClassifier)
    ClassifyImages = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_ClassifyImages)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_GetOutput)
    GetOutputSeedScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_GetOutputSeedScales)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3)
tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3___New_orig__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3___New_orig__
tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_cast = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_cast


def tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_Clone)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_SetInput)
    AddInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_AddInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_GetInput)
    SetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_SetLabelMap)
    GetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_GetLabelMap)
    SetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_SetRidgeId)
    GetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_GetRidgeId)
    SetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_SetBackgroundId)
    GetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_GetBackgroundId)
    SetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_SetUnknownId)
    GetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_GetUnknownId)
    SetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_SetScales)
    GetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_GetScales)
    SetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_SetInputWhitenMeans)
    GetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_GetInputWhitenMeans)
    SetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_SetInputWhitenStdDevs)
    GetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_GetInputWhitenStdDevs)
    SetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_SetOutputWhitenMeans)
    GetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_GetOutputWhitenMeans)
    SetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_SetOutputWhitenStdDevs)
    GetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_GetOutputWhitenStdDevs)
    GetNumberOfBasis = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_GetNumberOfBasis)
    GetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_GetBasisValue)
    SetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_SetBasisValue)
    GetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_GetBasisVector)
    SetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_SetBasisVector)
    GetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_GetBasisMatrix)
    SetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_SetBasisMatrix)
    GetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_GetBasisValues)
    SetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_SetBasisValues)
    GetClassProbabilityImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_GetClassProbabilityImage)
    GetClassLikelihoodRatioImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_GetClassLikelihoodRatioImage)
    LoadParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_LoadParameterFile)
    SaveParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_SaveParameterFile)
    SetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_SetSeedTolerance)
    GetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_GetSeedTolerance)
    SetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_SetSkeletonize)
    GetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_GetSkeletonize)
    SetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_SetUseIntensityOnly)
    GetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_GetUseIntensityOnly)
    SetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_SetTrainClassifier)
    GetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_GetTrainClassifier)
    ClassifyImages = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_ClassifyImages)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_GetOutput)
    GetOutputSeedScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_GetOutputSeedScales)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2)
tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2___New_orig__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2___New_orig__
tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_cast = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_cast


def tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_Clone)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_SetInput)
    AddInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_AddInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_GetInput)
    SetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_SetLabelMap)
    GetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_GetLabelMap)
    SetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_SetRidgeId)
    GetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_GetRidgeId)
    SetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_SetBackgroundId)
    GetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_GetBackgroundId)
    SetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_SetUnknownId)
    GetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_GetUnknownId)
    SetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_SetScales)
    GetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_GetScales)
    SetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_SetInputWhitenMeans)
    GetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_GetInputWhitenMeans)
    SetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_SetInputWhitenStdDevs)
    GetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_GetInputWhitenStdDevs)
    SetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_SetOutputWhitenMeans)
    GetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_GetOutputWhitenMeans)
    SetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_SetOutputWhitenStdDevs)
    GetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_GetOutputWhitenStdDevs)
    GetNumberOfBasis = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_GetNumberOfBasis)
    GetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_GetBasisValue)
    SetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_SetBasisValue)
    GetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_GetBasisVector)
    SetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_SetBasisVector)
    GetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_GetBasisMatrix)
    SetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_SetBasisMatrix)
    GetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_GetBasisValues)
    SetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_SetBasisValues)
    GetClassProbabilityImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_GetClassProbabilityImage)
    GetClassLikelihoodRatioImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_GetClassLikelihoodRatioImage)
    LoadParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_LoadParameterFile)
    SaveParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_SaveParameterFile)
    SetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_SetSeedTolerance)
    GetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_GetSeedTolerance)
    SetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_SetSkeletonize)
    GetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_GetSkeletonize)
    SetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_SetUseIntensityOnly)
    GetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_GetUseIntensityOnly)
    SetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_SetTrainClassifier)
    GetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_GetTrainClassifier)
    ClassifyImages = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_ClassifyImages)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_GetOutput)
    GetOutputSeedScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_GetOutputSeedScales)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3)
tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3___New_orig__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3___New_orig__
tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_cast = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_cast


def tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisUCD2.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisUCD2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisUCD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_Clone)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_SetInput)
    AddInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_AddInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_GetInput)
    SetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_SetLabelMap)
    GetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_GetLabelMap)
    SetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_SetRidgeId)
    GetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_GetRidgeId)
    SetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_SetBackgroundId)
    GetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_GetBackgroundId)
    SetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_SetUnknownId)
    GetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_GetUnknownId)
    SetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_SetScales)
    GetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_GetScales)
    SetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_SetInputWhitenMeans)
    GetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_GetInputWhitenMeans)
    SetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_SetInputWhitenStdDevs)
    GetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_GetInputWhitenStdDevs)
    SetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_SetOutputWhitenMeans)
    GetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_GetOutputWhitenMeans)
    SetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_SetOutputWhitenStdDevs)
    GetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_GetOutputWhitenStdDevs)
    GetNumberOfBasis = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_GetNumberOfBasis)
    GetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_GetBasisValue)
    SetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_SetBasisValue)
    GetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_GetBasisVector)
    SetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_SetBasisVector)
    GetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_GetBasisMatrix)
    SetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_SetBasisMatrix)
    GetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_GetBasisValues)
    SetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_SetBasisValues)
    GetClassProbabilityImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_GetClassProbabilityImage)
    GetClassLikelihoodRatioImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_GetClassLikelihoodRatioImage)
    LoadParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_LoadParameterFile)
    SaveParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_SaveParameterFile)
    SetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_SetSeedTolerance)
    GetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_GetSeedTolerance)
    SetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_SetSkeletonize)
    GetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_GetSkeletonize)
    SetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_SetUseIntensityOnly)
    GetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_GetUseIntensityOnly)
    SetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_SetTrainClassifier)
    GetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_GetTrainClassifier)
    ClassifyImages = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_ClassifyImages)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_GetOutput)
    GetOutputSeedScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_GetOutputSeedScales)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisUCD2
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisUCD2

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisUCD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisUCD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisUCD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisUCD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisUCD2 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisUCD2)
tubeEnhanceTubesUsingDiscriminantAnalysisUCD2___New_orig__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2___New_orig__
tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_cast = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_cast


def tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisUCD3.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisUCD3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisUCD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_Clone)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_SetInput)
    AddInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_AddInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_GetInput)
    SetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_SetLabelMap)
    GetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_GetLabelMap)
    SetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_SetRidgeId)
    GetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_GetRidgeId)
    SetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_SetBackgroundId)
    GetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_GetBackgroundId)
    SetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_SetUnknownId)
    GetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_GetUnknownId)
    SetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_SetScales)
    GetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_GetScales)
    SetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_SetInputWhitenMeans)
    GetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_GetInputWhitenMeans)
    SetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_SetInputWhitenStdDevs)
    GetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_GetInputWhitenStdDevs)
    SetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_SetOutputWhitenMeans)
    GetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_GetOutputWhitenMeans)
    SetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_SetOutputWhitenStdDevs)
    GetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_GetOutputWhitenStdDevs)
    GetNumberOfBasis = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_GetNumberOfBasis)
    GetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_GetBasisValue)
    SetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_SetBasisValue)
    GetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_GetBasisVector)
    SetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_SetBasisVector)
    GetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_GetBasisMatrix)
    SetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_SetBasisMatrix)
    GetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_GetBasisValues)
    SetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_SetBasisValues)
    GetClassProbabilityImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_GetClassProbabilityImage)
    GetClassLikelihoodRatioImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_GetClassLikelihoodRatioImage)
    LoadParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_LoadParameterFile)
    SaveParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_SaveParameterFile)
    SetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_SetSeedTolerance)
    GetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_GetSeedTolerance)
    SetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_SetSkeletonize)
    GetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_GetSkeletonize)
    SetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_SetUseIntensityOnly)
    GetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_GetUseIntensityOnly)
    SetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_SetTrainClassifier)
    GetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_GetTrainClassifier)
    ClassifyImages = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_ClassifyImages)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_GetOutput)
    GetOutputSeedScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_GetOutputSeedScales)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisUCD3
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisUCD3

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisUCD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisUCD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisUCD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisUCD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisUCD3 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisUCD3)
tubeEnhanceTubesUsingDiscriminantAnalysisUCD3___New_orig__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3___New_orig__
tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_cast = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_cast


def tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisUCF2.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisUCF2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisUCF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_Clone)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_SetInput)
    AddInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_AddInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_GetInput)
    SetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_SetLabelMap)
    GetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_GetLabelMap)
    SetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_SetRidgeId)
    GetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_GetRidgeId)
    SetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_SetBackgroundId)
    GetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_GetBackgroundId)
    SetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_SetUnknownId)
    GetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_GetUnknownId)
    SetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_SetScales)
    GetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_GetScales)
    SetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_SetInputWhitenMeans)
    GetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_GetInputWhitenMeans)
    SetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_SetInputWhitenStdDevs)
    GetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_GetInputWhitenStdDevs)
    SetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_SetOutputWhitenMeans)
    GetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_GetOutputWhitenMeans)
    SetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_SetOutputWhitenStdDevs)
    GetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_GetOutputWhitenStdDevs)
    GetNumberOfBasis = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_GetNumberOfBasis)
    GetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_GetBasisValue)
    SetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_SetBasisValue)
    GetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_GetBasisVector)
    SetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_SetBasisVector)
    GetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_GetBasisMatrix)
    SetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_SetBasisMatrix)
    GetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_GetBasisValues)
    SetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_SetBasisValues)
    GetClassProbabilityImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_GetClassProbabilityImage)
    GetClassLikelihoodRatioImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_GetClassLikelihoodRatioImage)
    LoadParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_LoadParameterFile)
    SaveParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_SaveParameterFile)
    SetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_SetSeedTolerance)
    GetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_GetSeedTolerance)
    SetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_SetSkeletonize)
    GetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_GetSkeletonize)
    SetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_SetUseIntensityOnly)
    GetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_GetUseIntensityOnly)
    SetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_SetTrainClassifier)
    GetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_GetTrainClassifier)
    ClassifyImages = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_ClassifyImages)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_GetOutput)
    GetOutputSeedScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_GetOutputSeedScales)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisUCF2
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisUCF2

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisUCF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisUCF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisUCF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisUCF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisUCF2 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisUCF2)
tubeEnhanceTubesUsingDiscriminantAnalysisUCF2___New_orig__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2___New_orig__
tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_cast = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_cast


def tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisUCF3.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisUCF3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisUCF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_Clone)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_SetInput)
    AddInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_AddInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_GetInput)
    SetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_SetLabelMap)
    GetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_GetLabelMap)
    SetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_SetRidgeId)
    GetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_GetRidgeId)
    SetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_SetBackgroundId)
    GetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_GetBackgroundId)
    SetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_SetUnknownId)
    GetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_GetUnknownId)
    SetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_SetScales)
    GetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_GetScales)
    SetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_SetInputWhitenMeans)
    GetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_GetInputWhitenMeans)
    SetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_SetInputWhitenStdDevs)
    GetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_GetInputWhitenStdDevs)
    SetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_SetOutputWhitenMeans)
    GetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_GetOutputWhitenMeans)
    SetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_SetOutputWhitenStdDevs)
    GetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_GetOutputWhitenStdDevs)
    GetNumberOfBasis = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_GetNumberOfBasis)
    GetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_GetBasisValue)
    SetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_SetBasisValue)
    GetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_GetBasisVector)
    SetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_SetBasisVector)
    GetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_GetBasisMatrix)
    SetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_SetBasisMatrix)
    GetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_GetBasisValues)
    SetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_SetBasisValues)
    GetClassProbabilityImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_GetClassProbabilityImage)
    GetClassLikelihoodRatioImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_GetClassLikelihoodRatioImage)
    LoadParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_LoadParameterFile)
    SaveParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_SaveParameterFile)
    SetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_SetSeedTolerance)
    GetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_GetSeedTolerance)
    SetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_SetSkeletonize)
    GetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_GetSkeletonize)
    SetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_SetUseIntensityOnly)
    GetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_GetUseIntensityOnly)
    SetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_SetTrainClassifier)
    GetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_GetTrainClassifier)
    ClassifyImages = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_ClassifyImages)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_GetOutput)
    GetOutputSeedScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_GetOutputSeedScales)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisUCF3
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisUCF3

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisUCF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisUCF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisUCF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisUCF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisUCF3 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisUCF3)
tubeEnhanceTubesUsingDiscriminantAnalysisUCF3___New_orig__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3___New_orig__
tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_cast = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_cast


def tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_Clone)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_SetInput)
    AddInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_AddInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_GetInput)
    SetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_SetLabelMap)
    GetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_GetLabelMap)
    SetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_SetRidgeId)
    GetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_GetRidgeId)
    SetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_SetBackgroundId)
    GetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_GetBackgroundId)
    SetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_SetUnknownId)
    GetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_GetUnknownId)
    SetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_SetScales)
    GetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_GetScales)
    SetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_SetInputWhitenMeans)
    GetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_GetInputWhitenMeans)
    SetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_SetInputWhitenStdDevs)
    GetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_GetInputWhitenStdDevs)
    SetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_SetOutputWhitenMeans)
    GetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_GetOutputWhitenMeans)
    SetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_SetOutputWhitenStdDevs)
    GetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_GetOutputWhitenStdDevs)
    GetNumberOfBasis = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_GetNumberOfBasis)
    GetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_GetBasisValue)
    SetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_SetBasisValue)
    GetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_GetBasisVector)
    SetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_SetBasisVector)
    GetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_GetBasisMatrix)
    SetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_SetBasisMatrix)
    GetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_GetBasisValues)
    SetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_SetBasisValues)
    GetClassProbabilityImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_GetClassProbabilityImage)
    GetClassLikelihoodRatioImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_GetClassLikelihoodRatioImage)
    LoadParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_LoadParameterFile)
    SaveParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_SaveParameterFile)
    SetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_SetSeedTolerance)
    GetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_GetSeedTolerance)
    SetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_SetSkeletonize)
    GetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_GetSkeletonize)
    SetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_SetUseIntensityOnly)
    GetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_GetUseIntensityOnly)
    SetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_SetTrainClassifier)
    GetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_GetTrainClassifier)
    ClassifyImages = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_ClassifyImages)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_GetOutput)
    GetOutputSeedScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_GetOutputSeedScales)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2)
tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2___New_orig__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2___New_orig__
tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_cast = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_cast


def tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_Clone)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_SetInput)
    AddInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_AddInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_GetInput)
    SetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_SetLabelMap)
    GetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_GetLabelMap)
    SetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_SetRidgeId)
    GetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_GetRidgeId)
    SetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_SetBackgroundId)
    GetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_GetBackgroundId)
    SetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_SetUnknownId)
    GetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_GetUnknownId)
    SetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_SetScales)
    GetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_GetScales)
    SetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_SetInputWhitenMeans)
    GetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_GetInputWhitenMeans)
    SetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_SetInputWhitenStdDevs)
    GetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_GetInputWhitenStdDevs)
    SetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_SetOutputWhitenMeans)
    GetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_GetOutputWhitenMeans)
    SetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_SetOutputWhitenStdDevs)
    GetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_GetOutputWhitenStdDevs)
    GetNumberOfBasis = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_GetNumberOfBasis)
    GetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_GetBasisValue)
    SetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_SetBasisValue)
    GetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_GetBasisVector)
    SetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_SetBasisVector)
    GetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_GetBasisMatrix)
    SetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_SetBasisMatrix)
    GetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_GetBasisValues)
    SetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_SetBasisValues)
    GetClassProbabilityImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_GetClassProbabilityImage)
    GetClassLikelihoodRatioImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_GetClassLikelihoodRatioImage)
    LoadParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_LoadParameterFile)
    SaveParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_SaveParameterFile)
    SetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_SetSeedTolerance)
    GetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_GetSeedTolerance)
    SetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_SetSkeletonize)
    GetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_GetSkeletonize)
    SetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_SetUseIntensityOnly)
    GetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_GetUseIntensityOnly)
    SetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_SetTrainClassifier)
    GetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_GetTrainClassifier)
    ClassifyImages = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_ClassifyImages)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_GetOutput)
    GetOutputSeedScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_GetOutputSeedScales)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3)
tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3___New_orig__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3___New_orig__
tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_cast = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_cast


def tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_Clone)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_SetInput)
    AddInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_AddInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_GetInput)
    SetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_SetLabelMap)
    GetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_GetLabelMap)
    SetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_SetRidgeId)
    GetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_GetRidgeId)
    SetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_SetBackgroundId)
    GetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_GetBackgroundId)
    SetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_SetUnknownId)
    GetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_GetUnknownId)
    SetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_SetScales)
    GetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_GetScales)
    SetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_SetInputWhitenMeans)
    GetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_GetInputWhitenMeans)
    SetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_SetInputWhitenStdDevs)
    GetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_GetInputWhitenStdDevs)
    SetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_SetOutputWhitenMeans)
    GetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_GetOutputWhitenMeans)
    SetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_SetOutputWhitenStdDevs)
    GetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_GetOutputWhitenStdDevs)
    GetNumberOfBasis = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_GetNumberOfBasis)
    GetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_GetBasisValue)
    SetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_SetBasisValue)
    GetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_GetBasisVector)
    SetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_SetBasisVector)
    GetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_GetBasisMatrix)
    SetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_SetBasisMatrix)
    GetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_GetBasisValues)
    SetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_SetBasisValues)
    GetClassProbabilityImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_GetClassProbabilityImage)
    GetClassLikelihoodRatioImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_GetClassLikelihoodRatioImage)
    LoadParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_LoadParameterFile)
    SaveParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_SaveParameterFile)
    SetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_SetSeedTolerance)
    GetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_GetSeedTolerance)
    SetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_SetSkeletonize)
    GetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_GetSkeletonize)
    SetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_SetUseIntensityOnly)
    GetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_GetUseIntensityOnly)
    SetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_SetTrainClassifier)
    GetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_GetTrainClassifier)
    ClassifyImages = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_ClassifyImages)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_GetOutput)
    GetOutputSeedScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_GetOutputSeedScales)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2)
tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2___New_orig__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2___New_orig__
tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_cast = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_cast


def tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_Clone)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_SetInput)
    AddInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_AddInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_GetInput)
    SetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_SetLabelMap)
    GetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_GetLabelMap)
    SetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_SetRidgeId)
    GetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_GetRidgeId)
    SetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_SetBackgroundId)
    GetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_GetBackgroundId)
    SetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_SetUnknownId)
    GetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_GetUnknownId)
    SetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_SetScales)
    GetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_GetScales)
    SetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_SetInputWhitenMeans)
    GetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_GetInputWhitenMeans)
    SetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_SetInputWhitenStdDevs)
    GetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_GetInputWhitenStdDevs)
    SetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_SetOutputWhitenMeans)
    GetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_GetOutputWhitenMeans)
    SetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_SetOutputWhitenStdDevs)
    GetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_GetOutputWhitenStdDevs)
    GetNumberOfBasis = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_GetNumberOfBasis)
    GetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_GetBasisValue)
    SetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_SetBasisValue)
    GetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_GetBasisVector)
    SetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_SetBasisVector)
    GetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_GetBasisMatrix)
    SetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_SetBasisMatrix)
    GetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_GetBasisValues)
    SetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_SetBasisValues)
    GetClassProbabilityImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_GetClassProbabilityImage)
    GetClassLikelihoodRatioImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_GetClassLikelihoodRatioImage)
    LoadParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_LoadParameterFile)
    SaveParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_SaveParameterFile)
    SetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_SetSeedTolerance)
    GetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_GetSeedTolerance)
    SetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_SetSkeletonize)
    GetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_GetSkeletonize)
    SetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_SetUseIntensityOnly)
    GetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_GetUseIntensityOnly)
    SetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_SetTrainClassifier)
    GetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_GetTrainClassifier)
    ClassifyImages = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_ClassifyImages)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_GetOutput)
    GetOutputSeedScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_GetOutputSeedScales)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3)
tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3___New_orig__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3___New_orig__
tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_cast = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_cast


def tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_Clone)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_SetInput)
    AddInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_AddInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_GetInput)
    SetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_SetLabelMap)
    GetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_GetLabelMap)
    SetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_SetRidgeId)
    GetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_GetRidgeId)
    SetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_SetBackgroundId)
    GetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_GetBackgroundId)
    SetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_SetUnknownId)
    GetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_GetUnknownId)
    SetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_SetScales)
    GetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_GetScales)
    SetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_SetInputWhitenMeans)
    GetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_GetInputWhitenMeans)
    SetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_SetInputWhitenStdDevs)
    GetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_GetInputWhitenStdDevs)
    SetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_SetOutputWhitenMeans)
    GetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_GetOutputWhitenMeans)
    SetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_SetOutputWhitenStdDevs)
    GetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_GetOutputWhitenStdDevs)
    GetNumberOfBasis = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_GetNumberOfBasis)
    GetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_GetBasisValue)
    SetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_SetBasisValue)
    GetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_GetBasisVector)
    SetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_SetBasisVector)
    GetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_GetBasisMatrix)
    SetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_SetBasisMatrix)
    GetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_GetBasisValues)
    SetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_SetBasisValues)
    GetClassProbabilityImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_GetClassProbabilityImage)
    GetClassLikelihoodRatioImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_GetClassLikelihoodRatioImage)
    LoadParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_LoadParameterFile)
    SaveParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_SaveParameterFile)
    SetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_SetSeedTolerance)
    GetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_GetSeedTolerance)
    SetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_SetSkeletonize)
    GetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_GetSkeletonize)
    SetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_SetUseIntensityOnly)
    GetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_GetUseIntensityOnly)
    SetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_SetTrainClassifier)
    GetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_GetTrainClassifier)
    ClassifyImages = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_ClassifyImages)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_GetOutput)
    GetOutputSeedScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_GetOutputSeedScales)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2)
tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2___New_orig__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2___New_orig__
tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_cast = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_cast


def tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_Clone)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_SetInput)
    AddInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_AddInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_GetInput)
    SetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_SetLabelMap)
    GetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_GetLabelMap)
    SetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_SetRidgeId)
    GetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_GetRidgeId)
    SetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_SetBackgroundId)
    GetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_GetBackgroundId)
    SetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_SetUnknownId)
    GetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_GetUnknownId)
    SetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_SetScales)
    GetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_GetScales)
    SetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_SetInputWhitenMeans)
    GetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_GetInputWhitenMeans)
    SetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_SetInputWhitenStdDevs)
    GetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_GetInputWhitenStdDevs)
    SetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_SetOutputWhitenMeans)
    GetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_GetOutputWhitenMeans)
    SetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_SetOutputWhitenStdDevs)
    GetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_GetOutputWhitenStdDevs)
    GetNumberOfBasis = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_GetNumberOfBasis)
    GetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_GetBasisValue)
    SetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_SetBasisValue)
    GetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_GetBasisVector)
    SetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_SetBasisVector)
    GetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_GetBasisMatrix)
    SetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_SetBasisMatrix)
    GetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_GetBasisValues)
    SetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_SetBasisValues)
    GetClassProbabilityImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_GetClassProbabilityImage)
    GetClassLikelihoodRatioImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_GetClassLikelihoodRatioImage)
    LoadParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_LoadParameterFile)
    SaveParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_SaveParameterFile)
    SetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_SetSeedTolerance)
    GetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_GetSeedTolerance)
    SetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_SetSkeletonize)
    GetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_GetSkeletonize)
    SetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_SetUseIntensityOnly)
    GetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_GetUseIntensityOnly)
    SetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_SetTrainClassifier)
    GetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_GetTrainClassifier)
    ClassifyImages = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_ClassifyImages)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_GetOutput)
    GetOutputSeedScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_GetOutputSeedScales)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3)
tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3___New_orig__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3___New_orig__
tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_cast = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_cast


def tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisUSD2.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisUSD2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisUSD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_Clone)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_SetInput)
    AddInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_AddInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_GetInput)
    SetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_SetLabelMap)
    GetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_GetLabelMap)
    SetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_SetRidgeId)
    GetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_GetRidgeId)
    SetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_SetBackgroundId)
    GetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_GetBackgroundId)
    SetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_SetUnknownId)
    GetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_GetUnknownId)
    SetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_SetScales)
    GetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_GetScales)
    SetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_SetInputWhitenMeans)
    GetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_GetInputWhitenMeans)
    SetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_SetInputWhitenStdDevs)
    GetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_GetInputWhitenStdDevs)
    SetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_SetOutputWhitenMeans)
    GetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_GetOutputWhitenMeans)
    SetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_SetOutputWhitenStdDevs)
    GetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_GetOutputWhitenStdDevs)
    GetNumberOfBasis = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_GetNumberOfBasis)
    GetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_GetBasisValue)
    SetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_SetBasisValue)
    GetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_GetBasisVector)
    SetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_SetBasisVector)
    GetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_GetBasisMatrix)
    SetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_SetBasisMatrix)
    GetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_GetBasisValues)
    SetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_SetBasisValues)
    GetClassProbabilityImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_GetClassProbabilityImage)
    GetClassLikelihoodRatioImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_GetClassLikelihoodRatioImage)
    LoadParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_LoadParameterFile)
    SaveParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_SaveParameterFile)
    SetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_SetSeedTolerance)
    GetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_GetSeedTolerance)
    SetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_SetSkeletonize)
    GetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_GetSkeletonize)
    SetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_SetUseIntensityOnly)
    GetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_GetUseIntensityOnly)
    SetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_SetTrainClassifier)
    GetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_GetTrainClassifier)
    ClassifyImages = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_ClassifyImages)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_GetOutput)
    GetOutputSeedScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_GetOutputSeedScales)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisUSD2
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisUSD2

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisUSD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisUSD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisUSD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisUSD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisUSD2 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisUSD2)
tubeEnhanceTubesUsingDiscriminantAnalysisUSD2___New_orig__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2___New_orig__
tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_cast = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_cast


def tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisUSD3.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisUSD3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisUSD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_Clone)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_SetInput)
    AddInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_AddInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_GetInput)
    SetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_SetLabelMap)
    GetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_GetLabelMap)
    SetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_SetRidgeId)
    GetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_GetRidgeId)
    SetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_SetBackgroundId)
    GetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_GetBackgroundId)
    SetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_SetUnknownId)
    GetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_GetUnknownId)
    SetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_SetScales)
    GetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_GetScales)
    SetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_SetInputWhitenMeans)
    GetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_GetInputWhitenMeans)
    SetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_SetInputWhitenStdDevs)
    GetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_GetInputWhitenStdDevs)
    SetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_SetOutputWhitenMeans)
    GetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_GetOutputWhitenMeans)
    SetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_SetOutputWhitenStdDevs)
    GetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_GetOutputWhitenStdDevs)
    GetNumberOfBasis = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_GetNumberOfBasis)
    GetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_GetBasisValue)
    SetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_SetBasisValue)
    GetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_GetBasisVector)
    SetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_SetBasisVector)
    GetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_GetBasisMatrix)
    SetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_SetBasisMatrix)
    GetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_GetBasisValues)
    SetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_SetBasisValues)
    GetClassProbabilityImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_GetClassProbabilityImage)
    GetClassLikelihoodRatioImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_GetClassLikelihoodRatioImage)
    LoadParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_LoadParameterFile)
    SaveParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_SaveParameterFile)
    SetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_SetSeedTolerance)
    GetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_GetSeedTolerance)
    SetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_SetSkeletonize)
    GetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_GetSkeletonize)
    SetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_SetUseIntensityOnly)
    GetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_GetUseIntensityOnly)
    SetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_SetTrainClassifier)
    GetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_GetTrainClassifier)
    ClassifyImages = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_ClassifyImages)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_GetOutput)
    GetOutputSeedScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_GetOutputSeedScales)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisUSD3
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisUSD3

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisUSD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisUSD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisUSD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisUSD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisUSD3 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisUSD3)
tubeEnhanceTubesUsingDiscriminantAnalysisUSD3___New_orig__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3___New_orig__
tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_cast = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_cast


def tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisUSF2.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisUSF2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisUSF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_Clone)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_SetInput)
    AddInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_AddInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_GetInput)
    SetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_SetLabelMap)
    GetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_GetLabelMap)
    SetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_SetRidgeId)
    GetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_GetRidgeId)
    SetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_SetBackgroundId)
    GetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_GetBackgroundId)
    SetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_SetUnknownId)
    GetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_GetUnknownId)
    SetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_SetScales)
    GetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_GetScales)
    SetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_SetInputWhitenMeans)
    GetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_GetInputWhitenMeans)
    SetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_SetInputWhitenStdDevs)
    GetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_GetInputWhitenStdDevs)
    SetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_SetOutputWhitenMeans)
    GetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_GetOutputWhitenMeans)
    SetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_SetOutputWhitenStdDevs)
    GetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_GetOutputWhitenStdDevs)
    GetNumberOfBasis = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_GetNumberOfBasis)
    GetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_GetBasisValue)
    SetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_SetBasisValue)
    GetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_GetBasisVector)
    SetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_SetBasisVector)
    GetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_GetBasisMatrix)
    SetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_SetBasisMatrix)
    GetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_GetBasisValues)
    SetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_SetBasisValues)
    GetClassProbabilityImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_GetClassProbabilityImage)
    GetClassLikelihoodRatioImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_GetClassLikelihoodRatioImage)
    LoadParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_LoadParameterFile)
    SaveParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_SaveParameterFile)
    SetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_SetSeedTolerance)
    GetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_GetSeedTolerance)
    SetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_SetSkeletonize)
    GetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_GetSkeletonize)
    SetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_SetUseIntensityOnly)
    GetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_GetUseIntensityOnly)
    SetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_SetTrainClassifier)
    GetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_GetTrainClassifier)
    ClassifyImages = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_ClassifyImages)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_GetOutput)
    GetOutputSeedScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_GetOutputSeedScales)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisUSF2
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisUSF2

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisUSF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisUSF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisUSF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisUSF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisUSF2 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisUSF2)
tubeEnhanceTubesUsingDiscriminantAnalysisUSF2___New_orig__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2___New_orig__
tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_cast = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_cast


def tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisUSF3.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisUSF3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisUSF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_Clone)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_SetInput)
    AddInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_AddInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_GetInput)
    SetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_SetLabelMap)
    GetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_GetLabelMap)
    SetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_SetRidgeId)
    GetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_GetRidgeId)
    SetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_SetBackgroundId)
    GetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_GetBackgroundId)
    SetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_SetUnknownId)
    GetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_GetUnknownId)
    SetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_SetScales)
    GetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_GetScales)
    SetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_SetInputWhitenMeans)
    GetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_GetInputWhitenMeans)
    SetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_SetInputWhitenStdDevs)
    GetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_GetInputWhitenStdDevs)
    SetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_SetOutputWhitenMeans)
    GetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_GetOutputWhitenMeans)
    SetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_SetOutputWhitenStdDevs)
    GetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_GetOutputWhitenStdDevs)
    GetNumberOfBasis = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_GetNumberOfBasis)
    GetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_GetBasisValue)
    SetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_SetBasisValue)
    GetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_GetBasisVector)
    SetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_SetBasisVector)
    GetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_GetBasisMatrix)
    SetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_SetBasisMatrix)
    GetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_GetBasisValues)
    SetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_SetBasisValues)
    GetClassProbabilityImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_GetClassProbabilityImage)
    GetClassLikelihoodRatioImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_GetClassLikelihoodRatioImage)
    LoadParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_LoadParameterFile)
    SaveParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_SaveParameterFile)
    SetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_SetSeedTolerance)
    GetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_GetSeedTolerance)
    SetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_SetSkeletonize)
    GetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_GetSkeletonize)
    SetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_SetUseIntensityOnly)
    GetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_GetUseIntensityOnly)
    SetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_SetTrainClassifier)
    GetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_GetTrainClassifier)
    ClassifyImages = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_ClassifyImages)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_GetOutput)
    GetOutputSeedScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_GetOutputSeedScales)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisUSF3
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisUSF3

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisUSF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisUSF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisUSF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisUSF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisUSF3 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisUSF3)
tubeEnhanceTubesUsingDiscriminantAnalysisUSF3___New_orig__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3___New_orig__
tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_cast = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_cast


def tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_Clone)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_SetInput)
    AddInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_AddInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_GetInput)
    SetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_SetLabelMap)
    GetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_GetLabelMap)
    SetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_SetRidgeId)
    GetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_GetRidgeId)
    SetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_SetBackgroundId)
    GetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_GetBackgroundId)
    SetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_SetUnknownId)
    GetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_GetUnknownId)
    SetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_SetScales)
    GetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_GetScales)
    SetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_SetInputWhitenMeans)
    GetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_GetInputWhitenMeans)
    SetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_SetInputWhitenStdDevs)
    GetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_GetInputWhitenStdDevs)
    SetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_SetOutputWhitenMeans)
    GetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_GetOutputWhitenMeans)
    SetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_SetOutputWhitenStdDevs)
    GetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_GetOutputWhitenStdDevs)
    GetNumberOfBasis = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_GetNumberOfBasis)
    GetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_GetBasisValue)
    SetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_SetBasisValue)
    GetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_GetBasisVector)
    SetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_SetBasisVector)
    GetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_GetBasisMatrix)
    SetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_SetBasisMatrix)
    GetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_GetBasisValues)
    SetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_SetBasisValues)
    GetClassProbabilityImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_GetClassProbabilityImage)
    GetClassLikelihoodRatioImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_GetClassLikelihoodRatioImage)
    LoadParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_LoadParameterFile)
    SaveParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_SaveParameterFile)
    SetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_SetSeedTolerance)
    GetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_GetSeedTolerance)
    SetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_SetSkeletonize)
    GetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_GetSkeletonize)
    SetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_SetUseIntensityOnly)
    GetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_GetUseIntensityOnly)
    SetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_SetTrainClassifier)
    GetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_GetTrainClassifier)
    ClassifyImages = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_ClassifyImages)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_GetOutput)
    GetOutputSeedScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_GetOutputSeedScales)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2)
tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2___New_orig__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2___New_orig__
tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_cast = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_cast


def tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_Clone)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_SetInput)
    AddInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_AddInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_GetInput)
    SetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_SetLabelMap)
    GetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_GetLabelMap)
    SetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_SetRidgeId)
    GetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_GetRidgeId)
    SetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_SetBackgroundId)
    GetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_GetBackgroundId)
    SetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_SetUnknownId)
    GetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_GetUnknownId)
    SetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_SetScales)
    GetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_GetScales)
    SetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_SetInputWhitenMeans)
    GetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_GetInputWhitenMeans)
    SetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_SetInputWhitenStdDevs)
    GetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_GetInputWhitenStdDevs)
    SetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_SetOutputWhitenMeans)
    GetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_GetOutputWhitenMeans)
    SetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_SetOutputWhitenStdDevs)
    GetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_GetOutputWhitenStdDevs)
    GetNumberOfBasis = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_GetNumberOfBasis)
    GetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_GetBasisValue)
    SetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_SetBasisValue)
    GetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_GetBasisVector)
    SetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_SetBasisVector)
    GetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_GetBasisMatrix)
    SetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_SetBasisMatrix)
    GetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_GetBasisValues)
    SetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_SetBasisValues)
    GetClassProbabilityImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_GetClassProbabilityImage)
    GetClassLikelihoodRatioImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_GetClassLikelihoodRatioImage)
    LoadParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_LoadParameterFile)
    SaveParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_SaveParameterFile)
    SetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_SetSeedTolerance)
    GetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_GetSeedTolerance)
    SetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_SetSkeletonize)
    GetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_GetSkeletonize)
    SetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_SetUseIntensityOnly)
    GetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_GetUseIntensityOnly)
    SetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_SetTrainClassifier)
    GetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_GetTrainClassifier)
    ClassifyImages = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_ClassifyImages)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_GetOutput)
    GetOutputSeedScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_GetOutputSeedScales)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3)
tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3___New_orig__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3___New_orig__
tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_cast = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_cast


def tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_Clone)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_SetInput)
    AddInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_AddInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_GetInput)
    SetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_SetLabelMap)
    GetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_GetLabelMap)
    SetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_SetRidgeId)
    GetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_GetRidgeId)
    SetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_SetBackgroundId)
    GetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_GetBackgroundId)
    SetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_SetUnknownId)
    GetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_GetUnknownId)
    SetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_SetScales)
    GetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_GetScales)
    SetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_SetInputWhitenMeans)
    GetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_GetInputWhitenMeans)
    SetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_SetInputWhitenStdDevs)
    GetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_GetInputWhitenStdDevs)
    SetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_SetOutputWhitenMeans)
    GetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_GetOutputWhitenMeans)
    SetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_SetOutputWhitenStdDevs)
    GetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_GetOutputWhitenStdDevs)
    GetNumberOfBasis = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_GetNumberOfBasis)
    GetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_GetBasisValue)
    SetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_SetBasisValue)
    GetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_GetBasisVector)
    SetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_SetBasisVector)
    GetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_GetBasisMatrix)
    SetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_SetBasisMatrix)
    GetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_GetBasisValues)
    SetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_SetBasisValues)
    GetClassProbabilityImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_GetClassProbabilityImage)
    GetClassLikelihoodRatioImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_GetClassLikelihoodRatioImage)
    LoadParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_LoadParameterFile)
    SaveParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_SaveParameterFile)
    SetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_SetSeedTolerance)
    GetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_GetSeedTolerance)
    SetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_SetSkeletonize)
    GetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_GetSkeletonize)
    SetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_SetUseIntensityOnly)
    GetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_GetUseIntensityOnly)
    SetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_SetTrainClassifier)
    GetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_GetTrainClassifier)
    ClassifyImages = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_ClassifyImages)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_GetOutput)
    GetOutputSeedScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_GetOutputSeedScales)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2)
tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2___New_orig__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2___New_orig__
tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_cast = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_cast


def tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_Clone)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_SetInput)
    AddInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_AddInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_GetInput)
    SetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_SetLabelMap)
    GetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_GetLabelMap)
    SetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_SetRidgeId)
    GetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_GetRidgeId)
    SetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_SetBackgroundId)
    GetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_GetBackgroundId)
    SetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_SetUnknownId)
    GetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_GetUnknownId)
    SetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_SetScales)
    GetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_GetScales)
    SetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_SetInputWhitenMeans)
    GetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_GetInputWhitenMeans)
    SetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_SetInputWhitenStdDevs)
    GetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_GetInputWhitenStdDevs)
    SetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_SetOutputWhitenMeans)
    GetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_GetOutputWhitenMeans)
    SetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_SetOutputWhitenStdDevs)
    GetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_GetOutputWhitenStdDevs)
    GetNumberOfBasis = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_GetNumberOfBasis)
    GetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_GetBasisValue)
    SetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_SetBasisValue)
    GetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_GetBasisVector)
    SetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_SetBasisVector)
    GetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_GetBasisMatrix)
    SetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_SetBasisMatrix)
    GetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_GetBasisValues)
    SetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_SetBasisValues)
    GetClassProbabilityImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_GetClassProbabilityImage)
    GetClassLikelihoodRatioImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_GetClassLikelihoodRatioImage)
    LoadParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_LoadParameterFile)
    SaveParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_SaveParameterFile)
    SetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_SetSeedTolerance)
    GetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_GetSeedTolerance)
    SetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_SetSkeletonize)
    GetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_GetSkeletonize)
    SetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_SetUseIntensityOnly)
    GetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_GetUseIntensityOnly)
    SetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_SetTrainClassifier)
    GetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_GetTrainClassifier)
    ClassifyImages = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_ClassifyImages)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_GetOutput)
    GetOutputSeedScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_GetOutputSeedScales)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3)
tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3___New_orig__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3___New_orig__
tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_cast = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_cast


def tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_Clone)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_SetInput)
    AddInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_AddInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_GetInput)
    SetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_SetLabelMap)
    GetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_GetLabelMap)
    SetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_SetRidgeId)
    GetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_GetRidgeId)
    SetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_SetBackgroundId)
    GetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_GetBackgroundId)
    SetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_SetUnknownId)
    GetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_GetUnknownId)
    SetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_SetScales)
    GetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_GetScales)
    SetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_SetInputWhitenMeans)
    GetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_GetInputWhitenMeans)
    SetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_SetInputWhitenStdDevs)
    GetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_GetInputWhitenStdDevs)
    SetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_SetOutputWhitenMeans)
    GetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_GetOutputWhitenMeans)
    SetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_SetOutputWhitenStdDevs)
    GetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_GetOutputWhitenStdDevs)
    GetNumberOfBasis = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_GetNumberOfBasis)
    GetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_GetBasisValue)
    SetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_SetBasisValue)
    GetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_GetBasisVector)
    SetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_SetBasisVector)
    GetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_GetBasisMatrix)
    SetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_SetBasisMatrix)
    GetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_GetBasisValues)
    SetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_SetBasisValues)
    GetClassProbabilityImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_GetClassProbabilityImage)
    GetClassLikelihoodRatioImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_GetClassLikelihoodRatioImage)
    LoadParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_LoadParameterFile)
    SaveParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_SaveParameterFile)
    SetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_SetSeedTolerance)
    GetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_GetSeedTolerance)
    SetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_SetSkeletonize)
    GetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_GetSkeletonize)
    SetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_SetUseIntensityOnly)
    GetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_GetUseIntensityOnly)
    SetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_SetTrainClassifier)
    GetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_GetTrainClassifier)
    ClassifyImages = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_ClassifyImages)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_GetOutput)
    GetOutputSeedScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_GetOutputSeedScales)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2)
tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2___New_orig__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2___New_orig__
tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_cast = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_cast


def tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_Clone)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_SetInput)
    AddInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_AddInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_GetInput)
    SetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_SetLabelMap)
    GetLabelMap = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_GetLabelMap)
    SetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_SetRidgeId)
    GetRidgeId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_GetRidgeId)
    SetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_SetBackgroundId)
    GetBackgroundId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_GetBackgroundId)
    SetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_SetUnknownId)
    GetUnknownId = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_GetUnknownId)
    SetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_SetScales)
    GetScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_GetScales)
    SetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_SetInputWhitenMeans)
    GetInputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_GetInputWhitenMeans)
    SetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_SetInputWhitenStdDevs)
    GetInputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_GetInputWhitenStdDevs)
    SetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_SetOutputWhitenMeans)
    GetOutputWhitenMeans = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_GetOutputWhitenMeans)
    SetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_SetOutputWhitenStdDevs)
    GetOutputWhitenStdDevs = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_GetOutputWhitenStdDevs)
    GetNumberOfBasis = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_GetNumberOfBasis)
    GetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_GetBasisValue)
    SetBasisValue = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_SetBasisValue)
    GetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_GetBasisVector)
    SetBasisVector = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_SetBasisVector)
    GetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_GetBasisMatrix)
    SetBasisMatrix = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_SetBasisMatrix)
    GetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_GetBasisValues)
    SetBasisValues = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_SetBasisValues)
    GetClassProbabilityImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_GetClassProbabilityImage)
    GetClassLikelihoodRatioImage = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_GetClassLikelihoodRatioImage)
    LoadParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_LoadParameterFile)
    SaveParameterFile = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_SaveParameterFile)
    SetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_SetSeedTolerance)
    GetSeedTolerance = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_GetSeedTolerance)
    SetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_SetSkeletonize)
    GetSkeletonize = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_GetSkeletonize)
    SetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_SetUseIntensityOnly)
    GetUseIntensityOnly = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_GetUseIntensityOnly)
    SetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_SetTrainClassifier)
    GetTrainClassifier = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_GetTrainClassifier)
    ClassifyImages = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_ClassifyImages)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_GetOutput)
    GetOutputSeedScales = _swig_new_instance_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_GetOutputSeedScales)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3)
tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3___New_orig__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3___New_orig__
tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_cast = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def enhance_tubes_using_discriminant_analysis(*args, **kwargs):
    """Procedural interface for EnhanceTubesUsingDiscriminantAnalysis"""
    import itk
    instance = itk.EnhanceTubesUsingDiscriminantAnalysis.New(*args, **kwargs)
    return instance.__internal_call__()

def enhance_tubes_using_discriminant_analysis_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.EnhanceTubesUsingDiscriminantAnalysis, itkTemplate.itkTemplate):
        filter_object = itk.EnhanceTubesUsingDiscriminantAnalysis.values()[0]
    else:
        filter_object = itk.EnhanceTubesUsingDiscriminantAnalysis

    enhance_tubes_using_discriminant_analysis.__doc__ = filter_object.__doc__
    enhance_tubes_using_discriminant_analysis.__doc__ += "\n Args are Input(s) to the filter.\n"
    enhance_tubes_using_discriminant_analysis.__doc__ += "Available Keyword Arguments:\n"
    enhance_tubes_using_discriminant_analysis.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



