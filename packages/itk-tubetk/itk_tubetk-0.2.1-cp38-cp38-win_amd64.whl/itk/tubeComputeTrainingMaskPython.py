# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _TubeTKPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _tubeComputeTrainingMaskPython
else:
    import _tubeComputeTrainingMaskPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _tubeComputeTrainingMaskPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _tubeComputeTrainingMaskPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkImagePython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkPointPython
import itk.itkCovariantVectorPython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython

def tubeComputeTrainingMaskDD2_New():
    return tubeComputeTrainingMaskDD2.New()

class tubeComputeTrainingMaskDD2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskDD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD2___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD2_Clone)
    SetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD2_SetGap)
    GetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD2_GetGap)
    SetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD2_SetNotObjectWidth)
    GetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD2_GetNotObjectWidth)
    GetObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD2_GetObjectMask)
    GetNotObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD2_GetNotObjectMask)
    SetInput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD2_SetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD2_GetOutput)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskDD2
    cast = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD2_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskDD2

        Create a new object of the class tubeComputeTrainingMaskDD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskDD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskDD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskDD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskDD2 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD2_swigregister(tubeComputeTrainingMaskDD2)
tubeComputeTrainingMaskDD2___New_orig__ = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD2___New_orig__
tubeComputeTrainingMaskDD2_cast = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD2_cast


def tubeComputeTrainingMaskDD3_New():
    return tubeComputeTrainingMaskDD3.New()

class tubeComputeTrainingMaskDD3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskDD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD3___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD3_Clone)
    SetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD3_SetGap)
    GetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD3_GetGap)
    SetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD3_SetNotObjectWidth)
    GetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD3_GetNotObjectWidth)
    GetObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD3_GetObjectMask)
    GetNotObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD3_GetNotObjectMask)
    SetInput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD3_SetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD3_GetOutput)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskDD3
    cast = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD3_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskDD3

        Create a new object of the class tubeComputeTrainingMaskDD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskDD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskDD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskDD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskDD3 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD3_swigregister(tubeComputeTrainingMaskDD3)
tubeComputeTrainingMaskDD3___New_orig__ = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD3___New_orig__
tubeComputeTrainingMaskDD3_cast = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD3_cast


def tubeComputeTrainingMaskDF2_New():
    return tubeComputeTrainingMaskDF2.New()

class tubeComputeTrainingMaskDF2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskDF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF2___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF2_Clone)
    SetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF2_SetGap)
    GetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF2_GetGap)
    SetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF2_SetNotObjectWidth)
    GetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF2_GetNotObjectWidth)
    GetObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF2_GetObjectMask)
    GetNotObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF2_GetNotObjectMask)
    SetInput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF2_SetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF2_GetOutput)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskDF2
    cast = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF2_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskDF2

        Create a new object of the class tubeComputeTrainingMaskDF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskDF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskDF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskDF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskDF2 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF2_swigregister(tubeComputeTrainingMaskDF2)
tubeComputeTrainingMaskDF2___New_orig__ = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF2___New_orig__
tubeComputeTrainingMaskDF2_cast = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF2_cast


def tubeComputeTrainingMaskDF3_New():
    return tubeComputeTrainingMaskDF3.New()

class tubeComputeTrainingMaskDF3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskDF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF3___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF3_Clone)
    SetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF3_SetGap)
    GetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF3_GetGap)
    SetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF3_SetNotObjectWidth)
    GetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF3_GetNotObjectWidth)
    GetObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF3_GetObjectMask)
    GetNotObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF3_GetNotObjectMask)
    SetInput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF3_SetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF3_GetOutput)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskDF3
    cast = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF3_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskDF3

        Create a new object of the class tubeComputeTrainingMaskDF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskDF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskDF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskDF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskDF3 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF3_swigregister(tubeComputeTrainingMaskDF3)
tubeComputeTrainingMaskDF3___New_orig__ = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF3___New_orig__
tubeComputeTrainingMaskDF3_cast = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF3_cast


def tubeComputeTrainingMaskDSS2_New():
    return tubeComputeTrainingMaskDSS2.New()

class tubeComputeTrainingMaskDSS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskDSS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS2___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS2_Clone)
    SetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS2_SetGap)
    GetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS2_GetGap)
    SetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS2_SetNotObjectWidth)
    GetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS2_GetNotObjectWidth)
    GetObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS2_GetObjectMask)
    GetNotObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS2_GetNotObjectMask)
    SetInput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS2_SetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS2_GetOutput)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskDSS2
    cast = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS2_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskDSS2

        Create a new object of the class tubeComputeTrainingMaskDSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskDSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskDSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskDSS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskDSS2 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS2_swigregister(tubeComputeTrainingMaskDSS2)
tubeComputeTrainingMaskDSS2___New_orig__ = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS2___New_orig__
tubeComputeTrainingMaskDSS2_cast = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS2_cast


def tubeComputeTrainingMaskDSS3_New():
    return tubeComputeTrainingMaskDSS3.New()

class tubeComputeTrainingMaskDSS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskDSS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS3___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS3_Clone)
    SetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS3_SetGap)
    GetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS3_GetGap)
    SetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS3_SetNotObjectWidth)
    GetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS3_GetNotObjectWidth)
    GetObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS3_GetObjectMask)
    GetNotObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS3_GetNotObjectMask)
    SetInput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS3_SetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS3_GetOutput)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskDSS3
    cast = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS3_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskDSS3

        Create a new object of the class tubeComputeTrainingMaskDSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskDSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskDSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskDSS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskDSS3 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS3_swigregister(tubeComputeTrainingMaskDSS3)
tubeComputeTrainingMaskDSS3___New_orig__ = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS3___New_orig__
tubeComputeTrainingMaskDSS3_cast = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS3_cast


def tubeComputeTrainingMaskDUC2_New():
    return tubeComputeTrainingMaskDUC2.New()

class tubeComputeTrainingMaskDUC2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskDUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC2___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC2_Clone)
    SetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC2_SetGap)
    GetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC2_GetGap)
    SetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC2_SetNotObjectWidth)
    GetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC2_GetNotObjectWidth)
    GetObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC2_GetObjectMask)
    GetNotObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC2_GetNotObjectMask)
    SetInput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC2_SetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC2_GetOutput)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskDUC2
    cast = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC2_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskDUC2

        Create a new object of the class tubeComputeTrainingMaskDUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskDUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskDUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskDUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskDUC2 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC2_swigregister(tubeComputeTrainingMaskDUC2)
tubeComputeTrainingMaskDUC2___New_orig__ = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC2___New_orig__
tubeComputeTrainingMaskDUC2_cast = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC2_cast


def tubeComputeTrainingMaskDUC3_New():
    return tubeComputeTrainingMaskDUC3.New()

class tubeComputeTrainingMaskDUC3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskDUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC3___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC3_Clone)
    SetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC3_SetGap)
    GetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC3_GetGap)
    SetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC3_SetNotObjectWidth)
    GetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC3_GetNotObjectWidth)
    GetObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC3_GetObjectMask)
    GetNotObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC3_GetNotObjectMask)
    SetInput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC3_SetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC3_GetOutput)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskDUC3
    cast = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC3_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskDUC3

        Create a new object of the class tubeComputeTrainingMaskDUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskDUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskDUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskDUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskDUC3 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC3_swigregister(tubeComputeTrainingMaskDUC3)
tubeComputeTrainingMaskDUC3___New_orig__ = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC3___New_orig__
tubeComputeTrainingMaskDUC3_cast = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC3_cast


def tubeComputeTrainingMaskDUS2_New():
    return tubeComputeTrainingMaskDUS2.New()

class tubeComputeTrainingMaskDUS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskDUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS2___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS2_Clone)
    SetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS2_SetGap)
    GetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS2_GetGap)
    SetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS2_SetNotObjectWidth)
    GetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS2_GetNotObjectWidth)
    GetObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS2_GetObjectMask)
    GetNotObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS2_GetNotObjectMask)
    SetInput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS2_SetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS2_GetOutput)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskDUS2
    cast = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS2_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskDUS2

        Create a new object of the class tubeComputeTrainingMaskDUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskDUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskDUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskDUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskDUS2 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS2_swigregister(tubeComputeTrainingMaskDUS2)
tubeComputeTrainingMaskDUS2___New_orig__ = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS2___New_orig__
tubeComputeTrainingMaskDUS2_cast = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS2_cast


def tubeComputeTrainingMaskDUS3_New():
    return tubeComputeTrainingMaskDUS3.New()

class tubeComputeTrainingMaskDUS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskDUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS3___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS3_Clone)
    SetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS3_SetGap)
    GetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS3_GetGap)
    SetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS3_SetNotObjectWidth)
    GetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS3_GetNotObjectWidth)
    GetObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS3_GetObjectMask)
    GetNotObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS3_GetNotObjectMask)
    SetInput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS3_SetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS3_GetOutput)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskDUS3
    cast = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS3_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskDUS3

        Create a new object of the class tubeComputeTrainingMaskDUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskDUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskDUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskDUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskDUS3 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS3_swigregister(tubeComputeTrainingMaskDUS3)
tubeComputeTrainingMaskDUS3___New_orig__ = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS3___New_orig__
tubeComputeTrainingMaskDUS3_cast = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS3_cast


def tubeComputeTrainingMaskFD2_New():
    return tubeComputeTrainingMaskFD2.New()

class tubeComputeTrainingMaskFD2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskFD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD2___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD2_Clone)
    SetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD2_SetGap)
    GetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD2_GetGap)
    SetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD2_SetNotObjectWidth)
    GetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD2_GetNotObjectWidth)
    GetObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD2_GetObjectMask)
    GetNotObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD2_GetNotObjectMask)
    SetInput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD2_SetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD2_GetOutput)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskFD2
    cast = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD2_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskFD2

        Create a new object of the class tubeComputeTrainingMaskFD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskFD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskFD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskFD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskFD2 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD2_swigregister(tubeComputeTrainingMaskFD2)
tubeComputeTrainingMaskFD2___New_orig__ = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD2___New_orig__
tubeComputeTrainingMaskFD2_cast = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD2_cast


def tubeComputeTrainingMaskFD3_New():
    return tubeComputeTrainingMaskFD3.New()

class tubeComputeTrainingMaskFD3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskFD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD3___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD3_Clone)
    SetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD3_SetGap)
    GetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD3_GetGap)
    SetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD3_SetNotObjectWidth)
    GetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD3_GetNotObjectWidth)
    GetObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD3_GetObjectMask)
    GetNotObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD3_GetNotObjectMask)
    SetInput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD3_SetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD3_GetOutput)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskFD3
    cast = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD3_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskFD3

        Create a new object of the class tubeComputeTrainingMaskFD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskFD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskFD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskFD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskFD3 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD3_swigregister(tubeComputeTrainingMaskFD3)
tubeComputeTrainingMaskFD3___New_orig__ = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD3___New_orig__
tubeComputeTrainingMaskFD3_cast = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD3_cast


def tubeComputeTrainingMaskFF2_New():
    return tubeComputeTrainingMaskFF2.New()

class tubeComputeTrainingMaskFF2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskFF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF2___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF2_Clone)
    SetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF2_SetGap)
    GetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF2_GetGap)
    SetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF2_SetNotObjectWidth)
    GetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF2_GetNotObjectWidth)
    GetObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF2_GetObjectMask)
    GetNotObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF2_GetNotObjectMask)
    SetInput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF2_SetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF2_GetOutput)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskFF2
    cast = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF2_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskFF2

        Create a new object of the class tubeComputeTrainingMaskFF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskFF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskFF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskFF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskFF2 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF2_swigregister(tubeComputeTrainingMaskFF2)
tubeComputeTrainingMaskFF2___New_orig__ = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF2___New_orig__
tubeComputeTrainingMaskFF2_cast = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF2_cast


def tubeComputeTrainingMaskFF3_New():
    return tubeComputeTrainingMaskFF3.New()

class tubeComputeTrainingMaskFF3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskFF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF3___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF3_Clone)
    SetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF3_SetGap)
    GetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF3_GetGap)
    SetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF3_SetNotObjectWidth)
    GetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF3_GetNotObjectWidth)
    GetObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF3_GetObjectMask)
    GetNotObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF3_GetNotObjectMask)
    SetInput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF3_SetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF3_GetOutput)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskFF3
    cast = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF3_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskFF3

        Create a new object of the class tubeComputeTrainingMaskFF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskFF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskFF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskFF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskFF3 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF3_swigregister(tubeComputeTrainingMaskFF3)
tubeComputeTrainingMaskFF3___New_orig__ = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF3___New_orig__
tubeComputeTrainingMaskFF3_cast = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF3_cast


def tubeComputeTrainingMaskFSS2_New():
    return tubeComputeTrainingMaskFSS2.New()

class tubeComputeTrainingMaskFSS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskFSS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS2___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS2_Clone)
    SetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS2_SetGap)
    GetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS2_GetGap)
    SetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS2_SetNotObjectWidth)
    GetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS2_GetNotObjectWidth)
    GetObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS2_GetObjectMask)
    GetNotObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS2_GetNotObjectMask)
    SetInput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS2_SetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS2_GetOutput)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskFSS2
    cast = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS2_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskFSS2

        Create a new object of the class tubeComputeTrainingMaskFSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskFSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskFSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskFSS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskFSS2 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS2_swigregister(tubeComputeTrainingMaskFSS2)
tubeComputeTrainingMaskFSS2___New_orig__ = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS2___New_orig__
tubeComputeTrainingMaskFSS2_cast = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS2_cast


def tubeComputeTrainingMaskFSS3_New():
    return tubeComputeTrainingMaskFSS3.New()

class tubeComputeTrainingMaskFSS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskFSS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS3___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS3_Clone)
    SetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS3_SetGap)
    GetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS3_GetGap)
    SetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS3_SetNotObjectWidth)
    GetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS3_GetNotObjectWidth)
    GetObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS3_GetObjectMask)
    GetNotObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS3_GetNotObjectMask)
    SetInput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS3_SetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS3_GetOutput)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskFSS3
    cast = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS3_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskFSS3

        Create a new object of the class tubeComputeTrainingMaskFSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskFSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskFSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskFSS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskFSS3 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS3_swigregister(tubeComputeTrainingMaskFSS3)
tubeComputeTrainingMaskFSS3___New_orig__ = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS3___New_orig__
tubeComputeTrainingMaskFSS3_cast = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS3_cast


def tubeComputeTrainingMaskFUC2_New():
    return tubeComputeTrainingMaskFUC2.New()

class tubeComputeTrainingMaskFUC2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskFUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC2___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC2_Clone)
    SetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC2_SetGap)
    GetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC2_GetGap)
    SetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC2_SetNotObjectWidth)
    GetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC2_GetNotObjectWidth)
    GetObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC2_GetObjectMask)
    GetNotObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC2_GetNotObjectMask)
    SetInput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC2_SetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC2_GetOutput)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskFUC2
    cast = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC2_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskFUC2

        Create a new object of the class tubeComputeTrainingMaskFUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskFUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskFUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskFUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskFUC2 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC2_swigregister(tubeComputeTrainingMaskFUC2)
tubeComputeTrainingMaskFUC2___New_orig__ = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC2___New_orig__
tubeComputeTrainingMaskFUC2_cast = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC2_cast


def tubeComputeTrainingMaskFUC3_New():
    return tubeComputeTrainingMaskFUC3.New()

class tubeComputeTrainingMaskFUC3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskFUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC3___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC3_Clone)
    SetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC3_SetGap)
    GetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC3_GetGap)
    SetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC3_SetNotObjectWidth)
    GetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC3_GetNotObjectWidth)
    GetObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC3_GetObjectMask)
    GetNotObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC3_GetNotObjectMask)
    SetInput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC3_SetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC3_GetOutput)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskFUC3
    cast = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC3_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskFUC3

        Create a new object of the class tubeComputeTrainingMaskFUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskFUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskFUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskFUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskFUC3 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC3_swigregister(tubeComputeTrainingMaskFUC3)
tubeComputeTrainingMaskFUC3___New_orig__ = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC3___New_orig__
tubeComputeTrainingMaskFUC3_cast = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC3_cast


def tubeComputeTrainingMaskFUS2_New():
    return tubeComputeTrainingMaskFUS2.New()

class tubeComputeTrainingMaskFUS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskFUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS2___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS2_Clone)
    SetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS2_SetGap)
    GetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS2_GetGap)
    SetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS2_SetNotObjectWidth)
    GetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS2_GetNotObjectWidth)
    GetObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS2_GetObjectMask)
    GetNotObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS2_GetNotObjectMask)
    SetInput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS2_SetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS2_GetOutput)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskFUS2
    cast = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS2_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskFUS2

        Create a new object of the class tubeComputeTrainingMaskFUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskFUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskFUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskFUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskFUS2 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS2_swigregister(tubeComputeTrainingMaskFUS2)
tubeComputeTrainingMaskFUS2___New_orig__ = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS2___New_orig__
tubeComputeTrainingMaskFUS2_cast = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS2_cast


def tubeComputeTrainingMaskFUS3_New():
    return tubeComputeTrainingMaskFUS3.New()

class tubeComputeTrainingMaskFUS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskFUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS3___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS3_Clone)
    SetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS3_SetGap)
    GetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS3_GetGap)
    SetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS3_SetNotObjectWidth)
    GetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS3_GetNotObjectWidth)
    GetObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS3_GetObjectMask)
    GetNotObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS3_GetNotObjectMask)
    SetInput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS3_SetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS3_GetOutput)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskFUS3
    cast = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS3_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskFUS3

        Create a new object of the class tubeComputeTrainingMaskFUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskFUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskFUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskFUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskFUS3 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS3_swigregister(tubeComputeTrainingMaskFUS3)
tubeComputeTrainingMaskFUS3___New_orig__ = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS3___New_orig__
tubeComputeTrainingMaskFUS3_cast = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS3_cast


def tubeComputeTrainingMaskSSD2_New():
    return tubeComputeTrainingMaskSSD2.New()

class tubeComputeTrainingMaskSSD2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskSSD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD2___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD2_Clone)
    SetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD2_SetGap)
    GetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD2_GetGap)
    SetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD2_SetNotObjectWidth)
    GetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD2_GetNotObjectWidth)
    GetObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD2_GetObjectMask)
    GetNotObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD2_GetNotObjectMask)
    SetInput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD2_SetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD2_GetOutput)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskSSD2
    cast = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD2_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskSSD2

        Create a new object of the class tubeComputeTrainingMaskSSD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskSSD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskSSD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskSSD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskSSD2 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD2_swigregister(tubeComputeTrainingMaskSSD2)
tubeComputeTrainingMaskSSD2___New_orig__ = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD2___New_orig__
tubeComputeTrainingMaskSSD2_cast = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD2_cast


def tubeComputeTrainingMaskSSD3_New():
    return tubeComputeTrainingMaskSSD3.New()

class tubeComputeTrainingMaskSSD3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskSSD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD3___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD3_Clone)
    SetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD3_SetGap)
    GetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD3_GetGap)
    SetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD3_SetNotObjectWidth)
    GetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD3_GetNotObjectWidth)
    GetObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD3_GetObjectMask)
    GetNotObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD3_GetNotObjectMask)
    SetInput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD3_SetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD3_GetOutput)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskSSD3
    cast = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD3_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskSSD3

        Create a new object of the class tubeComputeTrainingMaskSSD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskSSD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskSSD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskSSD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskSSD3 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD3_swigregister(tubeComputeTrainingMaskSSD3)
tubeComputeTrainingMaskSSD3___New_orig__ = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD3___New_orig__
tubeComputeTrainingMaskSSD3_cast = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD3_cast


def tubeComputeTrainingMaskSSF2_New():
    return tubeComputeTrainingMaskSSF2.New()

class tubeComputeTrainingMaskSSF2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskSSF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF2___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF2_Clone)
    SetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF2_SetGap)
    GetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF2_GetGap)
    SetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF2_SetNotObjectWidth)
    GetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF2_GetNotObjectWidth)
    GetObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF2_GetObjectMask)
    GetNotObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF2_GetNotObjectMask)
    SetInput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF2_SetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF2_GetOutput)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskSSF2
    cast = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF2_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskSSF2

        Create a new object of the class tubeComputeTrainingMaskSSF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskSSF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskSSF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskSSF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskSSF2 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF2_swigregister(tubeComputeTrainingMaskSSF2)
tubeComputeTrainingMaskSSF2___New_orig__ = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF2___New_orig__
tubeComputeTrainingMaskSSF2_cast = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF2_cast


def tubeComputeTrainingMaskSSF3_New():
    return tubeComputeTrainingMaskSSF3.New()

class tubeComputeTrainingMaskSSF3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskSSF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF3___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF3_Clone)
    SetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF3_SetGap)
    GetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF3_GetGap)
    SetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF3_SetNotObjectWidth)
    GetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF3_GetNotObjectWidth)
    GetObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF3_GetObjectMask)
    GetNotObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF3_GetNotObjectMask)
    SetInput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF3_SetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF3_GetOutput)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskSSF3
    cast = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF3_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskSSF3

        Create a new object of the class tubeComputeTrainingMaskSSF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskSSF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskSSF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskSSF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskSSF3 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF3_swigregister(tubeComputeTrainingMaskSSF3)
tubeComputeTrainingMaskSSF3___New_orig__ = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF3___New_orig__
tubeComputeTrainingMaskSSF3_cast = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF3_cast


def tubeComputeTrainingMaskSSSS2_New():
    return tubeComputeTrainingMaskSSSS2.New()

class tubeComputeTrainingMaskSSSS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskSSSS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS2___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS2_Clone)
    SetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS2_SetGap)
    GetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS2_GetGap)
    SetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS2_SetNotObjectWidth)
    GetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS2_GetNotObjectWidth)
    GetObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS2_GetObjectMask)
    GetNotObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS2_GetNotObjectMask)
    SetInput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS2_SetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS2_GetOutput)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskSSSS2
    cast = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS2_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskSSSS2

        Create a new object of the class tubeComputeTrainingMaskSSSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskSSSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskSSSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskSSSS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskSSSS2 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS2_swigregister(tubeComputeTrainingMaskSSSS2)
tubeComputeTrainingMaskSSSS2___New_orig__ = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS2___New_orig__
tubeComputeTrainingMaskSSSS2_cast = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS2_cast


def tubeComputeTrainingMaskSSSS3_New():
    return tubeComputeTrainingMaskSSSS3.New()

class tubeComputeTrainingMaskSSSS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskSSSS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS3___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS3_Clone)
    SetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS3_SetGap)
    GetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS3_GetGap)
    SetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS3_SetNotObjectWidth)
    GetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS3_GetNotObjectWidth)
    GetObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS3_GetObjectMask)
    GetNotObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS3_GetNotObjectMask)
    SetInput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS3_SetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS3_GetOutput)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskSSSS3
    cast = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS3_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskSSSS3

        Create a new object of the class tubeComputeTrainingMaskSSSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskSSSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskSSSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskSSSS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskSSSS3 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS3_swigregister(tubeComputeTrainingMaskSSSS3)
tubeComputeTrainingMaskSSSS3___New_orig__ = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS3___New_orig__
tubeComputeTrainingMaskSSSS3_cast = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS3_cast


def tubeComputeTrainingMaskSSUC2_New():
    return tubeComputeTrainingMaskSSUC2.New()

class tubeComputeTrainingMaskSSUC2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskSSUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC2___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC2_Clone)
    SetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC2_SetGap)
    GetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC2_GetGap)
    SetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC2_SetNotObjectWidth)
    GetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC2_GetNotObjectWidth)
    GetObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC2_GetObjectMask)
    GetNotObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC2_GetNotObjectMask)
    SetInput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC2_SetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC2_GetOutput)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskSSUC2
    cast = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC2_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskSSUC2

        Create a new object of the class tubeComputeTrainingMaskSSUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskSSUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskSSUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskSSUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskSSUC2 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC2_swigregister(tubeComputeTrainingMaskSSUC2)
tubeComputeTrainingMaskSSUC2___New_orig__ = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC2___New_orig__
tubeComputeTrainingMaskSSUC2_cast = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC2_cast


def tubeComputeTrainingMaskSSUC3_New():
    return tubeComputeTrainingMaskSSUC3.New()

class tubeComputeTrainingMaskSSUC3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskSSUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC3___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC3_Clone)
    SetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC3_SetGap)
    GetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC3_GetGap)
    SetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC3_SetNotObjectWidth)
    GetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC3_GetNotObjectWidth)
    GetObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC3_GetObjectMask)
    GetNotObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC3_GetNotObjectMask)
    SetInput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC3_SetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC3_GetOutput)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskSSUC3
    cast = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC3_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskSSUC3

        Create a new object of the class tubeComputeTrainingMaskSSUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskSSUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskSSUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskSSUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskSSUC3 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC3_swigregister(tubeComputeTrainingMaskSSUC3)
tubeComputeTrainingMaskSSUC3___New_orig__ = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC3___New_orig__
tubeComputeTrainingMaskSSUC3_cast = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC3_cast


def tubeComputeTrainingMaskSSUS2_New():
    return tubeComputeTrainingMaskSSUS2.New()

class tubeComputeTrainingMaskSSUS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskSSUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS2___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS2_Clone)
    SetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS2_SetGap)
    GetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS2_GetGap)
    SetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS2_SetNotObjectWidth)
    GetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS2_GetNotObjectWidth)
    GetObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS2_GetObjectMask)
    GetNotObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS2_GetNotObjectMask)
    SetInput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS2_SetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS2_GetOutput)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskSSUS2
    cast = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS2_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskSSUS2

        Create a new object of the class tubeComputeTrainingMaskSSUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskSSUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskSSUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskSSUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskSSUS2 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS2_swigregister(tubeComputeTrainingMaskSSUS2)
tubeComputeTrainingMaskSSUS2___New_orig__ = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS2___New_orig__
tubeComputeTrainingMaskSSUS2_cast = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS2_cast


def tubeComputeTrainingMaskSSUS3_New():
    return tubeComputeTrainingMaskSSUS3.New()

class tubeComputeTrainingMaskSSUS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskSSUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS3___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS3_Clone)
    SetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS3_SetGap)
    GetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS3_GetGap)
    SetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS3_SetNotObjectWidth)
    GetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS3_GetNotObjectWidth)
    GetObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS3_GetObjectMask)
    GetNotObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS3_GetNotObjectMask)
    SetInput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS3_SetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS3_GetOutput)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskSSUS3
    cast = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS3_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskSSUS3

        Create a new object of the class tubeComputeTrainingMaskSSUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskSSUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskSSUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskSSUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskSSUS3 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS3_swigregister(tubeComputeTrainingMaskSSUS3)
tubeComputeTrainingMaskSSUS3___New_orig__ = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS3___New_orig__
tubeComputeTrainingMaskSSUS3_cast = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS3_cast


def tubeComputeTrainingMaskUCD2_New():
    return tubeComputeTrainingMaskUCD2.New()

class tubeComputeTrainingMaskUCD2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskUCD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD2___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD2_Clone)
    SetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD2_SetGap)
    GetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD2_GetGap)
    SetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD2_SetNotObjectWidth)
    GetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD2_GetNotObjectWidth)
    GetObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD2_GetObjectMask)
    GetNotObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD2_GetNotObjectMask)
    SetInput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD2_SetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD2_GetOutput)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUCD2
    cast = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD2_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUCD2

        Create a new object of the class tubeComputeTrainingMaskUCD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUCD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUCD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskUCD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskUCD2 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD2_swigregister(tubeComputeTrainingMaskUCD2)
tubeComputeTrainingMaskUCD2___New_orig__ = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD2___New_orig__
tubeComputeTrainingMaskUCD2_cast = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD2_cast


def tubeComputeTrainingMaskUCD3_New():
    return tubeComputeTrainingMaskUCD3.New()

class tubeComputeTrainingMaskUCD3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskUCD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD3___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD3_Clone)
    SetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD3_SetGap)
    GetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD3_GetGap)
    SetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD3_SetNotObjectWidth)
    GetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD3_GetNotObjectWidth)
    GetObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD3_GetObjectMask)
    GetNotObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD3_GetNotObjectMask)
    SetInput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD3_SetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD3_GetOutput)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUCD3
    cast = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD3_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUCD3

        Create a new object of the class tubeComputeTrainingMaskUCD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUCD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUCD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskUCD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskUCD3 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD3_swigregister(tubeComputeTrainingMaskUCD3)
tubeComputeTrainingMaskUCD3___New_orig__ = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD3___New_orig__
tubeComputeTrainingMaskUCD3_cast = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD3_cast


def tubeComputeTrainingMaskUCF2_New():
    return tubeComputeTrainingMaskUCF2.New()

class tubeComputeTrainingMaskUCF2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskUCF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF2___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF2_Clone)
    SetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF2_SetGap)
    GetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF2_GetGap)
    SetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF2_SetNotObjectWidth)
    GetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF2_GetNotObjectWidth)
    GetObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF2_GetObjectMask)
    GetNotObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF2_GetNotObjectMask)
    SetInput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF2_SetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF2_GetOutput)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUCF2
    cast = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF2_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUCF2

        Create a new object of the class tubeComputeTrainingMaskUCF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUCF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUCF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskUCF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskUCF2 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF2_swigregister(tubeComputeTrainingMaskUCF2)
tubeComputeTrainingMaskUCF2___New_orig__ = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF2___New_orig__
tubeComputeTrainingMaskUCF2_cast = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF2_cast


def tubeComputeTrainingMaskUCF3_New():
    return tubeComputeTrainingMaskUCF3.New()

class tubeComputeTrainingMaskUCF3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskUCF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF3___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF3_Clone)
    SetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF3_SetGap)
    GetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF3_GetGap)
    SetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF3_SetNotObjectWidth)
    GetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF3_GetNotObjectWidth)
    GetObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF3_GetObjectMask)
    GetNotObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF3_GetNotObjectMask)
    SetInput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF3_SetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF3_GetOutput)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUCF3
    cast = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF3_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUCF3

        Create a new object of the class tubeComputeTrainingMaskUCF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUCF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUCF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskUCF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskUCF3 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF3_swigregister(tubeComputeTrainingMaskUCF3)
tubeComputeTrainingMaskUCF3___New_orig__ = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF3___New_orig__
tubeComputeTrainingMaskUCF3_cast = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF3_cast


def tubeComputeTrainingMaskUCSS2_New():
    return tubeComputeTrainingMaskUCSS2.New()

class tubeComputeTrainingMaskUCSS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskUCSS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS2___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS2_Clone)
    SetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS2_SetGap)
    GetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS2_GetGap)
    SetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS2_SetNotObjectWidth)
    GetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS2_GetNotObjectWidth)
    GetObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS2_GetObjectMask)
    GetNotObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS2_GetNotObjectMask)
    SetInput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS2_SetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS2_GetOutput)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUCSS2
    cast = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS2_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUCSS2

        Create a new object of the class tubeComputeTrainingMaskUCSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUCSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUCSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskUCSS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskUCSS2 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS2_swigregister(tubeComputeTrainingMaskUCSS2)
tubeComputeTrainingMaskUCSS2___New_orig__ = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS2___New_orig__
tubeComputeTrainingMaskUCSS2_cast = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS2_cast


def tubeComputeTrainingMaskUCSS3_New():
    return tubeComputeTrainingMaskUCSS3.New()

class tubeComputeTrainingMaskUCSS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskUCSS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS3___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS3_Clone)
    SetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS3_SetGap)
    GetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS3_GetGap)
    SetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS3_SetNotObjectWidth)
    GetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS3_GetNotObjectWidth)
    GetObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS3_GetObjectMask)
    GetNotObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS3_GetNotObjectMask)
    SetInput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS3_SetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS3_GetOutput)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUCSS3
    cast = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS3_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUCSS3

        Create a new object of the class tubeComputeTrainingMaskUCSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUCSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUCSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskUCSS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskUCSS3 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS3_swigregister(tubeComputeTrainingMaskUCSS3)
tubeComputeTrainingMaskUCSS3___New_orig__ = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS3___New_orig__
tubeComputeTrainingMaskUCSS3_cast = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS3_cast


def tubeComputeTrainingMaskUCUC2_New():
    return tubeComputeTrainingMaskUCUC2.New()

class tubeComputeTrainingMaskUCUC2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskUCUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC2___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC2_Clone)
    SetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC2_SetGap)
    GetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC2_GetGap)
    SetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC2_SetNotObjectWidth)
    GetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC2_GetNotObjectWidth)
    GetObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC2_GetObjectMask)
    GetNotObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC2_GetNotObjectMask)
    SetInput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC2_SetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC2_GetOutput)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUCUC2
    cast = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC2_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUCUC2

        Create a new object of the class tubeComputeTrainingMaskUCUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUCUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUCUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskUCUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskUCUC2 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC2_swigregister(tubeComputeTrainingMaskUCUC2)
tubeComputeTrainingMaskUCUC2___New_orig__ = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC2___New_orig__
tubeComputeTrainingMaskUCUC2_cast = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC2_cast


def tubeComputeTrainingMaskUCUC3_New():
    return tubeComputeTrainingMaskUCUC3.New()

class tubeComputeTrainingMaskUCUC3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskUCUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC3___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC3_Clone)
    SetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC3_SetGap)
    GetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC3_GetGap)
    SetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC3_SetNotObjectWidth)
    GetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC3_GetNotObjectWidth)
    GetObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC3_GetObjectMask)
    GetNotObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC3_GetNotObjectMask)
    SetInput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC3_SetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC3_GetOutput)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUCUC3
    cast = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC3_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUCUC3

        Create a new object of the class tubeComputeTrainingMaskUCUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUCUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUCUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskUCUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskUCUC3 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC3_swigregister(tubeComputeTrainingMaskUCUC3)
tubeComputeTrainingMaskUCUC3___New_orig__ = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC3___New_orig__
tubeComputeTrainingMaskUCUC3_cast = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC3_cast


def tubeComputeTrainingMaskUCUS2_New():
    return tubeComputeTrainingMaskUCUS2.New()

class tubeComputeTrainingMaskUCUS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskUCUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS2___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS2_Clone)
    SetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS2_SetGap)
    GetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS2_GetGap)
    SetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS2_SetNotObjectWidth)
    GetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS2_GetNotObjectWidth)
    GetObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS2_GetObjectMask)
    GetNotObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS2_GetNotObjectMask)
    SetInput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS2_SetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS2_GetOutput)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUCUS2
    cast = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS2_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUCUS2

        Create a new object of the class tubeComputeTrainingMaskUCUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUCUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUCUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskUCUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskUCUS2 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS2_swigregister(tubeComputeTrainingMaskUCUS2)
tubeComputeTrainingMaskUCUS2___New_orig__ = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS2___New_orig__
tubeComputeTrainingMaskUCUS2_cast = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS2_cast


def tubeComputeTrainingMaskUCUS3_New():
    return tubeComputeTrainingMaskUCUS3.New()

class tubeComputeTrainingMaskUCUS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskUCUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS3___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS3_Clone)
    SetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS3_SetGap)
    GetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS3_GetGap)
    SetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS3_SetNotObjectWidth)
    GetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS3_GetNotObjectWidth)
    GetObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS3_GetObjectMask)
    GetNotObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS3_GetNotObjectMask)
    SetInput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS3_SetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS3_GetOutput)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUCUS3
    cast = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS3_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUCUS3

        Create a new object of the class tubeComputeTrainingMaskUCUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUCUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUCUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskUCUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskUCUS3 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS3_swigregister(tubeComputeTrainingMaskUCUS3)
tubeComputeTrainingMaskUCUS3___New_orig__ = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS3___New_orig__
tubeComputeTrainingMaskUCUS3_cast = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS3_cast


def tubeComputeTrainingMaskUSD2_New():
    return tubeComputeTrainingMaskUSD2.New()

class tubeComputeTrainingMaskUSD2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskUSD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD2___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD2_Clone)
    SetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD2_SetGap)
    GetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD2_GetGap)
    SetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD2_SetNotObjectWidth)
    GetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD2_GetNotObjectWidth)
    GetObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD2_GetObjectMask)
    GetNotObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD2_GetNotObjectMask)
    SetInput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD2_SetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD2_GetOutput)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUSD2
    cast = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD2_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUSD2

        Create a new object of the class tubeComputeTrainingMaskUSD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUSD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUSD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskUSD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskUSD2 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD2_swigregister(tubeComputeTrainingMaskUSD2)
tubeComputeTrainingMaskUSD2___New_orig__ = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD2___New_orig__
tubeComputeTrainingMaskUSD2_cast = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD2_cast


def tubeComputeTrainingMaskUSD3_New():
    return tubeComputeTrainingMaskUSD3.New()

class tubeComputeTrainingMaskUSD3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskUSD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD3___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD3_Clone)
    SetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD3_SetGap)
    GetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD3_GetGap)
    SetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD3_SetNotObjectWidth)
    GetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD3_GetNotObjectWidth)
    GetObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD3_GetObjectMask)
    GetNotObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD3_GetNotObjectMask)
    SetInput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD3_SetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD3_GetOutput)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUSD3
    cast = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD3_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUSD3

        Create a new object of the class tubeComputeTrainingMaskUSD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUSD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUSD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskUSD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskUSD3 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD3_swigregister(tubeComputeTrainingMaskUSD3)
tubeComputeTrainingMaskUSD3___New_orig__ = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD3___New_orig__
tubeComputeTrainingMaskUSD3_cast = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD3_cast


def tubeComputeTrainingMaskUSF2_New():
    return tubeComputeTrainingMaskUSF2.New()

class tubeComputeTrainingMaskUSF2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskUSF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF2___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF2_Clone)
    SetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF2_SetGap)
    GetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF2_GetGap)
    SetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF2_SetNotObjectWidth)
    GetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF2_GetNotObjectWidth)
    GetObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF2_GetObjectMask)
    GetNotObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF2_GetNotObjectMask)
    SetInput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF2_SetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF2_GetOutput)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUSF2
    cast = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF2_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUSF2

        Create a new object of the class tubeComputeTrainingMaskUSF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUSF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUSF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskUSF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskUSF2 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF2_swigregister(tubeComputeTrainingMaskUSF2)
tubeComputeTrainingMaskUSF2___New_orig__ = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF2___New_orig__
tubeComputeTrainingMaskUSF2_cast = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF2_cast


def tubeComputeTrainingMaskUSF3_New():
    return tubeComputeTrainingMaskUSF3.New()

class tubeComputeTrainingMaskUSF3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskUSF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF3___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF3_Clone)
    SetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF3_SetGap)
    GetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF3_GetGap)
    SetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF3_SetNotObjectWidth)
    GetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF3_GetNotObjectWidth)
    GetObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF3_GetObjectMask)
    GetNotObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF3_GetNotObjectMask)
    SetInput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF3_SetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF3_GetOutput)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUSF3
    cast = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF3_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUSF3

        Create a new object of the class tubeComputeTrainingMaskUSF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUSF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUSF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskUSF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskUSF3 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF3_swigregister(tubeComputeTrainingMaskUSF3)
tubeComputeTrainingMaskUSF3___New_orig__ = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF3___New_orig__
tubeComputeTrainingMaskUSF3_cast = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF3_cast


def tubeComputeTrainingMaskUSSS2_New():
    return tubeComputeTrainingMaskUSSS2.New()

class tubeComputeTrainingMaskUSSS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskUSSS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS2___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS2_Clone)
    SetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS2_SetGap)
    GetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS2_GetGap)
    SetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS2_SetNotObjectWidth)
    GetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS2_GetNotObjectWidth)
    GetObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS2_GetObjectMask)
    GetNotObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS2_GetNotObjectMask)
    SetInput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS2_SetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS2_GetOutput)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUSSS2
    cast = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS2_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUSSS2

        Create a new object of the class tubeComputeTrainingMaskUSSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUSSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUSSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskUSSS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskUSSS2 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS2_swigregister(tubeComputeTrainingMaskUSSS2)
tubeComputeTrainingMaskUSSS2___New_orig__ = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS2___New_orig__
tubeComputeTrainingMaskUSSS2_cast = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS2_cast


def tubeComputeTrainingMaskUSSS3_New():
    return tubeComputeTrainingMaskUSSS3.New()

class tubeComputeTrainingMaskUSSS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskUSSS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS3___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS3_Clone)
    SetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS3_SetGap)
    GetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS3_GetGap)
    SetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS3_SetNotObjectWidth)
    GetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS3_GetNotObjectWidth)
    GetObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS3_GetObjectMask)
    GetNotObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS3_GetNotObjectMask)
    SetInput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS3_SetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS3_GetOutput)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUSSS3
    cast = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS3_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUSSS3

        Create a new object of the class tubeComputeTrainingMaskUSSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUSSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUSSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskUSSS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskUSSS3 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS3_swigregister(tubeComputeTrainingMaskUSSS3)
tubeComputeTrainingMaskUSSS3___New_orig__ = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS3___New_orig__
tubeComputeTrainingMaskUSSS3_cast = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS3_cast


def tubeComputeTrainingMaskUSUC2_New():
    return tubeComputeTrainingMaskUSUC2.New()

class tubeComputeTrainingMaskUSUC2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskUSUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC2___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC2_Clone)
    SetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC2_SetGap)
    GetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC2_GetGap)
    SetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC2_SetNotObjectWidth)
    GetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC2_GetNotObjectWidth)
    GetObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC2_GetObjectMask)
    GetNotObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC2_GetNotObjectMask)
    SetInput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC2_SetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC2_GetOutput)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUSUC2
    cast = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC2_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUSUC2

        Create a new object of the class tubeComputeTrainingMaskUSUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUSUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUSUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskUSUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskUSUC2 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC2_swigregister(tubeComputeTrainingMaskUSUC2)
tubeComputeTrainingMaskUSUC2___New_orig__ = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC2___New_orig__
tubeComputeTrainingMaskUSUC2_cast = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC2_cast


def tubeComputeTrainingMaskUSUC3_New():
    return tubeComputeTrainingMaskUSUC3.New()

class tubeComputeTrainingMaskUSUC3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskUSUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC3___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC3_Clone)
    SetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC3_SetGap)
    GetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC3_GetGap)
    SetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC3_SetNotObjectWidth)
    GetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC3_GetNotObjectWidth)
    GetObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC3_GetObjectMask)
    GetNotObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC3_GetNotObjectMask)
    SetInput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC3_SetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC3_GetOutput)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUSUC3
    cast = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC3_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUSUC3

        Create a new object of the class tubeComputeTrainingMaskUSUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUSUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUSUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskUSUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskUSUC3 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC3_swigregister(tubeComputeTrainingMaskUSUC3)
tubeComputeTrainingMaskUSUC3___New_orig__ = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC3___New_orig__
tubeComputeTrainingMaskUSUC3_cast = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC3_cast


def tubeComputeTrainingMaskUSUS2_New():
    return tubeComputeTrainingMaskUSUS2.New()

class tubeComputeTrainingMaskUSUS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskUSUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS2___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS2_Clone)
    SetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS2_SetGap)
    GetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS2_GetGap)
    SetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS2_SetNotObjectWidth)
    GetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS2_GetNotObjectWidth)
    GetObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS2_GetObjectMask)
    GetNotObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS2_GetNotObjectMask)
    SetInput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS2_SetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS2_GetOutput)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUSUS2
    cast = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS2_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUSUS2

        Create a new object of the class tubeComputeTrainingMaskUSUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUSUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUSUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskUSUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskUSUS2 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS2_swigregister(tubeComputeTrainingMaskUSUS2)
tubeComputeTrainingMaskUSUS2___New_orig__ = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS2___New_orig__
tubeComputeTrainingMaskUSUS2_cast = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS2_cast


def tubeComputeTrainingMaskUSUS3_New():
    return tubeComputeTrainingMaskUSUS3.New()

class tubeComputeTrainingMaskUSUS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskUSUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS3___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS3_Clone)
    SetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS3_SetGap)
    GetGap = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS3_GetGap)
    SetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS3_SetNotObjectWidth)
    GetNotObjectWidth = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS3_GetNotObjectWidth)
    GetObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS3_GetObjectMask)
    GetNotObjectMask = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS3_GetNotObjectMask)
    SetInput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS3_SetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS3_GetOutput)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUSUS3
    cast = _swig_new_static_method(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS3_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUSUS3

        Create a new object of the class tubeComputeTrainingMaskUSUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUSUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUSUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskUSUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskUSUS3 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS3_swigregister(tubeComputeTrainingMaskUSUS3)
tubeComputeTrainingMaskUSUS3___New_orig__ = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS3___New_orig__
tubeComputeTrainingMaskUSUS3_cast = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def compute_training_mask(*args, **kwargs):
    """Procedural interface for ComputeTrainingMask"""
    import itk
    instance = itk.ComputeTrainingMask.New(*args, **kwargs)
    return instance.__internal_call__()

def compute_training_mask_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ComputeTrainingMask, itkTemplate.itkTemplate):
        filter_object = itk.ComputeTrainingMask.values()[0]
    else:
        filter_object = itk.ComputeTrainingMask

    compute_training_mask.__doc__ = filter_object.__doc__
    compute_training_mask.__doc__ += "\n Args are Input(s) to the filter.\n"
    compute_training_mask.__doc__ += "Available Keyword Arguments:\n"
    compute_training_mask.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



