# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _TubeTKPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _tubeComputeTubeMeasuresPython
else:
    import _tubeComputeTubeMeasuresPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _tubeComputeTubeMeasuresPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _tubeComputeTubeMeasuresPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkImagePython
import itk.itkFixedArrayPython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython

def tubeComputeTubeMeasuresD2_New():
    return tubeComputeTubeMeasuresD2.New()

class tubeComputeTubeMeasuresD2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTubeMeasuresD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD2___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD2_Clone)
    SetScale = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD2_SetScale)
    GetScale = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD2_GetScale)
    SetInputImage = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD2_SetInputImage)
    GetInputImage = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD2_GetInputImage)
    GetRidgeness = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD2_GetRidgeness)
    GetRoundness = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD2_GetRoundness)
    GetCurvature = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD2_GetCurvature)
    GetLevelness = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD2_GetLevelness)
    __swig_destroy__ = _tubeComputeTubeMeasuresPython.delete_tubeComputeTubeMeasuresD2
    cast = _swig_new_static_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD2_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTubeMeasuresD2

        Create a new object of the class tubeComputeTubeMeasuresD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTubeMeasuresD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTubeMeasuresD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTubeMeasuresD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTubeMeasuresD2 in _tubeComputeTubeMeasuresPython:
_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD2_swigregister(tubeComputeTubeMeasuresD2)
tubeComputeTubeMeasuresD2___New_orig__ = _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD2___New_orig__
tubeComputeTubeMeasuresD2_cast = _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD2_cast


def tubeComputeTubeMeasuresD3_New():
    return tubeComputeTubeMeasuresD3.New()

class tubeComputeTubeMeasuresD3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTubeMeasuresD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD3___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD3_Clone)
    SetScale = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD3_SetScale)
    GetScale = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD3_GetScale)
    SetInputImage = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD3_SetInputImage)
    GetInputImage = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD3_GetInputImage)
    GetRidgeness = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD3_GetRidgeness)
    GetRoundness = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD3_GetRoundness)
    GetCurvature = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD3_GetCurvature)
    GetLevelness = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD3_GetLevelness)
    __swig_destroy__ = _tubeComputeTubeMeasuresPython.delete_tubeComputeTubeMeasuresD3
    cast = _swig_new_static_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD3_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTubeMeasuresD3

        Create a new object of the class tubeComputeTubeMeasuresD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTubeMeasuresD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTubeMeasuresD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTubeMeasuresD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTubeMeasuresD3 in _tubeComputeTubeMeasuresPython:
_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD3_swigregister(tubeComputeTubeMeasuresD3)
tubeComputeTubeMeasuresD3___New_orig__ = _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD3___New_orig__
tubeComputeTubeMeasuresD3_cast = _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD3_cast


def tubeComputeTubeMeasuresF2_New():
    return tubeComputeTubeMeasuresF2.New()

class tubeComputeTubeMeasuresF2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTubeMeasuresF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF2___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF2_Clone)
    SetScale = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF2_SetScale)
    GetScale = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF2_GetScale)
    SetInputImage = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF2_SetInputImage)
    GetInputImage = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF2_GetInputImage)
    GetRidgeness = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF2_GetRidgeness)
    GetRoundness = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF2_GetRoundness)
    GetCurvature = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF2_GetCurvature)
    GetLevelness = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF2_GetLevelness)
    __swig_destroy__ = _tubeComputeTubeMeasuresPython.delete_tubeComputeTubeMeasuresF2
    cast = _swig_new_static_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF2_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTubeMeasuresF2

        Create a new object of the class tubeComputeTubeMeasuresF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTubeMeasuresF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTubeMeasuresF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTubeMeasuresF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTubeMeasuresF2 in _tubeComputeTubeMeasuresPython:
_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF2_swigregister(tubeComputeTubeMeasuresF2)
tubeComputeTubeMeasuresF2___New_orig__ = _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF2___New_orig__
tubeComputeTubeMeasuresF2_cast = _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF2_cast


def tubeComputeTubeMeasuresF3_New():
    return tubeComputeTubeMeasuresF3.New()

class tubeComputeTubeMeasuresF3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTubeMeasuresF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF3___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF3_Clone)
    SetScale = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF3_SetScale)
    GetScale = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF3_GetScale)
    SetInputImage = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF3_SetInputImage)
    GetInputImage = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF3_GetInputImage)
    GetRidgeness = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF3_GetRidgeness)
    GetRoundness = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF3_GetRoundness)
    GetCurvature = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF3_GetCurvature)
    GetLevelness = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF3_GetLevelness)
    __swig_destroy__ = _tubeComputeTubeMeasuresPython.delete_tubeComputeTubeMeasuresF3
    cast = _swig_new_static_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF3_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTubeMeasuresF3

        Create a new object of the class tubeComputeTubeMeasuresF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTubeMeasuresF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTubeMeasuresF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTubeMeasuresF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTubeMeasuresF3 in _tubeComputeTubeMeasuresPython:
_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF3_swigregister(tubeComputeTubeMeasuresF3)
tubeComputeTubeMeasuresF3___New_orig__ = _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF3___New_orig__
tubeComputeTubeMeasuresF3_cast = _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF3_cast


def tubeComputeTubeMeasuresSS2_New():
    return tubeComputeTubeMeasuresSS2.New()

class tubeComputeTubeMeasuresSS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTubeMeasuresSS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS2___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS2_Clone)
    SetScale = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS2_SetScale)
    GetScale = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS2_GetScale)
    SetInputImage = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS2_SetInputImage)
    GetInputImage = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS2_GetInputImage)
    GetRidgeness = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS2_GetRidgeness)
    GetRoundness = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS2_GetRoundness)
    GetCurvature = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS2_GetCurvature)
    GetLevelness = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS2_GetLevelness)
    __swig_destroy__ = _tubeComputeTubeMeasuresPython.delete_tubeComputeTubeMeasuresSS2
    cast = _swig_new_static_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS2_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTubeMeasuresSS2

        Create a new object of the class tubeComputeTubeMeasuresSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTubeMeasuresSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTubeMeasuresSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTubeMeasuresSS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTubeMeasuresSS2 in _tubeComputeTubeMeasuresPython:
_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS2_swigregister(tubeComputeTubeMeasuresSS2)
tubeComputeTubeMeasuresSS2___New_orig__ = _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS2___New_orig__
tubeComputeTubeMeasuresSS2_cast = _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS2_cast


def tubeComputeTubeMeasuresSS3_New():
    return tubeComputeTubeMeasuresSS3.New()

class tubeComputeTubeMeasuresSS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTubeMeasuresSS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS3___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS3_Clone)
    SetScale = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS3_SetScale)
    GetScale = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS3_GetScale)
    SetInputImage = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS3_SetInputImage)
    GetInputImage = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS3_GetInputImage)
    GetRidgeness = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS3_GetRidgeness)
    GetRoundness = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS3_GetRoundness)
    GetCurvature = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS3_GetCurvature)
    GetLevelness = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS3_GetLevelness)
    __swig_destroy__ = _tubeComputeTubeMeasuresPython.delete_tubeComputeTubeMeasuresSS3
    cast = _swig_new_static_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS3_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTubeMeasuresSS3

        Create a new object of the class tubeComputeTubeMeasuresSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTubeMeasuresSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTubeMeasuresSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTubeMeasuresSS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTubeMeasuresSS3 in _tubeComputeTubeMeasuresPython:
_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS3_swigregister(tubeComputeTubeMeasuresSS3)
tubeComputeTubeMeasuresSS3___New_orig__ = _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS3___New_orig__
tubeComputeTubeMeasuresSS3_cast = _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS3_cast


def tubeComputeTubeMeasuresUC2_New():
    return tubeComputeTubeMeasuresUC2.New()

class tubeComputeTubeMeasuresUC2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTubeMeasuresUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC2___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC2_Clone)
    SetScale = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC2_SetScale)
    GetScale = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC2_GetScale)
    SetInputImage = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC2_SetInputImage)
    GetInputImage = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC2_GetInputImage)
    GetRidgeness = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC2_GetRidgeness)
    GetRoundness = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC2_GetRoundness)
    GetCurvature = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC2_GetCurvature)
    GetLevelness = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC2_GetLevelness)
    __swig_destroy__ = _tubeComputeTubeMeasuresPython.delete_tubeComputeTubeMeasuresUC2
    cast = _swig_new_static_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC2_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTubeMeasuresUC2

        Create a new object of the class tubeComputeTubeMeasuresUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTubeMeasuresUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTubeMeasuresUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTubeMeasuresUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTubeMeasuresUC2 in _tubeComputeTubeMeasuresPython:
_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC2_swigregister(tubeComputeTubeMeasuresUC2)
tubeComputeTubeMeasuresUC2___New_orig__ = _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC2___New_orig__
tubeComputeTubeMeasuresUC2_cast = _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC2_cast


def tubeComputeTubeMeasuresUC3_New():
    return tubeComputeTubeMeasuresUC3.New()

class tubeComputeTubeMeasuresUC3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTubeMeasuresUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC3___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC3_Clone)
    SetScale = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC3_SetScale)
    GetScale = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC3_GetScale)
    SetInputImage = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC3_SetInputImage)
    GetInputImage = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC3_GetInputImage)
    GetRidgeness = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC3_GetRidgeness)
    GetRoundness = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC3_GetRoundness)
    GetCurvature = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC3_GetCurvature)
    GetLevelness = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC3_GetLevelness)
    __swig_destroy__ = _tubeComputeTubeMeasuresPython.delete_tubeComputeTubeMeasuresUC3
    cast = _swig_new_static_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC3_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTubeMeasuresUC3

        Create a new object of the class tubeComputeTubeMeasuresUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTubeMeasuresUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTubeMeasuresUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTubeMeasuresUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTubeMeasuresUC3 in _tubeComputeTubeMeasuresPython:
_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC3_swigregister(tubeComputeTubeMeasuresUC3)
tubeComputeTubeMeasuresUC3___New_orig__ = _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC3___New_orig__
tubeComputeTubeMeasuresUC3_cast = _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC3_cast


def tubeComputeTubeMeasuresUS2_New():
    return tubeComputeTubeMeasuresUS2.New()

class tubeComputeTubeMeasuresUS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTubeMeasuresUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS2___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS2_Clone)
    SetScale = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS2_SetScale)
    GetScale = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS2_GetScale)
    SetInputImage = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS2_SetInputImage)
    GetInputImage = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS2_GetInputImage)
    GetRidgeness = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS2_GetRidgeness)
    GetRoundness = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS2_GetRoundness)
    GetCurvature = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS2_GetCurvature)
    GetLevelness = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS2_GetLevelness)
    __swig_destroy__ = _tubeComputeTubeMeasuresPython.delete_tubeComputeTubeMeasuresUS2
    cast = _swig_new_static_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS2_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTubeMeasuresUS2

        Create a new object of the class tubeComputeTubeMeasuresUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTubeMeasuresUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTubeMeasuresUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTubeMeasuresUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTubeMeasuresUS2 in _tubeComputeTubeMeasuresPython:
_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS2_swigregister(tubeComputeTubeMeasuresUS2)
tubeComputeTubeMeasuresUS2___New_orig__ = _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS2___New_orig__
tubeComputeTubeMeasuresUS2_cast = _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS2_cast


def tubeComputeTubeMeasuresUS3_New():
    return tubeComputeTubeMeasuresUS3.New()

class tubeComputeTubeMeasuresUS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTubeMeasuresUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS3___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS3_Clone)
    SetScale = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS3_SetScale)
    GetScale = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS3_GetScale)
    SetInputImage = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS3_SetInputImage)
    GetInputImage = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS3_GetInputImage)
    GetRidgeness = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS3_GetRidgeness)
    GetRoundness = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS3_GetRoundness)
    GetCurvature = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS3_GetCurvature)
    GetLevelness = _swig_new_instance_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS3_GetLevelness)
    __swig_destroy__ = _tubeComputeTubeMeasuresPython.delete_tubeComputeTubeMeasuresUS3
    cast = _swig_new_static_method(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS3_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTubeMeasuresUS3

        Create a new object of the class tubeComputeTubeMeasuresUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTubeMeasuresUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTubeMeasuresUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTubeMeasuresUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTubeMeasuresUS3 in _tubeComputeTubeMeasuresPython:
_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS3_swigregister(tubeComputeTubeMeasuresUS3)
tubeComputeTubeMeasuresUS3___New_orig__ = _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS3___New_orig__
tubeComputeTubeMeasuresUS3_cast = _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def compute_tube_measures(*args, **kwargs):
    """Procedural interface for ComputeTubeMeasures"""
    import itk
    instance = itk.ComputeTubeMeasures.New(*args, **kwargs)
    return instance.__internal_call__()

def compute_tube_measures_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ComputeTubeMeasures, itkTemplate.itkTemplate):
        filter_object = itk.ComputeTubeMeasures.values()[0]
    else:
        filter_object = itk.ComputeTubeMeasures

    compute_tube_measures.__doc__ = filter_object.__doc__
    compute_tube_measures.__doc__ += "\n Args are Input(s) to the filter.\n"
    compute_tube_measures.__doc__ += "Available Keyword Arguments:\n"
    compute_tube_measures.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



