# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _TubeTKPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _tubeEnhanceTubesUsingDiffusionPython
else:
    import _tubeEnhanceTubesUsingDiffusionPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _tubeEnhanceTubesUsingDiffusionPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _tubeEnhanceTubesUsingDiffusionPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkPointPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython

def tubeEnhanceTubesUsingDiffusionD2_New():
    return tubeEnhanceTubesUsingDiffusionD2.New()

class tubeEnhanceTubesUsingDiffusionD2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiffusionD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_Clone)
    SetMinSigma = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_SetMinSigma)
    GetMinSigma = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_GetMinSigma)
    SetMaxSigma = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_SetMaxSigma)
    GetMaxSigma = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_GetMaxSigma)
    SetNumSigmaSteps = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_SetNumSigmaSteps)
    GetNumSigmaSteps = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_GetNumSigmaSteps)
    SetRecalculateTubeness = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_SetRecalculateTubeness)
    GetRecalculateTubeness = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_GetRecalculateTubeness)
    SetBeta = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_SetBeta)
    GetBeta = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_GetBeta)
    SetGamma = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_SetGamma)
    GetGamma = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_GetGamma)
    SetEpsilon = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_SetEpsilon)
    GetEpsilon = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_GetEpsilon)
    SetOmega = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_SetOmega)
    GetOmega = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_GetOmega)
    SetSensitivity = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_SetSensitivity)
    GetSensitivity = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_GetSensitivity)
    SetTimeStep = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_SetTimeStep)
    GetTimeStep = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_GetTimeStep)
    SetIterations = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_SetIterations)
    GetIterations = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_GetIterations)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_SetInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_GetInput)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_GetOutput)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiffusionPython.delete_tubeEnhanceTubesUsingDiffusionD2
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiffusionD2

        Create a new object of the class tubeEnhanceTubesUsingDiffusionD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiffusionD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiffusionD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiffusionD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiffusionD2 in _tubeEnhanceTubesUsingDiffusionPython:
_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_swigregister(tubeEnhanceTubesUsingDiffusionD2)
tubeEnhanceTubesUsingDiffusionD2___New_orig__ = _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2___New_orig__
tubeEnhanceTubesUsingDiffusionD2_cast = _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_cast


def tubeEnhanceTubesUsingDiffusionF2_New():
    return tubeEnhanceTubesUsingDiffusionF2.New()

class tubeEnhanceTubesUsingDiffusionF2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiffusionF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_Clone)
    SetMinSigma = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_SetMinSigma)
    GetMinSigma = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_GetMinSigma)
    SetMaxSigma = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_SetMaxSigma)
    GetMaxSigma = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_GetMaxSigma)
    SetNumSigmaSteps = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_SetNumSigmaSteps)
    GetNumSigmaSteps = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_GetNumSigmaSteps)
    SetRecalculateTubeness = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_SetRecalculateTubeness)
    GetRecalculateTubeness = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_GetRecalculateTubeness)
    SetBeta = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_SetBeta)
    GetBeta = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_GetBeta)
    SetGamma = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_SetGamma)
    GetGamma = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_GetGamma)
    SetEpsilon = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_SetEpsilon)
    GetEpsilon = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_GetEpsilon)
    SetOmega = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_SetOmega)
    GetOmega = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_GetOmega)
    SetSensitivity = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_SetSensitivity)
    GetSensitivity = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_GetSensitivity)
    SetTimeStep = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_SetTimeStep)
    GetTimeStep = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_GetTimeStep)
    SetIterations = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_SetIterations)
    GetIterations = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_GetIterations)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_SetInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_GetInput)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_GetOutput)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiffusionPython.delete_tubeEnhanceTubesUsingDiffusionF2
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiffusionF2

        Create a new object of the class tubeEnhanceTubesUsingDiffusionF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiffusionF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiffusionF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiffusionF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiffusionF2 in _tubeEnhanceTubesUsingDiffusionPython:
_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_swigregister(tubeEnhanceTubesUsingDiffusionF2)
tubeEnhanceTubesUsingDiffusionF2___New_orig__ = _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2___New_orig__
tubeEnhanceTubesUsingDiffusionF2_cast = _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_cast


def tubeEnhanceTubesUsingDiffusionSS2_New():
    return tubeEnhanceTubesUsingDiffusionSS2.New()

class tubeEnhanceTubesUsingDiffusionSS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiffusionSS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_Clone)
    SetMinSigma = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_SetMinSigma)
    GetMinSigma = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_GetMinSigma)
    SetMaxSigma = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_SetMaxSigma)
    GetMaxSigma = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_GetMaxSigma)
    SetNumSigmaSteps = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_SetNumSigmaSteps)
    GetNumSigmaSteps = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_GetNumSigmaSteps)
    SetRecalculateTubeness = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_SetRecalculateTubeness)
    GetRecalculateTubeness = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_GetRecalculateTubeness)
    SetBeta = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_SetBeta)
    GetBeta = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_GetBeta)
    SetGamma = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_SetGamma)
    GetGamma = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_GetGamma)
    SetEpsilon = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_SetEpsilon)
    GetEpsilon = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_GetEpsilon)
    SetOmega = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_SetOmega)
    GetOmega = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_GetOmega)
    SetSensitivity = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_SetSensitivity)
    GetSensitivity = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_GetSensitivity)
    SetTimeStep = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_SetTimeStep)
    GetTimeStep = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_GetTimeStep)
    SetIterations = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_SetIterations)
    GetIterations = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_GetIterations)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_SetInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_GetInput)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_GetOutput)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiffusionPython.delete_tubeEnhanceTubesUsingDiffusionSS2
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiffusionSS2

        Create a new object of the class tubeEnhanceTubesUsingDiffusionSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiffusionSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiffusionSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiffusionSS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiffusionSS2 in _tubeEnhanceTubesUsingDiffusionPython:
_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_swigregister(tubeEnhanceTubesUsingDiffusionSS2)
tubeEnhanceTubesUsingDiffusionSS2___New_orig__ = _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2___New_orig__
tubeEnhanceTubesUsingDiffusionSS2_cast = _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_cast


def tubeEnhanceTubesUsingDiffusionUC2_New():
    return tubeEnhanceTubesUsingDiffusionUC2.New()

class tubeEnhanceTubesUsingDiffusionUC2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiffusionUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_Clone)
    SetMinSigma = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_SetMinSigma)
    GetMinSigma = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_GetMinSigma)
    SetMaxSigma = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_SetMaxSigma)
    GetMaxSigma = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_GetMaxSigma)
    SetNumSigmaSteps = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_SetNumSigmaSteps)
    GetNumSigmaSteps = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_GetNumSigmaSteps)
    SetRecalculateTubeness = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_SetRecalculateTubeness)
    GetRecalculateTubeness = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_GetRecalculateTubeness)
    SetBeta = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_SetBeta)
    GetBeta = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_GetBeta)
    SetGamma = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_SetGamma)
    GetGamma = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_GetGamma)
    SetEpsilon = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_SetEpsilon)
    GetEpsilon = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_GetEpsilon)
    SetOmega = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_SetOmega)
    GetOmega = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_GetOmega)
    SetSensitivity = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_SetSensitivity)
    GetSensitivity = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_GetSensitivity)
    SetTimeStep = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_SetTimeStep)
    GetTimeStep = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_GetTimeStep)
    SetIterations = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_SetIterations)
    GetIterations = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_GetIterations)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_SetInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_GetInput)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_GetOutput)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiffusionPython.delete_tubeEnhanceTubesUsingDiffusionUC2
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiffusionUC2

        Create a new object of the class tubeEnhanceTubesUsingDiffusionUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiffusionUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiffusionUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiffusionUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiffusionUC2 in _tubeEnhanceTubesUsingDiffusionPython:
_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_swigregister(tubeEnhanceTubesUsingDiffusionUC2)
tubeEnhanceTubesUsingDiffusionUC2___New_orig__ = _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2___New_orig__
tubeEnhanceTubesUsingDiffusionUC2_cast = _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_cast


def tubeEnhanceTubesUsingDiffusionUS2_New():
    return tubeEnhanceTubesUsingDiffusionUS2.New()

class tubeEnhanceTubesUsingDiffusionUS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiffusionUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2___New_orig__)
    Clone = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_Clone)
    SetMinSigma = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_SetMinSigma)
    GetMinSigma = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_GetMinSigma)
    SetMaxSigma = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_SetMaxSigma)
    GetMaxSigma = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_GetMaxSigma)
    SetNumSigmaSteps = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_SetNumSigmaSteps)
    GetNumSigmaSteps = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_GetNumSigmaSteps)
    SetRecalculateTubeness = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_SetRecalculateTubeness)
    GetRecalculateTubeness = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_GetRecalculateTubeness)
    SetBeta = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_SetBeta)
    GetBeta = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_GetBeta)
    SetGamma = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_SetGamma)
    GetGamma = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_GetGamma)
    SetEpsilon = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_SetEpsilon)
    GetEpsilon = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_GetEpsilon)
    SetOmega = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_SetOmega)
    GetOmega = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_GetOmega)
    SetSensitivity = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_SetSensitivity)
    GetSensitivity = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_GetSensitivity)
    SetTimeStep = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_SetTimeStep)
    GetTimeStep = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_GetTimeStep)
    SetIterations = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_SetIterations)
    GetIterations = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_GetIterations)
    SetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_SetInput)
    GetInput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_GetInput)
    GetOutput = _swig_new_instance_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_GetOutput)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiffusionPython.delete_tubeEnhanceTubesUsingDiffusionUS2
    cast = _swig_new_static_method(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiffusionUS2

        Create a new object of the class tubeEnhanceTubesUsingDiffusionUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiffusionUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiffusionUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiffusionUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiffusionUS2 in _tubeEnhanceTubesUsingDiffusionPython:
_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_swigregister(tubeEnhanceTubesUsingDiffusionUS2)
tubeEnhanceTubesUsingDiffusionUS2___New_orig__ = _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2___New_orig__
tubeEnhanceTubesUsingDiffusionUS2_cast = _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def enhance_tubes_using_diffusion(*args, **kwargs):
    """Procedural interface for EnhanceTubesUsingDiffusion"""
    import itk
    instance = itk.EnhanceTubesUsingDiffusion.New(*args, **kwargs)
    return instance.__internal_call__()

def enhance_tubes_using_diffusion_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.EnhanceTubesUsingDiffusion, itkTemplate.itkTemplate):
        filter_object = itk.EnhanceTubesUsingDiffusion.values()[0]
    else:
        filter_object = itk.EnhanceTubesUsingDiffusion

    enhance_tubes_using_diffusion.__doc__ = filter_object.__doc__
    enhance_tubes_using_diffusion.__doc__ += "\n Args are Input(s) to the filter.\n"
    enhance_tubes_using_diffusion.__doc__ += "Available Keyword Arguments:\n"
    enhance_tubes_using_diffusion.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



