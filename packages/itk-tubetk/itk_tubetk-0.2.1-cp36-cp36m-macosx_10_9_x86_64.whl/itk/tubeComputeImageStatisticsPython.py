# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _TubeTKPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _tubeComputeImageStatisticsPython
else:
    import _tubeComputeImageStatisticsPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _tubeComputeImageStatisticsPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _tubeComputeImageStatisticsPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkImagePython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython

def tubeComputeImageStatisticsD2_New():
    return tubeComputeImageStatisticsD2.New()

class tubeComputeImageStatisticsD2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeImageStatisticsD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_Clone)
    GetCompMean = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_GetCompMean)
    GetCompMin = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_GetCompMin)
    GetCompMax = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_GetCompMax)
    GetCompStdDev = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_GetCompStdDev)
    GetCompCount = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_GetCompCount)
    GetCompValue = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_GetCompValue)
    GetNumberOfComponents = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_GetNumberOfComponents)
    SetQuantiles = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_SetQuantiles)
    GetQuantiles = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_GetQuantiles)
    SetInputMask = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_SetInputMask)
    GetInputMask = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_GetInputMask)
    WriteCSVStatistics = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_WriteCSVStatistics)
    SetInput = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_SetInput)
    GetInput = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_GetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_GetOutput)
    __swig_destroy__ = _tubeComputeImageStatisticsPython.delete_tubeComputeImageStatisticsD2
    cast = _swig_new_static_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeImageStatisticsD2

        Create a new object of the class tubeComputeImageStatisticsD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageStatisticsD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeImageStatisticsD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeImageStatisticsD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeImageStatisticsD2 in _tubeComputeImageStatisticsPython:
_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_swigregister(tubeComputeImageStatisticsD2)
tubeComputeImageStatisticsD2___New_orig__ = _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2___New_orig__
tubeComputeImageStatisticsD2_cast = _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_cast


def tubeComputeImageStatisticsD3_New():
    return tubeComputeImageStatisticsD3.New()

class tubeComputeImageStatisticsD3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeImageStatisticsD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_Clone)
    GetCompMean = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_GetCompMean)
    GetCompMin = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_GetCompMin)
    GetCompMax = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_GetCompMax)
    GetCompStdDev = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_GetCompStdDev)
    GetCompCount = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_GetCompCount)
    GetCompValue = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_GetCompValue)
    GetNumberOfComponents = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_GetNumberOfComponents)
    SetQuantiles = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_SetQuantiles)
    GetQuantiles = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_GetQuantiles)
    SetInputMask = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_SetInputMask)
    GetInputMask = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_GetInputMask)
    WriteCSVStatistics = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_WriteCSVStatistics)
    SetInput = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_SetInput)
    GetInput = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_GetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_GetOutput)
    __swig_destroy__ = _tubeComputeImageStatisticsPython.delete_tubeComputeImageStatisticsD3
    cast = _swig_new_static_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeImageStatisticsD3

        Create a new object of the class tubeComputeImageStatisticsD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageStatisticsD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeImageStatisticsD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeImageStatisticsD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeImageStatisticsD3 in _tubeComputeImageStatisticsPython:
_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_swigregister(tubeComputeImageStatisticsD3)
tubeComputeImageStatisticsD3___New_orig__ = _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3___New_orig__
tubeComputeImageStatisticsD3_cast = _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_cast


def tubeComputeImageStatisticsF2_New():
    return tubeComputeImageStatisticsF2.New()

class tubeComputeImageStatisticsF2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeImageStatisticsF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_Clone)
    GetCompMean = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_GetCompMean)
    GetCompMin = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_GetCompMin)
    GetCompMax = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_GetCompMax)
    GetCompStdDev = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_GetCompStdDev)
    GetCompCount = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_GetCompCount)
    GetCompValue = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_GetCompValue)
    GetNumberOfComponents = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_GetNumberOfComponents)
    SetQuantiles = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_SetQuantiles)
    GetQuantiles = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_GetQuantiles)
    SetInputMask = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_SetInputMask)
    GetInputMask = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_GetInputMask)
    WriteCSVStatistics = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_WriteCSVStatistics)
    SetInput = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_SetInput)
    GetInput = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_GetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_GetOutput)
    __swig_destroy__ = _tubeComputeImageStatisticsPython.delete_tubeComputeImageStatisticsF2
    cast = _swig_new_static_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeImageStatisticsF2

        Create a new object of the class tubeComputeImageStatisticsF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageStatisticsF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeImageStatisticsF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeImageStatisticsF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeImageStatisticsF2 in _tubeComputeImageStatisticsPython:
_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_swigregister(tubeComputeImageStatisticsF2)
tubeComputeImageStatisticsF2___New_orig__ = _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2___New_orig__
tubeComputeImageStatisticsF2_cast = _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_cast


def tubeComputeImageStatisticsF3_New():
    return tubeComputeImageStatisticsF3.New()

class tubeComputeImageStatisticsF3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeImageStatisticsF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_Clone)
    GetCompMean = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_GetCompMean)
    GetCompMin = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_GetCompMin)
    GetCompMax = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_GetCompMax)
    GetCompStdDev = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_GetCompStdDev)
    GetCompCount = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_GetCompCount)
    GetCompValue = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_GetCompValue)
    GetNumberOfComponents = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_GetNumberOfComponents)
    SetQuantiles = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_SetQuantiles)
    GetQuantiles = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_GetQuantiles)
    SetInputMask = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_SetInputMask)
    GetInputMask = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_GetInputMask)
    WriteCSVStatistics = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_WriteCSVStatistics)
    SetInput = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_SetInput)
    GetInput = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_GetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_GetOutput)
    __swig_destroy__ = _tubeComputeImageStatisticsPython.delete_tubeComputeImageStatisticsF3
    cast = _swig_new_static_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeImageStatisticsF3

        Create a new object of the class tubeComputeImageStatisticsF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageStatisticsF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeImageStatisticsF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeImageStatisticsF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeImageStatisticsF3 in _tubeComputeImageStatisticsPython:
_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_swigregister(tubeComputeImageStatisticsF3)
tubeComputeImageStatisticsF3___New_orig__ = _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3___New_orig__
tubeComputeImageStatisticsF3_cast = _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_cast


def tubeComputeImageStatisticsSS2_New():
    return tubeComputeImageStatisticsSS2.New()

class tubeComputeImageStatisticsSS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeImageStatisticsSS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_Clone)
    GetCompMean = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_GetCompMean)
    GetCompMin = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_GetCompMin)
    GetCompMax = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_GetCompMax)
    GetCompStdDev = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_GetCompStdDev)
    GetCompCount = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_GetCompCount)
    GetCompValue = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_GetCompValue)
    GetNumberOfComponents = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_GetNumberOfComponents)
    SetQuantiles = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_SetQuantiles)
    GetQuantiles = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_GetQuantiles)
    SetInputMask = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_SetInputMask)
    GetInputMask = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_GetInputMask)
    WriteCSVStatistics = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_WriteCSVStatistics)
    SetInput = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_SetInput)
    GetInput = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_GetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_GetOutput)
    __swig_destroy__ = _tubeComputeImageStatisticsPython.delete_tubeComputeImageStatisticsSS2
    cast = _swig_new_static_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeImageStatisticsSS2

        Create a new object of the class tubeComputeImageStatisticsSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageStatisticsSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeImageStatisticsSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeImageStatisticsSS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeImageStatisticsSS2 in _tubeComputeImageStatisticsPython:
_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_swigregister(tubeComputeImageStatisticsSS2)
tubeComputeImageStatisticsSS2___New_orig__ = _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2___New_orig__
tubeComputeImageStatisticsSS2_cast = _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_cast


def tubeComputeImageStatisticsSS3_New():
    return tubeComputeImageStatisticsSS3.New()

class tubeComputeImageStatisticsSS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeImageStatisticsSS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_Clone)
    GetCompMean = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_GetCompMean)
    GetCompMin = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_GetCompMin)
    GetCompMax = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_GetCompMax)
    GetCompStdDev = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_GetCompStdDev)
    GetCompCount = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_GetCompCount)
    GetCompValue = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_GetCompValue)
    GetNumberOfComponents = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_GetNumberOfComponents)
    SetQuantiles = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_SetQuantiles)
    GetQuantiles = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_GetQuantiles)
    SetInputMask = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_SetInputMask)
    GetInputMask = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_GetInputMask)
    WriteCSVStatistics = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_WriteCSVStatistics)
    SetInput = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_SetInput)
    GetInput = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_GetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_GetOutput)
    __swig_destroy__ = _tubeComputeImageStatisticsPython.delete_tubeComputeImageStatisticsSS3
    cast = _swig_new_static_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeImageStatisticsSS3

        Create a new object of the class tubeComputeImageStatisticsSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageStatisticsSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeImageStatisticsSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeImageStatisticsSS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeImageStatisticsSS3 in _tubeComputeImageStatisticsPython:
_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_swigregister(tubeComputeImageStatisticsSS3)
tubeComputeImageStatisticsSS3___New_orig__ = _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3___New_orig__
tubeComputeImageStatisticsSS3_cast = _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_cast


def tubeComputeImageStatisticsUC2_New():
    return tubeComputeImageStatisticsUC2.New()

class tubeComputeImageStatisticsUC2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeImageStatisticsUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_Clone)
    GetCompMean = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_GetCompMean)
    GetCompMin = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_GetCompMin)
    GetCompMax = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_GetCompMax)
    GetCompStdDev = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_GetCompStdDev)
    GetCompCount = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_GetCompCount)
    GetCompValue = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_GetCompValue)
    GetNumberOfComponents = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_GetNumberOfComponents)
    SetQuantiles = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_SetQuantiles)
    GetQuantiles = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_GetQuantiles)
    SetInputMask = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_SetInputMask)
    GetInputMask = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_GetInputMask)
    WriteCSVStatistics = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_WriteCSVStatistics)
    SetInput = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_SetInput)
    GetInput = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_GetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_GetOutput)
    __swig_destroy__ = _tubeComputeImageStatisticsPython.delete_tubeComputeImageStatisticsUC2
    cast = _swig_new_static_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeImageStatisticsUC2

        Create a new object of the class tubeComputeImageStatisticsUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageStatisticsUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeImageStatisticsUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeImageStatisticsUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeImageStatisticsUC2 in _tubeComputeImageStatisticsPython:
_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_swigregister(tubeComputeImageStatisticsUC2)
tubeComputeImageStatisticsUC2___New_orig__ = _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2___New_orig__
tubeComputeImageStatisticsUC2_cast = _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_cast


def tubeComputeImageStatisticsUC3_New():
    return tubeComputeImageStatisticsUC3.New()

class tubeComputeImageStatisticsUC3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeImageStatisticsUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_Clone)
    GetCompMean = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_GetCompMean)
    GetCompMin = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_GetCompMin)
    GetCompMax = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_GetCompMax)
    GetCompStdDev = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_GetCompStdDev)
    GetCompCount = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_GetCompCount)
    GetCompValue = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_GetCompValue)
    GetNumberOfComponents = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_GetNumberOfComponents)
    SetQuantiles = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_SetQuantiles)
    GetQuantiles = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_GetQuantiles)
    SetInputMask = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_SetInputMask)
    GetInputMask = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_GetInputMask)
    WriteCSVStatistics = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_WriteCSVStatistics)
    SetInput = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_SetInput)
    GetInput = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_GetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_GetOutput)
    __swig_destroy__ = _tubeComputeImageStatisticsPython.delete_tubeComputeImageStatisticsUC3
    cast = _swig_new_static_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeImageStatisticsUC3

        Create a new object of the class tubeComputeImageStatisticsUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageStatisticsUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeImageStatisticsUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeImageStatisticsUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeImageStatisticsUC3 in _tubeComputeImageStatisticsPython:
_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_swigregister(tubeComputeImageStatisticsUC3)
tubeComputeImageStatisticsUC3___New_orig__ = _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3___New_orig__
tubeComputeImageStatisticsUC3_cast = _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_cast


def tubeComputeImageStatisticsUS2_New():
    return tubeComputeImageStatisticsUS2.New()

class tubeComputeImageStatisticsUS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeImageStatisticsUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_Clone)
    GetCompMean = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_GetCompMean)
    GetCompMin = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_GetCompMin)
    GetCompMax = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_GetCompMax)
    GetCompStdDev = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_GetCompStdDev)
    GetCompCount = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_GetCompCount)
    GetCompValue = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_GetCompValue)
    GetNumberOfComponents = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_GetNumberOfComponents)
    SetQuantiles = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_SetQuantiles)
    GetQuantiles = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_GetQuantiles)
    SetInputMask = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_SetInputMask)
    GetInputMask = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_GetInputMask)
    WriteCSVStatistics = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_WriteCSVStatistics)
    SetInput = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_SetInput)
    GetInput = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_GetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_GetOutput)
    __swig_destroy__ = _tubeComputeImageStatisticsPython.delete_tubeComputeImageStatisticsUS2
    cast = _swig_new_static_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeImageStatisticsUS2

        Create a new object of the class tubeComputeImageStatisticsUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageStatisticsUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeImageStatisticsUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeImageStatisticsUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeImageStatisticsUS2 in _tubeComputeImageStatisticsPython:
_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_swigregister(tubeComputeImageStatisticsUS2)
tubeComputeImageStatisticsUS2___New_orig__ = _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2___New_orig__
tubeComputeImageStatisticsUS2_cast = _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_cast


def tubeComputeImageStatisticsUS3_New():
    return tubeComputeImageStatisticsUS3.New()

class tubeComputeImageStatisticsUS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeImageStatisticsUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3___New_orig__)
    Clone = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_Clone)
    GetCompMean = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_GetCompMean)
    GetCompMin = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_GetCompMin)
    GetCompMax = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_GetCompMax)
    GetCompStdDev = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_GetCompStdDev)
    GetCompCount = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_GetCompCount)
    GetCompValue = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_GetCompValue)
    GetNumberOfComponents = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_GetNumberOfComponents)
    SetQuantiles = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_SetQuantiles)
    GetQuantiles = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_GetQuantiles)
    SetInputMask = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_SetInputMask)
    GetInputMask = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_GetInputMask)
    WriteCSVStatistics = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_WriteCSVStatistics)
    SetInput = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_SetInput)
    GetInput = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_GetInput)
    GetOutput = _swig_new_instance_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_GetOutput)
    __swig_destroy__ = _tubeComputeImageStatisticsPython.delete_tubeComputeImageStatisticsUS3
    cast = _swig_new_static_method(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_cast)

    def New(*args, **kargs):
        """New() -> tubeComputeImageStatisticsUS3

        Create a new object of the class tubeComputeImageStatisticsUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageStatisticsUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeImageStatisticsUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeImageStatisticsUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeImageStatisticsUS3 in _tubeComputeImageStatisticsPython:
_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_swigregister(tubeComputeImageStatisticsUS3)
tubeComputeImageStatisticsUS3___New_orig__ = _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3___New_orig__
tubeComputeImageStatisticsUS3_cast = _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def compute_image_statistics(*args, **kwargs):
    """Procedural interface for ComputeImageStatistics"""
    import itk
    instance = itk.ComputeImageStatistics.New(*args, **kwargs)
    return instance.__internal_call__()

def compute_image_statistics_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ComputeImageStatistics, itkTemplate.itkTemplate):
        filter_object = itk.ComputeImageStatistics.values()[0]
    else:
        filter_object = itk.ComputeImageStatistics

    compute_image_statistics.__doc__ = filter_object.__doc__
    compute_image_statistics.__doc__ += "\n Args are Input(s) to the filter.\n"
    compute_image_statistics.__doc__ += "Available Keyword Arguments:\n"
    compute_image_statistics.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



