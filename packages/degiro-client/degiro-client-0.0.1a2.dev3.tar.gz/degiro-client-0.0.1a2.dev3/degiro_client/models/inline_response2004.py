# coding: utf-8

"""
    Unofficial Degiro API

    Unofficial Degiro API  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: maximdeclercq00@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from degiro_client.models.inline_response2004_products import InlineResponse2004Products  # noqa: F401,E501

class InlineResponse2004(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'offset': 'int',
        'products': 'list[InlineResponse2004Products]'
    }

    attribute_map = {
        'offset': 'offset',
        'products': 'products'
    }

    def __init__(self, offset=None, products=None):  # noqa: E501
        """InlineResponse2004 - a model defined in Swagger"""  # noqa: E501
        self._offset = None
        self._products = None
        self.discriminator = None
        if offset is not None:
            self.offset = offset
        if products is not None:
            self.products = products

    @property
    def offset(self):
        """Gets the offset of this InlineResponse2004.  # noqa: E501


        :return: The offset of this InlineResponse2004.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this InlineResponse2004.


        :param offset: The offset of this InlineResponse2004.  # noqa: E501
        :type: int
        """

        self._offset = offset

    @property
    def products(self):
        """Gets the products of this InlineResponse2004.  # noqa: E501


        :return: The products of this InlineResponse2004.  # noqa: E501
        :rtype: list[InlineResponse2004Products]
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this InlineResponse2004.


        :param products: The products of this InlineResponse2004.  # noqa: E501
        :type: list[InlineResponse2004Products]
        """

        self._products = products

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2004, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2004):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
