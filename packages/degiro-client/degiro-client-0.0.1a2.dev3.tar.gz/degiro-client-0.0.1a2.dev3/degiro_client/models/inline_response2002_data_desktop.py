# coding: utf-8

"""
    Unofficial Degiro API

    Unofficial Degiro API  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: maximdeclercq00@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2002DataDesktop(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'has_seen_product_tour': 'bool',
        'is_account_summary_opened': 'bool',
        'transactions_table_size': 'int',
        'has_closed_invitation_promotion': 'bool'
    }

    attribute_map = {
        'has_seen_product_tour': 'hasSeenProductTour',
        'is_account_summary_opened': 'isAccountSummaryOpened',
        'transactions_table_size': 'transactionsTableSize',
        'has_closed_invitation_promotion': 'hasClosedInvitationPromotion'
    }

    def __init__(self, has_seen_product_tour=None, is_account_summary_opened=None, transactions_table_size=None, has_closed_invitation_promotion=None):  # noqa: E501
        """InlineResponse2002DataDesktop - a model defined in Swagger"""  # noqa: E501
        self._has_seen_product_tour = None
        self._is_account_summary_opened = None
        self._transactions_table_size = None
        self._has_closed_invitation_promotion = None
        self.discriminator = None
        if has_seen_product_tour is not None:
            self.has_seen_product_tour = has_seen_product_tour
        if is_account_summary_opened is not None:
            self.is_account_summary_opened = is_account_summary_opened
        if transactions_table_size is not None:
            self.transactions_table_size = transactions_table_size
        if has_closed_invitation_promotion is not None:
            self.has_closed_invitation_promotion = has_closed_invitation_promotion

    @property
    def has_seen_product_tour(self):
        """Gets the has_seen_product_tour of this InlineResponse2002DataDesktop.  # noqa: E501


        :return: The has_seen_product_tour of this InlineResponse2002DataDesktop.  # noqa: E501
        :rtype: bool
        """
        return self._has_seen_product_tour

    @has_seen_product_tour.setter
    def has_seen_product_tour(self, has_seen_product_tour):
        """Sets the has_seen_product_tour of this InlineResponse2002DataDesktop.


        :param has_seen_product_tour: The has_seen_product_tour of this InlineResponse2002DataDesktop.  # noqa: E501
        :type: bool
        """

        self._has_seen_product_tour = has_seen_product_tour

    @property
    def is_account_summary_opened(self):
        """Gets the is_account_summary_opened of this InlineResponse2002DataDesktop.  # noqa: E501


        :return: The is_account_summary_opened of this InlineResponse2002DataDesktop.  # noqa: E501
        :rtype: bool
        """
        return self._is_account_summary_opened

    @is_account_summary_opened.setter
    def is_account_summary_opened(self, is_account_summary_opened):
        """Sets the is_account_summary_opened of this InlineResponse2002DataDesktop.


        :param is_account_summary_opened: The is_account_summary_opened of this InlineResponse2002DataDesktop.  # noqa: E501
        :type: bool
        """

        self._is_account_summary_opened = is_account_summary_opened

    @property
    def transactions_table_size(self):
        """Gets the transactions_table_size of this InlineResponse2002DataDesktop.  # noqa: E501


        :return: The transactions_table_size of this InlineResponse2002DataDesktop.  # noqa: E501
        :rtype: int
        """
        return self._transactions_table_size

    @transactions_table_size.setter
    def transactions_table_size(self, transactions_table_size):
        """Sets the transactions_table_size of this InlineResponse2002DataDesktop.


        :param transactions_table_size: The transactions_table_size of this InlineResponse2002DataDesktop.  # noqa: E501
        :type: int
        """

        self._transactions_table_size = transactions_table_size

    @property
    def has_closed_invitation_promotion(self):
        """Gets the has_closed_invitation_promotion of this InlineResponse2002DataDesktop.  # noqa: E501


        :return: The has_closed_invitation_promotion of this InlineResponse2002DataDesktop.  # noqa: E501
        :rtype: bool
        """
        return self._has_closed_invitation_promotion

    @has_closed_invitation_promotion.setter
    def has_closed_invitation_promotion(self, has_closed_invitation_promotion):
        """Sets the has_closed_invitation_promotion of this InlineResponse2002DataDesktop.


        :param has_closed_invitation_promotion: The has_closed_invitation_promotion of this InlineResponse2002DataDesktop.  # noqa: E501
        :type: bool
        """

        self._has_closed_invitation_promotion = has_closed_invitation_promotion

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2002DataDesktop, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2002DataDesktop):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
