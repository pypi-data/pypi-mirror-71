# coding: utf-8

"""
    Unofficial Degiro API

    Unofficial Degiro API  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: maximdeclercq00@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrderRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'buy_sell': 'str',
        'order_type': 'int',
        'product_id': 'str',
        'time_type': 'int',
        'size': 'int',
        'price': 'float'
    }

    attribute_map = {
        'buy_sell': 'buySell',
        'order_type': 'orderType',
        'product_id': 'productId',
        'time_type': 'timeType',
        'size': 'size',
        'price': 'price'
    }

    def __init__(self, buy_sell=None, order_type=None, product_id=None, time_type=None, size=None, price=None):  # noqa: E501
        """OrderRequest - a model defined in Swagger"""  # noqa: E501
        self._buy_sell = None
        self._order_type = None
        self._product_id = None
        self._time_type = None
        self._size = None
        self._price = None
        self.discriminator = None
        if buy_sell is not None:
            self.buy_sell = buy_sell
        if order_type is not None:
            self.order_type = order_type
        if product_id is not None:
            self.product_id = product_id
        if time_type is not None:
            self.time_type = time_type
        if size is not None:
            self.size = size
        if price is not None:
            self.price = price

    @property
    def buy_sell(self):
        """Gets the buy_sell of this OrderRequest.  # noqa: E501


        :return: The buy_sell of this OrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._buy_sell

    @buy_sell.setter
    def buy_sell(self, buy_sell):
        """Sets the buy_sell of this OrderRequest.


        :param buy_sell: The buy_sell of this OrderRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["BUY", "SELL"]  # noqa: E501
        if buy_sell not in allowed_values:
            raise ValueError(
                "Invalid value for `buy_sell` ({0}), must be one of {1}"  # noqa: E501
                .format(buy_sell, allowed_values)
            )

        self._buy_sell = buy_sell

    @property
    def order_type(self):
        """Gets the order_type of this OrderRequest.  # noqa: E501

        Order type:  * `0` - Limit Order  * `1` - Market Order  * `2` - Stoploss  * `3` - Stoplimit Order   # noqa: E501

        :return: The order_type of this OrderRequest.  # noqa: E501
        :rtype: int
        """
        return self._order_type

    @order_type.setter
    def order_type(self, order_type):
        """Sets the order_type of this OrderRequest.

        Order type:  * `0` - Limit Order  * `1` - Market Order  * `2` - Stoploss  * `3` - Stoplimit Order   # noqa: E501

        :param order_type: The order_type of this OrderRequest.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3]  # noqa: E501
        if order_type not in allowed_values:
            raise ValueError(
                "Invalid value for `order_type` ({0}), must be one of {1}"  # noqa: E501
                .format(order_type, allowed_values)
            )

        self._order_type = order_type

    @property
    def product_id(self):
        """Gets the product_id of this OrderRequest.  # noqa: E501

        Product identifier  # noqa: E501

        :return: The product_id of this OrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this OrderRequest.

        Product identifier  # noqa: E501

        :param product_id: The product_id of this OrderRequest.  # noqa: E501
        :type: str
        """

        self._product_id = product_id

    @property
    def time_type(self):
        """Gets the time_type of this OrderRequest.  # noqa: E501

        Time type:   * `1` - Day Order   * `3` - Permanent Order   # noqa: E501

        :return: The time_type of this OrderRequest.  # noqa: E501
        :rtype: int
        """
        return self._time_type

    @time_type.setter
    def time_type(self, time_type):
        """Sets the time_type of this OrderRequest.

        Time type:   * `1` - Day Order   * `3` - Permanent Order   # noqa: E501

        :param time_type: The time_type of this OrderRequest.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 3]  # noqa: E501
        if time_type not in allowed_values:
            raise ValueError(
                "Invalid value for `time_type` ({0}), must be one of {1}"  # noqa: E501
                .format(time_type, allowed_values)
            )

        self._time_type = time_type

    @property
    def size(self):
        """Gets the size of this OrderRequest.  # noqa: E501

        Size  # noqa: E501

        :return: The size of this OrderRequest.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this OrderRequest.

        Size  # noqa: E501

        :param size: The size of this OrderRequest.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def price(self):
        """Gets the price of this OrderRequest.  # noqa: E501

        Price  # noqa: E501

        :return: The price of this OrderRequest.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this OrderRequest.

        Price  # noqa: E501

        :param price: The price of this OrderRequest.  # noqa: E501
        :type: float
        """

        self._price = price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
