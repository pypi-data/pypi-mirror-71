# coding: utf-8

"""
    Unofficial Degiro API

    Unofficial Degiro API  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: maximdeclercq00@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from degiro_client.models.inline_response2002_data_desktop import InlineResponse2002DataDesktop  # noqa: F401,E501
from degiro_client.models.inline_response2002_data_mobile import InlineResponse2002DataMobile  # noqa: F401,E501

class InlineResponse2002Data(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'desktop': 'InlineResponse2002DataDesktop',
        'mobile': 'InlineResponse2002DataMobile'
    }

    attribute_map = {
        'desktop': 'desktop',
        'mobile': 'mobile'
    }

    def __init__(self, desktop=None, mobile=None):  # noqa: E501
        """InlineResponse2002Data - a model defined in Swagger"""  # noqa: E501
        self._desktop = None
        self._mobile = None
        self.discriminator = None
        if desktop is not None:
            self.desktop = desktop
        if mobile is not None:
            self.mobile = mobile

    @property
    def desktop(self):
        """Gets the desktop of this InlineResponse2002Data.  # noqa: E501


        :return: The desktop of this InlineResponse2002Data.  # noqa: E501
        :rtype: InlineResponse2002DataDesktop
        """
        return self._desktop

    @desktop.setter
    def desktop(self, desktop):
        """Sets the desktop of this InlineResponse2002Data.


        :param desktop: The desktop of this InlineResponse2002Data.  # noqa: E501
        :type: InlineResponse2002DataDesktop
        """

        self._desktop = desktop

    @property
    def mobile(self):
        """Gets the mobile of this InlineResponse2002Data.  # noqa: E501


        :return: The mobile of this InlineResponse2002Data.  # noqa: E501
        :rtype: InlineResponse2002DataMobile
        """
        return self._mobile

    @mobile.setter
    def mobile(self, mobile):
        """Sets the mobile of this InlineResponse2002Data.


        :param mobile: The mobile of this InlineResponse2002Data.  # noqa: E501
        :type: InlineResponse2002DataMobile
        """

        self._mobile = mobile

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2002Data, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2002Data):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
