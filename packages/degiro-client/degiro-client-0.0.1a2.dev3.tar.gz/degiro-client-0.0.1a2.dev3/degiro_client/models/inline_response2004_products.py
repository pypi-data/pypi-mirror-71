# coding: utf-8

"""
    Unofficial Degiro API

    Unofficial Degiro API  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: maximdeclercq00@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2004Products(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'isin': 'str',
        'symbol': 'str',
        'contract_size': 'float',
        'product_type': 'str',
        'product_type_id': 'int',
        'tradable': 'bool',
        'category': 'str',
        'currency': 'str',
        'exchange_id': 'int',
        'order_time_types': 'list[str]',
        'gtc_allowed': 'bool',
        'buy_order_types': 'list[str]',
        'sell_order_types': 'list[str]',
        'product_bit_types': 'list[str]',
        'market_allowed': 'bool',
        'limit_hit_order_allowed': 'bool',
        'stoploss_allowed': 'bool',
        'stop_limit_order_allowed': 'bool',
        'join_order_allowed': 'bool',
        'trailing_stop_order_allowed': 'bool',
        'combined_order_allowed': 'bool',
        'sell_amount_allowed': 'bool',
        'is_fund': 'bool',
        'close_price': 'float',
        'close_price_date': 'str',
        'feed_quality': 'str',
        'order_book_depth': 'int',
        'vwd_identifier_type': 'str',
        'vwd_id': 'str',
        'quality_switchable': 'bool',
        'quality_switch_free': 'bool',
        'vwd_module_id': 'int',
        'feed_quality_secondary': 'str',
        'order_book_depth_secondary': 'int',
        'vwd_identifier_type_secondary': 'str',
        'vwd_id_secondary': 'str',
        'quality_switchable_secondary': 'bool',
        'quality_switch_free_secondary': 'bool',
        'vwd_module_id_secondary': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'isin': 'isin',
        'symbol': 'symbol',
        'contract_size': 'contractSize',
        'product_type': 'productType',
        'product_type_id': 'productTypeId',
        'tradable': 'tradable',
        'category': 'category',
        'currency': 'currency',
        'exchange_id': 'exchangeId',
        'order_time_types': 'orderTimeTypes',
        'gtc_allowed': 'gtcAllowed',
        'buy_order_types': 'buyOrderTypes',
        'sell_order_types': 'sellOrderTypes',
        'product_bit_types': 'productBitTypes',
        'market_allowed': 'marketAllowed',
        'limit_hit_order_allowed': 'limitHitOrderAllowed',
        'stoploss_allowed': 'stoplossAllowed',
        'stop_limit_order_allowed': 'stopLimitOrderAllowed',
        'join_order_allowed': 'joinOrderAllowed',
        'trailing_stop_order_allowed': 'trailingStopOrderAllowed',
        'combined_order_allowed': 'combinedOrderAllowed',
        'sell_amount_allowed': 'sellAmountAllowed',
        'is_fund': 'isFund',
        'close_price': 'closePrice',
        'close_price_date': 'closePriceDate',
        'feed_quality': 'feedQuality',
        'order_book_depth': 'orderBookDepth',
        'vwd_identifier_type': 'vwdIdentifierType',
        'vwd_id': 'vwdId',
        'quality_switchable': 'qualitySwitchable',
        'quality_switch_free': 'qualitySwitchFree',
        'vwd_module_id': 'vwdModuleId',
        'feed_quality_secondary': 'feedQualitySecondary',
        'order_book_depth_secondary': 'orderBookDepthSecondary',
        'vwd_identifier_type_secondary': 'vwdIdentifierTypeSecondary',
        'vwd_id_secondary': 'vwdIdSecondary',
        'quality_switchable_secondary': 'qualitySwitchableSecondary',
        'quality_switch_free_secondary': 'qualitySwitchFreeSecondary',
        'vwd_module_id_secondary': 'vwdModuleIdSecondary'
    }

    def __init__(self, id=None, name=None, isin=None, symbol=None, contract_size=None, product_type=None, product_type_id=None, tradable=None, category=None, currency=None, exchange_id=None, order_time_types=None, gtc_allowed=None, buy_order_types=None, sell_order_types=None, product_bit_types=None, market_allowed=None, limit_hit_order_allowed=None, stoploss_allowed=None, stop_limit_order_allowed=None, join_order_allowed=None, trailing_stop_order_allowed=None, combined_order_allowed=None, sell_amount_allowed=None, is_fund=None, close_price=None, close_price_date=None, feed_quality=None, order_book_depth=None, vwd_identifier_type=None, vwd_id=None, quality_switchable=None, quality_switch_free=None, vwd_module_id=None, feed_quality_secondary=None, order_book_depth_secondary=None, vwd_identifier_type_secondary=None, vwd_id_secondary=None, quality_switchable_secondary=None, quality_switch_free_secondary=None, vwd_module_id_secondary=None):  # noqa: E501
        """InlineResponse2004Products - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._isin = None
        self._symbol = None
        self._contract_size = None
        self._product_type = None
        self._product_type_id = None
        self._tradable = None
        self._category = None
        self._currency = None
        self._exchange_id = None
        self._order_time_types = None
        self._gtc_allowed = None
        self._buy_order_types = None
        self._sell_order_types = None
        self._product_bit_types = None
        self._market_allowed = None
        self._limit_hit_order_allowed = None
        self._stoploss_allowed = None
        self._stop_limit_order_allowed = None
        self._join_order_allowed = None
        self._trailing_stop_order_allowed = None
        self._combined_order_allowed = None
        self._sell_amount_allowed = None
        self._is_fund = None
        self._close_price = None
        self._close_price_date = None
        self._feed_quality = None
        self._order_book_depth = None
        self._vwd_identifier_type = None
        self._vwd_id = None
        self._quality_switchable = None
        self._quality_switch_free = None
        self._vwd_module_id = None
        self._feed_quality_secondary = None
        self._order_book_depth_secondary = None
        self._vwd_identifier_type_secondary = None
        self._vwd_id_secondary = None
        self._quality_switchable_secondary = None
        self._quality_switch_free_secondary = None
        self._vwd_module_id_secondary = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if isin is not None:
            self.isin = isin
        if symbol is not None:
            self.symbol = symbol
        if contract_size is not None:
            self.contract_size = contract_size
        if product_type is not None:
            self.product_type = product_type
        if product_type_id is not None:
            self.product_type_id = product_type_id
        if tradable is not None:
            self.tradable = tradable
        if category is not None:
            self.category = category
        if currency is not None:
            self.currency = currency
        if exchange_id is not None:
            self.exchange_id = exchange_id
        if order_time_types is not None:
            self.order_time_types = order_time_types
        if gtc_allowed is not None:
            self.gtc_allowed = gtc_allowed
        if buy_order_types is not None:
            self.buy_order_types = buy_order_types
        if sell_order_types is not None:
            self.sell_order_types = sell_order_types
        if product_bit_types is not None:
            self.product_bit_types = product_bit_types
        if market_allowed is not None:
            self.market_allowed = market_allowed
        if limit_hit_order_allowed is not None:
            self.limit_hit_order_allowed = limit_hit_order_allowed
        if stoploss_allowed is not None:
            self.stoploss_allowed = stoploss_allowed
        if stop_limit_order_allowed is not None:
            self.stop_limit_order_allowed = stop_limit_order_allowed
        if join_order_allowed is not None:
            self.join_order_allowed = join_order_allowed
        if trailing_stop_order_allowed is not None:
            self.trailing_stop_order_allowed = trailing_stop_order_allowed
        if combined_order_allowed is not None:
            self.combined_order_allowed = combined_order_allowed
        if sell_amount_allowed is not None:
            self.sell_amount_allowed = sell_amount_allowed
        if is_fund is not None:
            self.is_fund = is_fund
        if close_price is not None:
            self.close_price = close_price
        if close_price_date is not None:
            self.close_price_date = close_price_date
        if feed_quality is not None:
            self.feed_quality = feed_quality
        if order_book_depth is not None:
            self.order_book_depth = order_book_depth
        if vwd_identifier_type is not None:
            self.vwd_identifier_type = vwd_identifier_type
        if vwd_id is not None:
            self.vwd_id = vwd_id
        if quality_switchable is not None:
            self.quality_switchable = quality_switchable
        if quality_switch_free is not None:
            self.quality_switch_free = quality_switch_free
        if vwd_module_id is not None:
            self.vwd_module_id = vwd_module_id
        if feed_quality_secondary is not None:
            self.feed_quality_secondary = feed_quality_secondary
        if order_book_depth_secondary is not None:
            self.order_book_depth_secondary = order_book_depth_secondary
        if vwd_identifier_type_secondary is not None:
            self.vwd_identifier_type_secondary = vwd_identifier_type_secondary
        if vwd_id_secondary is not None:
            self.vwd_id_secondary = vwd_id_secondary
        if quality_switchable_secondary is not None:
            self.quality_switchable_secondary = quality_switchable_secondary
        if quality_switch_free_secondary is not None:
            self.quality_switch_free_secondary = quality_switch_free_secondary
        if vwd_module_id_secondary is not None:
            self.vwd_module_id_secondary = vwd_module_id_secondary

    @property
    def id(self):
        """Gets the id of this InlineResponse2004Products.  # noqa: E501


        :return: The id of this InlineResponse2004Products.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse2004Products.


        :param id: The id of this InlineResponse2004Products.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this InlineResponse2004Products.  # noqa: E501


        :return: The name of this InlineResponse2004Products.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse2004Products.


        :param name: The name of this InlineResponse2004Products.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def isin(self):
        """Gets the isin of this InlineResponse2004Products.  # noqa: E501


        :return: The isin of this InlineResponse2004Products.  # noqa: E501
        :rtype: str
        """
        return self._isin

    @isin.setter
    def isin(self, isin):
        """Sets the isin of this InlineResponse2004Products.


        :param isin: The isin of this InlineResponse2004Products.  # noqa: E501
        :type: str
        """

        self._isin = isin

    @property
    def symbol(self):
        """Gets the symbol of this InlineResponse2004Products.  # noqa: E501


        :return: The symbol of this InlineResponse2004Products.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this InlineResponse2004Products.


        :param symbol: The symbol of this InlineResponse2004Products.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def contract_size(self):
        """Gets the contract_size of this InlineResponse2004Products.  # noqa: E501


        :return: The contract_size of this InlineResponse2004Products.  # noqa: E501
        :rtype: float
        """
        return self._contract_size

    @contract_size.setter
    def contract_size(self, contract_size):
        """Sets the contract_size of this InlineResponse2004Products.


        :param contract_size: The contract_size of this InlineResponse2004Products.  # noqa: E501
        :type: float
        """

        self._contract_size = contract_size

    @property
    def product_type(self):
        """Gets the product_type of this InlineResponse2004Products.  # noqa: E501


        :return: The product_type of this InlineResponse2004Products.  # noqa: E501
        :rtype: str
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """Sets the product_type of this InlineResponse2004Products.


        :param product_type: The product_type of this InlineResponse2004Products.  # noqa: E501
        :type: str
        """

        self._product_type = product_type

    @property
    def product_type_id(self):
        """Gets the product_type_id of this InlineResponse2004Products.  # noqa: E501


        :return: The product_type_id of this InlineResponse2004Products.  # noqa: E501
        :rtype: int
        """
        return self._product_type_id

    @product_type_id.setter
    def product_type_id(self, product_type_id):
        """Sets the product_type_id of this InlineResponse2004Products.


        :param product_type_id: The product_type_id of this InlineResponse2004Products.  # noqa: E501
        :type: int
        """

        self._product_type_id = product_type_id

    @property
    def tradable(self):
        """Gets the tradable of this InlineResponse2004Products.  # noqa: E501


        :return: The tradable of this InlineResponse2004Products.  # noqa: E501
        :rtype: bool
        """
        return self._tradable

    @tradable.setter
    def tradable(self, tradable):
        """Sets the tradable of this InlineResponse2004Products.


        :param tradable: The tradable of this InlineResponse2004Products.  # noqa: E501
        :type: bool
        """

        self._tradable = tradable

    @property
    def category(self):
        """Gets the category of this InlineResponse2004Products.  # noqa: E501


        :return: The category of this InlineResponse2004Products.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this InlineResponse2004Products.


        :param category: The category of this InlineResponse2004Products.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def currency(self):
        """Gets the currency of this InlineResponse2004Products.  # noqa: E501


        :return: The currency of this InlineResponse2004Products.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this InlineResponse2004Products.


        :param currency: The currency of this InlineResponse2004Products.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def exchange_id(self):
        """Gets the exchange_id of this InlineResponse2004Products.  # noqa: E501


        :return: The exchange_id of this InlineResponse2004Products.  # noqa: E501
        :rtype: int
        """
        return self._exchange_id

    @exchange_id.setter
    def exchange_id(self, exchange_id):
        """Sets the exchange_id of this InlineResponse2004Products.


        :param exchange_id: The exchange_id of this InlineResponse2004Products.  # noqa: E501
        :type: int
        """

        self._exchange_id = exchange_id

    @property
    def order_time_types(self):
        """Gets the order_time_types of this InlineResponse2004Products.  # noqa: E501


        :return: The order_time_types of this InlineResponse2004Products.  # noqa: E501
        :rtype: list[str]
        """
        return self._order_time_types

    @order_time_types.setter
    def order_time_types(self, order_time_types):
        """Sets the order_time_types of this InlineResponse2004Products.


        :param order_time_types: The order_time_types of this InlineResponse2004Products.  # noqa: E501
        :type: list[str]
        """

        self._order_time_types = order_time_types

    @property
    def gtc_allowed(self):
        """Gets the gtc_allowed of this InlineResponse2004Products.  # noqa: E501


        :return: The gtc_allowed of this InlineResponse2004Products.  # noqa: E501
        :rtype: bool
        """
        return self._gtc_allowed

    @gtc_allowed.setter
    def gtc_allowed(self, gtc_allowed):
        """Sets the gtc_allowed of this InlineResponse2004Products.


        :param gtc_allowed: The gtc_allowed of this InlineResponse2004Products.  # noqa: E501
        :type: bool
        """

        self._gtc_allowed = gtc_allowed

    @property
    def buy_order_types(self):
        """Gets the buy_order_types of this InlineResponse2004Products.  # noqa: E501


        :return: The buy_order_types of this InlineResponse2004Products.  # noqa: E501
        :rtype: list[str]
        """
        return self._buy_order_types

    @buy_order_types.setter
    def buy_order_types(self, buy_order_types):
        """Sets the buy_order_types of this InlineResponse2004Products.


        :param buy_order_types: The buy_order_types of this InlineResponse2004Products.  # noqa: E501
        :type: list[str]
        """

        self._buy_order_types = buy_order_types

    @property
    def sell_order_types(self):
        """Gets the sell_order_types of this InlineResponse2004Products.  # noqa: E501


        :return: The sell_order_types of this InlineResponse2004Products.  # noqa: E501
        :rtype: list[str]
        """
        return self._sell_order_types

    @sell_order_types.setter
    def sell_order_types(self, sell_order_types):
        """Sets the sell_order_types of this InlineResponse2004Products.


        :param sell_order_types: The sell_order_types of this InlineResponse2004Products.  # noqa: E501
        :type: list[str]
        """

        self._sell_order_types = sell_order_types

    @property
    def product_bit_types(self):
        """Gets the product_bit_types of this InlineResponse2004Products.  # noqa: E501


        :return: The product_bit_types of this InlineResponse2004Products.  # noqa: E501
        :rtype: list[str]
        """
        return self._product_bit_types

    @product_bit_types.setter
    def product_bit_types(self, product_bit_types):
        """Sets the product_bit_types of this InlineResponse2004Products.


        :param product_bit_types: The product_bit_types of this InlineResponse2004Products.  # noqa: E501
        :type: list[str]
        """

        self._product_bit_types = product_bit_types

    @property
    def market_allowed(self):
        """Gets the market_allowed of this InlineResponse2004Products.  # noqa: E501


        :return: The market_allowed of this InlineResponse2004Products.  # noqa: E501
        :rtype: bool
        """
        return self._market_allowed

    @market_allowed.setter
    def market_allowed(self, market_allowed):
        """Sets the market_allowed of this InlineResponse2004Products.


        :param market_allowed: The market_allowed of this InlineResponse2004Products.  # noqa: E501
        :type: bool
        """

        self._market_allowed = market_allowed

    @property
    def limit_hit_order_allowed(self):
        """Gets the limit_hit_order_allowed of this InlineResponse2004Products.  # noqa: E501


        :return: The limit_hit_order_allowed of this InlineResponse2004Products.  # noqa: E501
        :rtype: bool
        """
        return self._limit_hit_order_allowed

    @limit_hit_order_allowed.setter
    def limit_hit_order_allowed(self, limit_hit_order_allowed):
        """Sets the limit_hit_order_allowed of this InlineResponse2004Products.


        :param limit_hit_order_allowed: The limit_hit_order_allowed of this InlineResponse2004Products.  # noqa: E501
        :type: bool
        """

        self._limit_hit_order_allowed = limit_hit_order_allowed

    @property
    def stoploss_allowed(self):
        """Gets the stoploss_allowed of this InlineResponse2004Products.  # noqa: E501


        :return: The stoploss_allowed of this InlineResponse2004Products.  # noqa: E501
        :rtype: bool
        """
        return self._stoploss_allowed

    @stoploss_allowed.setter
    def stoploss_allowed(self, stoploss_allowed):
        """Sets the stoploss_allowed of this InlineResponse2004Products.


        :param stoploss_allowed: The stoploss_allowed of this InlineResponse2004Products.  # noqa: E501
        :type: bool
        """

        self._stoploss_allowed = stoploss_allowed

    @property
    def stop_limit_order_allowed(self):
        """Gets the stop_limit_order_allowed of this InlineResponse2004Products.  # noqa: E501


        :return: The stop_limit_order_allowed of this InlineResponse2004Products.  # noqa: E501
        :rtype: bool
        """
        return self._stop_limit_order_allowed

    @stop_limit_order_allowed.setter
    def stop_limit_order_allowed(self, stop_limit_order_allowed):
        """Sets the stop_limit_order_allowed of this InlineResponse2004Products.


        :param stop_limit_order_allowed: The stop_limit_order_allowed of this InlineResponse2004Products.  # noqa: E501
        :type: bool
        """

        self._stop_limit_order_allowed = stop_limit_order_allowed

    @property
    def join_order_allowed(self):
        """Gets the join_order_allowed of this InlineResponse2004Products.  # noqa: E501


        :return: The join_order_allowed of this InlineResponse2004Products.  # noqa: E501
        :rtype: bool
        """
        return self._join_order_allowed

    @join_order_allowed.setter
    def join_order_allowed(self, join_order_allowed):
        """Sets the join_order_allowed of this InlineResponse2004Products.


        :param join_order_allowed: The join_order_allowed of this InlineResponse2004Products.  # noqa: E501
        :type: bool
        """

        self._join_order_allowed = join_order_allowed

    @property
    def trailing_stop_order_allowed(self):
        """Gets the trailing_stop_order_allowed of this InlineResponse2004Products.  # noqa: E501


        :return: The trailing_stop_order_allowed of this InlineResponse2004Products.  # noqa: E501
        :rtype: bool
        """
        return self._trailing_stop_order_allowed

    @trailing_stop_order_allowed.setter
    def trailing_stop_order_allowed(self, trailing_stop_order_allowed):
        """Sets the trailing_stop_order_allowed of this InlineResponse2004Products.


        :param trailing_stop_order_allowed: The trailing_stop_order_allowed of this InlineResponse2004Products.  # noqa: E501
        :type: bool
        """

        self._trailing_stop_order_allowed = trailing_stop_order_allowed

    @property
    def combined_order_allowed(self):
        """Gets the combined_order_allowed of this InlineResponse2004Products.  # noqa: E501


        :return: The combined_order_allowed of this InlineResponse2004Products.  # noqa: E501
        :rtype: bool
        """
        return self._combined_order_allowed

    @combined_order_allowed.setter
    def combined_order_allowed(self, combined_order_allowed):
        """Sets the combined_order_allowed of this InlineResponse2004Products.


        :param combined_order_allowed: The combined_order_allowed of this InlineResponse2004Products.  # noqa: E501
        :type: bool
        """

        self._combined_order_allowed = combined_order_allowed

    @property
    def sell_amount_allowed(self):
        """Gets the sell_amount_allowed of this InlineResponse2004Products.  # noqa: E501


        :return: The sell_amount_allowed of this InlineResponse2004Products.  # noqa: E501
        :rtype: bool
        """
        return self._sell_amount_allowed

    @sell_amount_allowed.setter
    def sell_amount_allowed(self, sell_amount_allowed):
        """Sets the sell_amount_allowed of this InlineResponse2004Products.


        :param sell_amount_allowed: The sell_amount_allowed of this InlineResponse2004Products.  # noqa: E501
        :type: bool
        """

        self._sell_amount_allowed = sell_amount_allowed

    @property
    def is_fund(self):
        """Gets the is_fund of this InlineResponse2004Products.  # noqa: E501


        :return: The is_fund of this InlineResponse2004Products.  # noqa: E501
        :rtype: bool
        """
        return self._is_fund

    @is_fund.setter
    def is_fund(self, is_fund):
        """Sets the is_fund of this InlineResponse2004Products.


        :param is_fund: The is_fund of this InlineResponse2004Products.  # noqa: E501
        :type: bool
        """

        self._is_fund = is_fund

    @property
    def close_price(self):
        """Gets the close_price of this InlineResponse2004Products.  # noqa: E501


        :return: The close_price of this InlineResponse2004Products.  # noqa: E501
        :rtype: float
        """
        return self._close_price

    @close_price.setter
    def close_price(self, close_price):
        """Sets the close_price of this InlineResponse2004Products.


        :param close_price: The close_price of this InlineResponse2004Products.  # noqa: E501
        :type: float
        """

        self._close_price = close_price

    @property
    def close_price_date(self):
        """Gets the close_price_date of this InlineResponse2004Products.  # noqa: E501


        :return: The close_price_date of this InlineResponse2004Products.  # noqa: E501
        :rtype: str
        """
        return self._close_price_date

    @close_price_date.setter
    def close_price_date(self, close_price_date):
        """Sets the close_price_date of this InlineResponse2004Products.


        :param close_price_date: The close_price_date of this InlineResponse2004Products.  # noqa: E501
        :type: str
        """

        self._close_price_date = close_price_date

    @property
    def feed_quality(self):
        """Gets the feed_quality of this InlineResponse2004Products.  # noqa: E501


        :return: The feed_quality of this InlineResponse2004Products.  # noqa: E501
        :rtype: str
        """
        return self._feed_quality

    @feed_quality.setter
    def feed_quality(self, feed_quality):
        """Sets the feed_quality of this InlineResponse2004Products.


        :param feed_quality: The feed_quality of this InlineResponse2004Products.  # noqa: E501
        :type: str
        """

        self._feed_quality = feed_quality

    @property
    def order_book_depth(self):
        """Gets the order_book_depth of this InlineResponse2004Products.  # noqa: E501


        :return: The order_book_depth of this InlineResponse2004Products.  # noqa: E501
        :rtype: int
        """
        return self._order_book_depth

    @order_book_depth.setter
    def order_book_depth(self, order_book_depth):
        """Sets the order_book_depth of this InlineResponse2004Products.


        :param order_book_depth: The order_book_depth of this InlineResponse2004Products.  # noqa: E501
        :type: int
        """

        self._order_book_depth = order_book_depth

    @property
    def vwd_identifier_type(self):
        """Gets the vwd_identifier_type of this InlineResponse2004Products.  # noqa: E501


        :return: The vwd_identifier_type of this InlineResponse2004Products.  # noqa: E501
        :rtype: str
        """
        return self._vwd_identifier_type

    @vwd_identifier_type.setter
    def vwd_identifier_type(self, vwd_identifier_type):
        """Sets the vwd_identifier_type of this InlineResponse2004Products.


        :param vwd_identifier_type: The vwd_identifier_type of this InlineResponse2004Products.  # noqa: E501
        :type: str
        """

        self._vwd_identifier_type = vwd_identifier_type

    @property
    def vwd_id(self):
        """Gets the vwd_id of this InlineResponse2004Products.  # noqa: E501


        :return: The vwd_id of this InlineResponse2004Products.  # noqa: E501
        :rtype: str
        """
        return self._vwd_id

    @vwd_id.setter
    def vwd_id(self, vwd_id):
        """Sets the vwd_id of this InlineResponse2004Products.


        :param vwd_id: The vwd_id of this InlineResponse2004Products.  # noqa: E501
        :type: str
        """

        self._vwd_id = vwd_id

    @property
    def quality_switchable(self):
        """Gets the quality_switchable of this InlineResponse2004Products.  # noqa: E501


        :return: The quality_switchable of this InlineResponse2004Products.  # noqa: E501
        :rtype: bool
        """
        return self._quality_switchable

    @quality_switchable.setter
    def quality_switchable(self, quality_switchable):
        """Sets the quality_switchable of this InlineResponse2004Products.


        :param quality_switchable: The quality_switchable of this InlineResponse2004Products.  # noqa: E501
        :type: bool
        """

        self._quality_switchable = quality_switchable

    @property
    def quality_switch_free(self):
        """Gets the quality_switch_free of this InlineResponse2004Products.  # noqa: E501


        :return: The quality_switch_free of this InlineResponse2004Products.  # noqa: E501
        :rtype: bool
        """
        return self._quality_switch_free

    @quality_switch_free.setter
    def quality_switch_free(self, quality_switch_free):
        """Sets the quality_switch_free of this InlineResponse2004Products.


        :param quality_switch_free: The quality_switch_free of this InlineResponse2004Products.  # noqa: E501
        :type: bool
        """

        self._quality_switch_free = quality_switch_free

    @property
    def vwd_module_id(self):
        """Gets the vwd_module_id of this InlineResponse2004Products.  # noqa: E501


        :return: The vwd_module_id of this InlineResponse2004Products.  # noqa: E501
        :rtype: int
        """
        return self._vwd_module_id

    @vwd_module_id.setter
    def vwd_module_id(self, vwd_module_id):
        """Sets the vwd_module_id of this InlineResponse2004Products.


        :param vwd_module_id: The vwd_module_id of this InlineResponse2004Products.  # noqa: E501
        :type: int
        """

        self._vwd_module_id = vwd_module_id

    @property
    def feed_quality_secondary(self):
        """Gets the feed_quality_secondary of this InlineResponse2004Products.  # noqa: E501


        :return: The feed_quality_secondary of this InlineResponse2004Products.  # noqa: E501
        :rtype: str
        """
        return self._feed_quality_secondary

    @feed_quality_secondary.setter
    def feed_quality_secondary(self, feed_quality_secondary):
        """Sets the feed_quality_secondary of this InlineResponse2004Products.


        :param feed_quality_secondary: The feed_quality_secondary of this InlineResponse2004Products.  # noqa: E501
        :type: str
        """

        self._feed_quality_secondary = feed_quality_secondary

    @property
    def order_book_depth_secondary(self):
        """Gets the order_book_depth_secondary of this InlineResponse2004Products.  # noqa: E501


        :return: The order_book_depth_secondary of this InlineResponse2004Products.  # noqa: E501
        :rtype: int
        """
        return self._order_book_depth_secondary

    @order_book_depth_secondary.setter
    def order_book_depth_secondary(self, order_book_depth_secondary):
        """Sets the order_book_depth_secondary of this InlineResponse2004Products.


        :param order_book_depth_secondary: The order_book_depth_secondary of this InlineResponse2004Products.  # noqa: E501
        :type: int
        """

        self._order_book_depth_secondary = order_book_depth_secondary

    @property
    def vwd_identifier_type_secondary(self):
        """Gets the vwd_identifier_type_secondary of this InlineResponse2004Products.  # noqa: E501


        :return: The vwd_identifier_type_secondary of this InlineResponse2004Products.  # noqa: E501
        :rtype: str
        """
        return self._vwd_identifier_type_secondary

    @vwd_identifier_type_secondary.setter
    def vwd_identifier_type_secondary(self, vwd_identifier_type_secondary):
        """Sets the vwd_identifier_type_secondary of this InlineResponse2004Products.


        :param vwd_identifier_type_secondary: The vwd_identifier_type_secondary of this InlineResponse2004Products.  # noqa: E501
        :type: str
        """

        self._vwd_identifier_type_secondary = vwd_identifier_type_secondary

    @property
    def vwd_id_secondary(self):
        """Gets the vwd_id_secondary of this InlineResponse2004Products.  # noqa: E501


        :return: The vwd_id_secondary of this InlineResponse2004Products.  # noqa: E501
        :rtype: str
        """
        return self._vwd_id_secondary

    @vwd_id_secondary.setter
    def vwd_id_secondary(self, vwd_id_secondary):
        """Sets the vwd_id_secondary of this InlineResponse2004Products.


        :param vwd_id_secondary: The vwd_id_secondary of this InlineResponse2004Products.  # noqa: E501
        :type: str
        """

        self._vwd_id_secondary = vwd_id_secondary

    @property
    def quality_switchable_secondary(self):
        """Gets the quality_switchable_secondary of this InlineResponse2004Products.  # noqa: E501


        :return: The quality_switchable_secondary of this InlineResponse2004Products.  # noqa: E501
        :rtype: bool
        """
        return self._quality_switchable_secondary

    @quality_switchable_secondary.setter
    def quality_switchable_secondary(self, quality_switchable_secondary):
        """Sets the quality_switchable_secondary of this InlineResponse2004Products.


        :param quality_switchable_secondary: The quality_switchable_secondary of this InlineResponse2004Products.  # noqa: E501
        :type: bool
        """

        self._quality_switchable_secondary = quality_switchable_secondary

    @property
    def quality_switch_free_secondary(self):
        """Gets the quality_switch_free_secondary of this InlineResponse2004Products.  # noqa: E501


        :return: The quality_switch_free_secondary of this InlineResponse2004Products.  # noqa: E501
        :rtype: bool
        """
        return self._quality_switch_free_secondary

    @quality_switch_free_secondary.setter
    def quality_switch_free_secondary(self, quality_switch_free_secondary):
        """Sets the quality_switch_free_secondary of this InlineResponse2004Products.


        :param quality_switch_free_secondary: The quality_switch_free_secondary of this InlineResponse2004Products.  # noqa: E501
        :type: bool
        """

        self._quality_switch_free_secondary = quality_switch_free_secondary

    @property
    def vwd_module_id_secondary(self):
        """Gets the vwd_module_id_secondary of this InlineResponse2004Products.  # noqa: E501


        :return: The vwd_module_id_secondary of this InlineResponse2004Products.  # noqa: E501
        :rtype: int
        """
        return self._vwd_module_id_secondary

    @vwd_module_id_secondary.setter
    def vwd_module_id_secondary(self, vwd_module_id_secondary):
        """Sets the vwd_module_id_secondary of this InlineResponse2004Products.


        :param vwd_module_id_secondary: The vwd_module_id_secondary of this InlineResponse2004Products.  # noqa: E501
        :type: int
        """

        self._vwd_module_id_secondary = vwd_module_id_secondary

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2004Products, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2004Products):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
