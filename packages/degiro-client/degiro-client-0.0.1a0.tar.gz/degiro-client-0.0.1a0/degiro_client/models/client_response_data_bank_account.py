# coding: utf-8

"""
    Unofficial Degiro API

    Unofficial Degiro API  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ClientResponseDataBankAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bank_account_id': 'int',
        'bic': 'str',
        'iban': 'str',
        'status': 'str'
    }

    attribute_map = {
        'bank_account_id': 'bankAccountId',
        'bic': 'bic',
        'iban': 'iban',
        'status': 'status'
    }

    def __init__(self, bank_account_id=None, bic=None, iban=None, status=None):  # noqa: E501
        """ClientResponseDataBankAccount - a model defined in Swagger"""  # noqa: E501
        self._bank_account_id = None
        self._bic = None
        self._iban = None
        self._status = None
        self.discriminator = None
        if bank_account_id is not None:
            self.bank_account_id = bank_account_id
        if bic is not None:
            self.bic = bic
        if iban is not None:
            self.iban = iban
        if status is not None:
            self.status = status

    @property
    def bank_account_id(self):
        """Gets the bank_account_id of this ClientResponseDataBankAccount.  # noqa: E501


        :return: The bank_account_id of this ClientResponseDataBankAccount.  # noqa: E501
        :rtype: int
        """
        return self._bank_account_id

    @bank_account_id.setter
    def bank_account_id(self, bank_account_id):
        """Sets the bank_account_id of this ClientResponseDataBankAccount.


        :param bank_account_id: The bank_account_id of this ClientResponseDataBankAccount.  # noqa: E501
        :type: int
        """

        self._bank_account_id = bank_account_id

    @property
    def bic(self):
        """Gets the bic of this ClientResponseDataBankAccount.  # noqa: E501


        :return: The bic of this ClientResponseDataBankAccount.  # noqa: E501
        :rtype: str
        """
        return self._bic

    @bic.setter
    def bic(self, bic):
        """Sets the bic of this ClientResponseDataBankAccount.


        :param bic: The bic of this ClientResponseDataBankAccount.  # noqa: E501
        :type: str
        """

        self._bic = bic

    @property
    def iban(self):
        """Gets the iban of this ClientResponseDataBankAccount.  # noqa: E501


        :return: The iban of this ClientResponseDataBankAccount.  # noqa: E501
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban):
        """Sets the iban of this ClientResponseDataBankAccount.


        :param iban: The iban of this ClientResponseDataBankAccount.  # noqa: E501
        :type: str
        """

        self._iban = iban

    @property
    def status(self):
        """Gets the status of this ClientResponseDataBankAccount.  # noqa: E501


        :return: The status of this ClientResponseDataBankAccount.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ClientResponseDataBankAccount.


        :param status: The status of this ClientResponseDataBankAccount.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClientResponseDataBankAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientResponseDataBankAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
