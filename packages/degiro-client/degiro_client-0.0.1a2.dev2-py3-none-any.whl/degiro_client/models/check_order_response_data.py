# coding: utf-8

"""
    Unofficial Degiro API

    Unofficial Degiro API  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: maximdeclercq00@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from degiro_client.models.check_order_response_data_transaction_fees import CheckOrderResponseDataTransactionFees  # noqa: F401,E501

class CheckOrderResponseData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'confirmation_id': 'str',
        'transaction_fees': 'list[CheckOrderResponseDataTransactionFees]',
        'transaction_taxes': 'list[CheckOrderResponseDataTransactionFees]'
    }

    attribute_map = {
        'confirmation_id': 'confirmationId',
        'transaction_fees': 'transactionFees',
        'transaction_taxes': 'transactionTaxes'
    }

    def __init__(self, confirmation_id=None, transaction_fees=None, transaction_taxes=None):  # noqa: E501
        """CheckOrderResponseData - a model defined in Swagger"""  # noqa: E501
        self._confirmation_id = None
        self._transaction_fees = None
        self._transaction_taxes = None
        self.discriminator = None
        if confirmation_id is not None:
            self.confirmation_id = confirmation_id
        if transaction_fees is not None:
            self.transaction_fees = transaction_fees
        if transaction_taxes is not None:
            self.transaction_taxes = transaction_taxes

    @property
    def confirmation_id(self):
        """Gets the confirmation_id of this CheckOrderResponseData.  # noqa: E501

        Indentifier to execute the order with  # noqa: E501

        :return: The confirmation_id of this CheckOrderResponseData.  # noqa: E501
        :rtype: str
        """
        return self._confirmation_id

    @confirmation_id.setter
    def confirmation_id(self, confirmation_id):
        """Sets the confirmation_id of this CheckOrderResponseData.

        Indentifier to execute the order with  # noqa: E501

        :param confirmation_id: The confirmation_id of this CheckOrderResponseData.  # noqa: E501
        :type: str
        """

        self._confirmation_id = confirmation_id

    @property
    def transaction_fees(self):
        """Gets the transaction_fees of this CheckOrderResponseData.  # noqa: E501


        :return: The transaction_fees of this CheckOrderResponseData.  # noqa: E501
        :rtype: list[CheckOrderResponseDataTransactionFees]
        """
        return self._transaction_fees

    @transaction_fees.setter
    def transaction_fees(self, transaction_fees):
        """Sets the transaction_fees of this CheckOrderResponseData.


        :param transaction_fees: The transaction_fees of this CheckOrderResponseData.  # noqa: E501
        :type: list[CheckOrderResponseDataTransactionFees]
        """

        self._transaction_fees = transaction_fees

    @property
    def transaction_taxes(self):
        """Gets the transaction_taxes of this CheckOrderResponseData.  # noqa: E501


        :return: The transaction_taxes of this CheckOrderResponseData.  # noqa: E501
        :rtype: list[CheckOrderResponseDataTransactionFees]
        """
        return self._transaction_taxes

    @transaction_taxes.setter
    def transaction_taxes(self, transaction_taxes):
        """Sets the transaction_taxes of this CheckOrderResponseData.


        :param transaction_taxes: The transaction_taxes of this CheckOrderResponseData.  # noqa: E501
        :type: list[CheckOrderResponseDataTransactionFees]
        """

        self._transaction_taxes = transaction_taxes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CheckOrderResponseData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CheckOrderResponseData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
