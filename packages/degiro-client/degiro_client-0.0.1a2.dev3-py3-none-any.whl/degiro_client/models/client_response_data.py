# coding: utf-8

"""
    Unofficial Degiro API

    Unofficial Degiro API  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: maximdeclercq00@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from degiro_client.models.client_response_data_address import ClientResponseDataAddress  # noqa: F401,E501
from degiro_client.models.client_response_data_bank_account import ClientResponseDataBankAccount  # noqa: F401,E501
from degiro_client.models.client_response_data_first_contact import ClientResponseDataFirstContact  # noqa: F401,E501

class ClientResponseData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'int_account': 'int',
        'client_role': 'str',
        'effective_client_role': 'str',
        'contract_type': 'str',
        'username': 'str',
        'display_name': 'str',
        'email': 'str',
        'first_contact': 'ClientResponseDataFirstContact',
        'address': 'ClientResponseDataAddress',
        'cellphone_number': 'str',
        'locale': 'str',
        'language': 'str',
        'culture': 'str',
        'bank_account': 'ClientResponseDataBankAccount',
        'member_code': 'str',
        'is_withdrawal_available': 'bool',
        'is_allocation_available': 'bool',
        'is_isk_client': 'bool',
        'is_collective_portfolio': 'bool',
        'is_am_client_active': 'bool',
        'can_upgrade': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'int_account': 'intAccount',
        'client_role': 'clientRole',
        'effective_client_role': 'effectiveClientRole',
        'contract_type': 'contractType',
        'username': 'username',
        'display_name': 'displayName',
        'email': 'email',
        'first_contact': 'firstContact',
        'address': 'address',
        'cellphone_number': 'cellphoneNumber',
        'locale': 'locale',
        'language': 'language',
        'culture': 'culture',
        'bank_account': 'bankAccount',
        'member_code': 'memberCode',
        'is_withdrawal_available': 'isWithdrawalAvailable',
        'is_allocation_available': 'isAllocationAvailable',
        'is_isk_client': 'isIskClient',
        'is_collective_portfolio': 'isCollectivePortfolio',
        'is_am_client_active': 'isAmClientActive',
        'can_upgrade': 'canUpgrade'
    }

    def __init__(self, id=None, int_account=None, client_role=None, effective_client_role=None, contract_type=None, username=None, display_name=None, email=None, first_contact=None, address=None, cellphone_number=None, locale=None, language=None, culture=None, bank_account=None, member_code=None, is_withdrawal_available=None, is_allocation_available=None, is_isk_client=None, is_collective_portfolio=None, is_am_client_active=None, can_upgrade=None):  # noqa: E501
        """ClientResponseData - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._int_account = None
        self._client_role = None
        self._effective_client_role = None
        self._contract_type = None
        self._username = None
        self._display_name = None
        self._email = None
        self._first_contact = None
        self._address = None
        self._cellphone_number = None
        self._locale = None
        self._language = None
        self._culture = None
        self._bank_account = None
        self._member_code = None
        self._is_withdrawal_available = None
        self._is_allocation_available = None
        self._is_isk_client = None
        self._is_collective_portfolio = None
        self._is_am_client_active = None
        self._can_upgrade = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.int_account = int_account
        if client_role is not None:
            self.client_role = client_role
        if effective_client_role is not None:
            self.effective_client_role = effective_client_role
        if contract_type is not None:
            self.contract_type = contract_type
        if username is not None:
            self.username = username
        if display_name is not None:
            self.display_name = display_name
        if email is not None:
            self.email = email
        if first_contact is not None:
            self.first_contact = first_contact
        if address is not None:
            self.address = address
        if cellphone_number is not None:
            self.cellphone_number = cellphone_number
        if locale is not None:
            self.locale = locale
        if language is not None:
            self.language = language
        if culture is not None:
            self.culture = culture
        if bank_account is not None:
            self.bank_account = bank_account
        if member_code is not None:
            self.member_code = member_code
        if is_withdrawal_available is not None:
            self.is_withdrawal_available = is_withdrawal_available
        if is_allocation_available is not None:
            self.is_allocation_available = is_allocation_available
        if is_isk_client is not None:
            self.is_isk_client = is_isk_client
        if is_collective_portfolio is not None:
            self.is_collective_portfolio = is_collective_portfolio
        if is_am_client_active is not None:
            self.is_am_client_active = is_am_client_active
        if can_upgrade is not None:
            self.can_upgrade = can_upgrade

    @property
    def id(self):
        """Gets the id of this ClientResponseData.  # noqa: E501


        :return: The id of this ClientResponseData.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClientResponseData.


        :param id: The id of this ClientResponseData.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def int_account(self):
        """Gets the int_account of this ClientResponseData.  # noqa: E501


        :return: The int_account of this ClientResponseData.  # noqa: E501
        :rtype: int
        """
        return self._int_account

    @int_account.setter
    def int_account(self, int_account):
        """Sets the int_account of this ClientResponseData.


        :param int_account: The int_account of this ClientResponseData.  # noqa: E501
        :type: int
        """
        if int_account is None:
            raise ValueError("Invalid value for `int_account`, must not be `None`")  # noqa: E501

        self._int_account = int_account

    @property
    def client_role(self):
        """Gets the client_role of this ClientResponseData.  # noqa: E501


        :return: The client_role of this ClientResponseData.  # noqa: E501
        :rtype: str
        """
        return self._client_role

    @client_role.setter
    def client_role(self, client_role):
        """Sets the client_role of this ClientResponseData.


        :param client_role: The client_role of this ClientResponseData.  # noqa: E501
        :type: str
        """

        self._client_role = client_role

    @property
    def effective_client_role(self):
        """Gets the effective_client_role of this ClientResponseData.  # noqa: E501


        :return: The effective_client_role of this ClientResponseData.  # noqa: E501
        :rtype: str
        """
        return self._effective_client_role

    @effective_client_role.setter
    def effective_client_role(self, effective_client_role):
        """Sets the effective_client_role of this ClientResponseData.


        :param effective_client_role: The effective_client_role of this ClientResponseData.  # noqa: E501
        :type: str
        """

        self._effective_client_role = effective_client_role

    @property
    def contract_type(self):
        """Gets the contract_type of this ClientResponseData.  # noqa: E501


        :return: The contract_type of this ClientResponseData.  # noqa: E501
        :rtype: str
        """
        return self._contract_type

    @contract_type.setter
    def contract_type(self, contract_type):
        """Sets the contract_type of this ClientResponseData.


        :param contract_type: The contract_type of this ClientResponseData.  # noqa: E501
        :type: str
        """

        self._contract_type = contract_type

    @property
    def username(self):
        """Gets the username of this ClientResponseData.  # noqa: E501


        :return: The username of this ClientResponseData.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ClientResponseData.


        :param username: The username of this ClientResponseData.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def display_name(self):
        """Gets the display_name of this ClientResponseData.  # noqa: E501


        :return: The display_name of this ClientResponseData.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ClientResponseData.


        :param display_name: The display_name of this ClientResponseData.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def email(self):
        """Gets the email of this ClientResponseData.  # noqa: E501


        :return: The email of this ClientResponseData.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ClientResponseData.


        :param email: The email of this ClientResponseData.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def first_contact(self):
        """Gets the first_contact of this ClientResponseData.  # noqa: E501


        :return: The first_contact of this ClientResponseData.  # noqa: E501
        :rtype: ClientResponseDataFirstContact
        """
        return self._first_contact

    @first_contact.setter
    def first_contact(self, first_contact):
        """Sets the first_contact of this ClientResponseData.


        :param first_contact: The first_contact of this ClientResponseData.  # noqa: E501
        :type: ClientResponseDataFirstContact
        """

        self._first_contact = first_contact

    @property
    def address(self):
        """Gets the address of this ClientResponseData.  # noqa: E501


        :return: The address of this ClientResponseData.  # noqa: E501
        :rtype: ClientResponseDataAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ClientResponseData.


        :param address: The address of this ClientResponseData.  # noqa: E501
        :type: ClientResponseDataAddress
        """

        self._address = address

    @property
    def cellphone_number(self):
        """Gets the cellphone_number of this ClientResponseData.  # noqa: E501


        :return: The cellphone_number of this ClientResponseData.  # noqa: E501
        :rtype: str
        """
        return self._cellphone_number

    @cellphone_number.setter
    def cellphone_number(self, cellphone_number):
        """Sets the cellphone_number of this ClientResponseData.


        :param cellphone_number: The cellphone_number of this ClientResponseData.  # noqa: E501
        :type: str
        """

        self._cellphone_number = cellphone_number

    @property
    def locale(self):
        """Gets the locale of this ClientResponseData.  # noqa: E501


        :return: The locale of this ClientResponseData.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this ClientResponseData.


        :param locale: The locale of this ClientResponseData.  # noqa: E501
        :type: str
        """

        self._locale = locale

    @property
    def language(self):
        """Gets the language of this ClientResponseData.  # noqa: E501


        :return: The language of this ClientResponseData.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this ClientResponseData.


        :param language: The language of this ClientResponseData.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def culture(self):
        """Gets the culture of this ClientResponseData.  # noqa: E501


        :return: The culture of this ClientResponseData.  # noqa: E501
        :rtype: str
        """
        return self._culture

    @culture.setter
    def culture(self, culture):
        """Sets the culture of this ClientResponseData.


        :param culture: The culture of this ClientResponseData.  # noqa: E501
        :type: str
        """

        self._culture = culture

    @property
    def bank_account(self):
        """Gets the bank_account of this ClientResponseData.  # noqa: E501


        :return: The bank_account of this ClientResponseData.  # noqa: E501
        :rtype: ClientResponseDataBankAccount
        """
        return self._bank_account

    @bank_account.setter
    def bank_account(self, bank_account):
        """Sets the bank_account of this ClientResponseData.


        :param bank_account: The bank_account of this ClientResponseData.  # noqa: E501
        :type: ClientResponseDataBankAccount
        """

        self._bank_account = bank_account

    @property
    def member_code(self):
        """Gets the member_code of this ClientResponseData.  # noqa: E501


        :return: The member_code of this ClientResponseData.  # noqa: E501
        :rtype: str
        """
        return self._member_code

    @member_code.setter
    def member_code(self, member_code):
        """Sets the member_code of this ClientResponseData.


        :param member_code: The member_code of this ClientResponseData.  # noqa: E501
        :type: str
        """

        self._member_code = member_code

    @property
    def is_withdrawal_available(self):
        """Gets the is_withdrawal_available of this ClientResponseData.  # noqa: E501


        :return: The is_withdrawal_available of this ClientResponseData.  # noqa: E501
        :rtype: bool
        """
        return self._is_withdrawal_available

    @is_withdrawal_available.setter
    def is_withdrawal_available(self, is_withdrawal_available):
        """Sets the is_withdrawal_available of this ClientResponseData.


        :param is_withdrawal_available: The is_withdrawal_available of this ClientResponseData.  # noqa: E501
        :type: bool
        """

        self._is_withdrawal_available = is_withdrawal_available

    @property
    def is_allocation_available(self):
        """Gets the is_allocation_available of this ClientResponseData.  # noqa: E501


        :return: The is_allocation_available of this ClientResponseData.  # noqa: E501
        :rtype: bool
        """
        return self._is_allocation_available

    @is_allocation_available.setter
    def is_allocation_available(self, is_allocation_available):
        """Sets the is_allocation_available of this ClientResponseData.


        :param is_allocation_available: The is_allocation_available of this ClientResponseData.  # noqa: E501
        :type: bool
        """

        self._is_allocation_available = is_allocation_available

    @property
    def is_isk_client(self):
        """Gets the is_isk_client of this ClientResponseData.  # noqa: E501


        :return: The is_isk_client of this ClientResponseData.  # noqa: E501
        :rtype: bool
        """
        return self._is_isk_client

    @is_isk_client.setter
    def is_isk_client(self, is_isk_client):
        """Sets the is_isk_client of this ClientResponseData.


        :param is_isk_client: The is_isk_client of this ClientResponseData.  # noqa: E501
        :type: bool
        """

        self._is_isk_client = is_isk_client

    @property
    def is_collective_portfolio(self):
        """Gets the is_collective_portfolio of this ClientResponseData.  # noqa: E501


        :return: The is_collective_portfolio of this ClientResponseData.  # noqa: E501
        :rtype: bool
        """
        return self._is_collective_portfolio

    @is_collective_portfolio.setter
    def is_collective_portfolio(self, is_collective_portfolio):
        """Sets the is_collective_portfolio of this ClientResponseData.


        :param is_collective_portfolio: The is_collective_portfolio of this ClientResponseData.  # noqa: E501
        :type: bool
        """

        self._is_collective_portfolio = is_collective_portfolio

    @property
    def is_am_client_active(self):
        """Gets the is_am_client_active of this ClientResponseData.  # noqa: E501


        :return: The is_am_client_active of this ClientResponseData.  # noqa: E501
        :rtype: bool
        """
        return self._is_am_client_active

    @is_am_client_active.setter
    def is_am_client_active(self, is_am_client_active):
        """Sets the is_am_client_active of this ClientResponseData.


        :param is_am_client_active: The is_am_client_active of this ClientResponseData.  # noqa: E501
        :type: bool
        """

        self._is_am_client_active = is_am_client_active

    @property
    def can_upgrade(self):
        """Gets the can_upgrade of this ClientResponseData.  # noqa: E501


        :return: The can_upgrade of this ClientResponseData.  # noqa: E501
        :rtype: bool
        """
        return self._can_upgrade

    @can_upgrade.setter
    def can_upgrade(self, can_upgrade):
        """Sets the can_upgrade of this ClientResponseData.


        :param can_upgrade: The can_upgrade of this ClientResponseData.  # noqa: E501
        :type: bool
        """

        self._can_upgrade = can_upgrade

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClientResponseData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientResponseData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
