# coding: utf-8

"""
    Unofficial Degiro API

    Unofficial Degiro API  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: maximdeclercq00@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from degiro_client.models.inline_response2003_data_market_page_chart_index import InlineResponse2003DataMarketPageChartIndex  # noqa: F401,E501
from degiro_client.models.inline_response2003_data_market_page_currencies import InlineResponse2003DataMarketPageCurrencies  # noqa: F401,E501
from degiro_client.models.inline_response2003_data_market_page_futures import InlineResponse2003DataMarketPageFutures  # noqa: F401,E501

class InlineResponse2003Data(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'default_market_movers_index_id': 'int',
        'market_movers_index_ids': 'list[int]',
        'market_page_chart_index': 'InlineResponse2003DataMarketPageChartIndex',
        'market_page_indices': 'list[InlineResponse2003DataMarketPageChartIndex]',
        'market_page_futures': 'list[InlineResponse2003DataMarketPageFutures]',
        'market_page_currencies': 'list[InlineResponse2003DataMarketPageCurrencies]',
        'default_stock_country_id': 'int',
        'default_stock_list_type': 'str',
        'default_stock_list_id': 'int',
        'default_option_exchange_id': 'int',
        'default_option_country_id': 'int',
        'default_option_underlying_isin': 'str',
        'default_future_exchange_id': 'int',
        'default_future_country_id': 'int',
        'default_future_underlying_isin': 'str',
        'default_leveraged_exchange_id': 'int',
        'default_leveraged_short_long': 'int',
        'default_leveraged_issuer_id': 'int',
        'default_leveraged_underlying_id': 'int',
        'default_leveraged_popular_only': 'bool',
        'default_bond_issuer_type': 'int',
        'default_bond_exchange_id': 'int',
        'default_fund_fee_type': 'int',
        'default_fund_issuer_id': 'int',
        'default_etf_exchange_id': 'int',
        'default_etf_fee_type': 'int',
        'default_etf_issuer_id': 'int',
        'default_etf_popular_only': 'bool',
        'default_cfd_exchange_id': 'int',
        'default_warrant_underlying_name': 'int',
        'default_warrant_issuer_name': 'int',
        'decimal_delimiter': 'str',
        'thousand_delimiter': 'str'
    }

    attribute_map = {
        'default_market_movers_index_id': 'defaultMarketMoversIndexId',
        'market_movers_index_ids': 'marketMoversIndexIds',
        'market_page_chart_index': 'marketPageChartIndex',
        'market_page_indices': 'marketPageIndices',
        'market_page_futures': 'marketPageFutures',
        'market_page_currencies': 'marketPageCurrencies',
        'default_stock_country_id': 'defaultStockCountryId',
        'default_stock_list_type': 'defaultStockListType',
        'default_stock_list_id': 'defaultStockListId',
        'default_option_exchange_id': 'defaultOptionExchangeId',
        'default_option_country_id': 'defaultOptionCountryId',
        'default_option_underlying_isin': 'defaultOptionUnderlyingIsin',
        'default_future_exchange_id': 'defaultFutureExchangeId',
        'default_future_country_id': 'defaultFutureCountryId',
        'default_future_underlying_isin': 'defaultFutureUnderlyingIsin',
        'default_leveraged_exchange_id': 'defaultLeveragedExchangeId',
        'default_leveraged_short_long': 'defaultLeveragedShortLong',
        'default_leveraged_issuer_id': 'defaultLeveragedIssuerId',
        'default_leveraged_underlying_id': 'defaultLeveragedUnderlyingId',
        'default_leveraged_popular_only': 'defaultLeveragedPopularOnly',
        'default_bond_issuer_type': 'defaultBondIssuerType',
        'default_bond_exchange_id': 'defaultBondExchangeId',
        'default_fund_fee_type': 'defaultFundFeeType',
        'default_fund_issuer_id': 'defaultFundIssuerId',
        'default_etf_exchange_id': 'defaultEtfExchangeId',
        'default_etf_fee_type': 'defaultEtfFeeType',
        'default_etf_issuer_id': 'defaultEtfIssuerId',
        'default_etf_popular_only': 'defaultEtfPopularOnly',
        'default_cfd_exchange_id': 'defaultCfdExchangeId',
        'default_warrant_underlying_name': 'defaultWarrantUnderlyingName',
        'default_warrant_issuer_name': 'defaultWarrantIssuerName',
        'decimal_delimiter': 'decimalDelimiter',
        'thousand_delimiter': 'thousandDelimiter'
    }

    def __init__(self, default_market_movers_index_id=None, market_movers_index_ids=None, market_page_chart_index=None, market_page_indices=None, market_page_futures=None, market_page_currencies=None, default_stock_country_id=None, default_stock_list_type=None, default_stock_list_id=None, default_option_exchange_id=None, default_option_country_id=None, default_option_underlying_isin=None, default_future_exchange_id=None, default_future_country_id=None, default_future_underlying_isin=None, default_leveraged_exchange_id=None, default_leveraged_short_long=None, default_leveraged_issuer_id=None, default_leveraged_underlying_id=None, default_leveraged_popular_only=None, default_bond_issuer_type=None, default_bond_exchange_id=None, default_fund_fee_type=None, default_fund_issuer_id=None, default_etf_exchange_id=None, default_etf_fee_type=None, default_etf_issuer_id=None, default_etf_popular_only=None, default_cfd_exchange_id=None, default_warrant_underlying_name=None, default_warrant_issuer_name=None, decimal_delimiter=None, thousand_delimiter=None):  # noqa: E501
        """InlineResponse2003Data - a model defined in Swagger"""  # noqa: E501
        self._default_market_movers_index_id = None
        self._market_movers_index_ids = None
        self._market_page_chart_index = None
        self._market_page_indices = None
        self._market_page_futures = None
        self._market_page_currencies = None
        self._default_stock_country_id = None
        self._default_stock_list_type = None
        self._default_stock_list_id = None
        self._default_option_exchange_id = None
        self._default_option_country_id = None
        self._default_option_underlying_isin = None
        self._default_future_exchange_id = None
        self._default_future_country_id = None
        self._default_future_underlying_isin = None
        self._default_leveraged_exchange_id = None
        self._default_leveraged_short_long = None
        self._default_leveraged_issuer_id = None
        self._default_leveraged_underlying_id = None
        self._default_leveraged_popular_only = None
        self._default_bond_issuer_type = None
        self._default_bond_exchange_id = None
        self._default_fund_fee_type = None
        self._default_fund_issuer_id = None
        self._default_etf_exchange_id = None
        self._default_etf_fee_type = None
        self._default_etf_issuer_id = None
        self._default_etf_popular_only = None
        self._default_cfd_exchange_id = None
        self._default_warrant_underlying_name = None
        self._default_warrant_issuer_name = None
        self._decimal_delimiter = None
        self._thousand_delimiter = None
        self.discriminator = None
        if default_market_movers_index_id is not None:
            self.default_market_movers_index_id = default_market_movers_index_id
        if market_movers_index_ids is not None:
            self.market_movers_index_ids = market_movers_index_ids
        if market_page_chart_index is not None:
            self.market_page_chart_index = market_page_chart_index
        if market_page_indices is not None:
            self.market_page_indices = market_page_indices
        if market_page_futures is not None:
            self.market_page_futures = market_page_futures
        if market_page_currencies is not None:
            self.market_page_currencies = market_page_currencies
        if default_stock_country_id is not None:
            self.default_stock_country_id = default_stock_country_id
        if default_stock_list_type is not None:
            self.default_stock_list_type = default_stock_list_type
        if default_stock_list_id is not None:
            self.default_stock_list_id = default_stock_list_id
        if default_option_exchange_id is not None:
            self.default_option_exchange_id = default_option_exchange_id
        if default_option_country_id is not None:
            self.default_option_country_id = default_option_country_id
        if default_option_underlying_isin is not None:
            self.default_option_underlying_isin = default_option_underlying_isin
        if default_future_exchange_id is not None:
            self.default_future_exchange_id = default_future_exchange_id
        if default_future_country_id is not None:
            self.default_future_country_id = default_future_country_id
        if default_future_underlying_isin is not None:
            self.default_future_underlying_isin = default_future_underlying_isin
        if default_leveraged_exchange_id is not None:
            self.default_leveraged_exchange_id = default_leveraged_exchange_id
        if default_leveraged_short_long is not None:
            self.default_leveraged_short_long = default_leveraged_short_long
        if default_leveraged_issuer_id is not None:
            self.default_leveraged_issuer_id = default_leveraged_issuer_id
        if default_leveraged_underlying_id is not None:
            self.default_leveraged_underlying_id = default_leveraged_underlying_id
        if default_leveraged_popular_only is not None:
            self.default_leveraged_popular_only = default_leveraged_popular_only
        if default_bond_issuer_type is not None:
            self.default_bond_issuer_type = default_bond_issuer_type
        if default_bond_exchange_id is not None:
            self.default_bond_exchange_id = default_bond_exchange_id
        if default_fund_fee_type is not None:
            self.default_fund_fee_type = default_fund_fee_type
        if default_fund_issuer_id is not None:
            self.default_fund_issuer_id = default_fund_issuer_id
        if default_etf_exchange_id is not None:
            self.default_etf_exchange_id = default_etf_exchange_id
        if default_etf_fee_type is not None:
            self.default_etf_fee_type = default_etf_fee_type
        if default_etf_issuer_id is not None:
            self.default_etf_issuer_id = default_etf_issuer_id
        if default_etf_popular_only is not None:
            self.default_etf_popular_only = default_etf_popular_only
        if default_cfd_exchange_id is not None:
            self.default_cfd_exchange_id = default_cfd_exchange_id
        if default_warrant_underlying_name is not None:
            self.default_warrant_underlying_name = default_warrant_underlying_name
        if default_warrant_issuer_name is not None:
            self.default_warrant_issuer_name = default_warrant_issuer_name
        if decimal_delimiter is not None:
            self.decimal_delimiter = decimal_delimiter
        if thousand_delimiter is not None:
            self.thousand_delimiter = thousand_delimiter

    @property
    def default_market_movers_index_id(self):
        """Gets the default_market_movers_index_id of this InlineResponse2003Data.  # noqa: E501


        :return: The default_market_movers_index_id of this InlineResponse2003Data.  # noqa: E501
        :rtype: int
        """
        return self._default_market_movers_index_id

    @default_market_movers_index_id.setter
    def default_market_movers_index_id(self, default_market_movers_index_id):
        """Sets the default_market_movers_index_id of this InlineResponse2003Data.


        :param default_market_movers_index_id: The default_market_movers_index_id of this InlineResponse2003Data.  # noqa: E501
        :type: int
        """

        self._default_market_movers_index_id = default_market_movers_index_id

    @property
    def market_movers_index_ids(self):
        """Gets the market_movers_index_ids of this InlineResponse2003Data.  # noqa: E501


        :return: The market_movers_index_ids of this InlineResponse2003Data.  # noqa: E501
        :rtype: list[int]
        """
        return self._market_movers_index_ids

    @market_movers_index_ids.setter
    def market_movers_index_ids(self, market_movers_index_ids):
        """Sets the market_movers_index_ids of this InlineResponse2003Data.


        :param market_movers_index_ids: The market_movers_index_ids of this InlineResponse2003Data.  # noqa: E501
        :type: list[int]
        """

        self._market_movers_index_ids = market_movers_index_ids

    @property
    def market_page_chart_index(self):
        """Gets the market_page_chart_index of this InlineResponse2003Data.  # noqa: E501


        :return: The market_page_chart_index of this InlineResponse2003Data.  # noqa: E501
        :rtype: InlineResponse2003DataMarketPageChartIndex
        """
        return self._market_page_chart_index

    @market_page_chart_index.setter
    def market_page_chart_index(self, market_page_chart_index):
        """Sets the market_page_chart_index of this InlineResponse2003Data.


        :param market_page_chart_index: The market_page_chart_index of this InlineResponse2003Data.  # noqa: E501
        :type: InlineResponse2003DataMarketPageChartIndex
        """

        self._market_page_chart_index = market_page_chart_index

    @property
    def market_page_indices(self):
        """Gets the market_page_indices of this InlineResponse2003Data.  # noqa: E501


        :return: The market_page_indices of this InlineResponse2003Data.  # noqa: E501
        :rtype: list[InlineResponse2003DataMarketPageChartIndex]
        """
        return self._market_page_indices

    @market_page_indices.setter
    def market_page_indices(self, market_page_indices):
        """Sets the market_page_indices of this InlineResponse2003Data.


        :param market_page_indices: The market_page_indices of this InlineResponse2003Data.  # noqa: E501
        :type: list[InlineResponse2003DataMarketPageChartIndex]
        """

        self._market_page_indices = market_page_indices

    @property
    def market_page_futures(self):
        """Gets the market_page_futures of this InlineResponse2003Data.  # noqa: E501


        :return: The market_page_futures of this InlineResponse2003Data.  # noqa: E501
        :rtype: list[InlineResponse2003DataMarketPageFutures]
        """
        return self._market_page_futures

    @market_page_futures.setter
    def market_page_futures(self, market_page_futures):
        """Sets the market_page_futures of this InlineResponse2003Data.


        :param market_page_futures: The market_page_futures of this InlineResponse2003Data.  # noqa: E501
        :type: list[InlineResponse2003DataMarketPageFutures]
        """

        self._market_page_futures = market_page_futures

    @property
    def market_page_currencies(self):
        """Gets the market_page_currencies of this InlineResponse2003Data.  # noqa: E501


        :return: The market_page_currencies of this InlineResponse2003Data.  # noqa: E501
        :rtype: list[InlineResponse2003DataMarketPageCurrencies]
        """
        return self._market_page_currencies

    @market_page_currencies.setter
    def market_page_currencies(self, market_page_currencies):
        """Sets the market_page_currencies of this InlineResponse2003Data.


        :param market_page_currencies: The market_page_currencies of this InlineResponse2003Data.  # noqa: E501
        :type: list[InlineResponse2003DataMarketPageCurrencies]
        """

        self._market_page_currencies = market_page_currencies

    @property
    def default_stock_country_id(self):
        """Gets the default_stock_country_id of this InlineResponse2003Data.  # noqa: E501


        :return: The default_stock_country_id of this InlineResponse2003Data.  # noqa: E501
        :rtype: int
        """
        return self._default_stock_country_id

    @default_stock_country_id.setter
    def default_stock_country_id(self, default_stock_country_id):
        """Sets the default_stock_country_id of this InlineResponse2003Data.


        :param default_stock_country_id: The default_stock_country_id of this InlineResponse2003Data.  # noqa: E501
        :type: int
        """

        self._default_stock_country_id = default_stock_country_id

    @property
    def default_stock_list_type(self):
        """Gets the default_stock_list_type of this InlineResponse2003Data.  # noqa: E501


        :return: The default_stock_list_type of this InlineResponse2003Data.  # noqa: E501
        :rtype: str
        """
        return self._default_stock_list_type

    @default_stock_list_type.setter
    def default_stock_list_type(self, default_stock_list_type):
        """Sets the default_stock_list_type of this InlineResponse2003Data.


        :param default_stock_list_type: The default_stock_list_type of this InlineResponse2003Data.  # noqa: E501
        :type: str
        """

        self._default_stock_list_type = default_stock_list_type

    @property
    def default_stock_list_id(self):
        """Gets the default_stock_list_id of this InlineResponse2003Data.  # noqa: E501


        :return: The default_stock_list_id of this InlineResponse2003Data.  # noqa: E501
        :rtype: int
        """
        return self._default_stock_list_id

    @default_stock_list_id.setter
    def default_stock_list_id(self, default_stock_list_id):
        """Sets the default_stock_list_id of this InlineResponse2003Data.


        :param default_stock_list_id: The default_stock_list_id of this InlineResponse2003Data.  # noqa: E501
        :type: int
        """

        self._default_stock_list_id = default_stock_list_id

    @property
    def default_option_exchange_id(self):
        """Gets the default_option_exchange_id of this InlineResponse2003Data.  # noqa: E501


        :return: The default_option_exchange_id of this InlineResponse2003Data.  # noqa: E501
        :rtype: int
        """
        return self._default_option_exchange_id

    @default_option_exchange_id.setter
    def default_option_exchange_id(self, default_option_exchange_id):
        """Sets the default_option_exchange_id of this InlineResponse2003Data.


        :param default_option_exchange_id: The default_option_exchange_id of this InlineResponse2003Data.  # noqa: E501
        :type: int
        """

        self._default_option_exchange_id = default_option_exchange_id

    @property
    def default_option_country_id(self):
        """Gets the default_option_country_id of this InlineResponse2003Data.  # noqa: E501


        :return: The default_option_country_id of this InlineResponse2003Data.  # noqa: E501
        :rtype: int
        """
        return self._default_option_country_id

    @default_option_country_id.setter
    def default_option_country_id(self, default_option_country_id):
        """Sets the default_option_country_id of this InlineResponse2003Data.


        :param default_option_country_id: The default_option_country_id of this InlineResponse2003Data.  # noqa: E501
        :type: int
        """

        self._default_option_country_id = default_option_country_id

    @property
    def default_option_underlying_isin(self):
        """Gets the default_option_underlying_isin of this InlineResponse2003Data.  # noqa: E501


        :return: The default_option_underlying_isin of this InlineResponse2003Data.  # noqa: E501
        :rtype: str
        """
        return self._default_option_underlying_isin

    @default_option_underlying_isin.setter
    def default_option_underlying_isin(self, default_option_underlying_isin):
        """Sets the default_option_underlying_isin of this InlineResponse2003Data.


        :param default_option_underlying_isin: The default_option_underlying_isin of this InlineResponse2003Data.  # noqa: E501
        :type: str
        """

        self._default_option_underlying_isin = default_option_underlying_isin

    @property
    def default_future_exchange_id(self):
        """Gets the default_future_exchange_id of this InlineResponse2003Data.  # noqa: E501


        :return: The default_future_exchange_id of this InlineResponse2003Data.  # noqa: E501
        :rtype: int
        """
        return self._default_future_exchange_id

    @default_future_exchange_id.setter
    def default_future_exchange_id(self, default_future_exchange_id):
        """Sets the default_future_exchange_id of this InlineResponse2003Data.


        :param default_future_exchange_id: The default_future_exchange_id of this InlineResponse2003Data.  # noqa: E501
        :type: int
        """

        self._default_future_exchange_id = default_future_exchange_id

    @property
    def default_future_country_id(self):
        """Gets the default_future_country_id of this InlineResponse2003Data.  # noqa: E501


        :return: The default_future_country_id of this InlineResponse2003Data.  # noqa: E501
        :rtype: int
        """
        return self._default_future_country_id

    @default_future_country_id.setter
    def default_future_country_id(self, default_future_country_id):
        """Sets the default_future_country_id of this InlineResponse2003Data.


        :param default_future_country_id: The default_future_country_id of this InlineResponse2003Data.  # noqa: E501
        :type: int
        """

        self._default_future_country_id = default_future_country_id

    @property
    def default_future_underlying_isin(self):
        """Gets the default_future_underlying_isin of this InlineResponse2003Data.  # noqa: E501


        :return: The default_future_underlying_isin of this InlineResponse2003Data.  # noqa: E501
        :rtype: str
        """
        return self._default_future_underlying_isin

    @default_future_underlying_isin.setter
    def default_future_underlying_isin(self, default_future_underlying_isin):
        """Sets the default_future_underlying_isin of this InlineResponse2003Data.


        :param default_future_underlying_isin: The default_future_underlying_isin of this InlineResponse2003Data.  # noqa: E501
        :type: str
        """

        self._default_future_underlying_isin = default_future_underlying_isin

    @property
    def default_leveraged_exchange_id(self):
        """Gets the default_leveraged_exchange_id of this InlineResponse2003Data.  # noqa: E501


        :return: The default_leveraged_exchange_id of this InlineResponse2003Data.  # noqa: E501
        :rtype: int
        """
        return self._default_leveraged_exchange_id

    @default_leveraged_exchange_id.setter
    def default_leveraged_exchange_id(self, default_leveraged_exchange_id):
        """Sets the default_leveraged_exchange_id of this InlineResponse2003Data.


        :param default_leveraged_exchange_id: The default_leveraged_exchange_id of this InlineResponse2003Data.  # noqa: E501
        :type: int
        """

        self._default_leveraged_exchange_id = default_leveraged_exchange_id

    @property
    def default_leveraged_short_long(self):
        """Gets the default_leveraged_short_long of this InlineResponse2003Data.  # noqa: E501


        :return: The default_leveraged_short_long of this InlineResponse2003Data.  # noqa: E501
        :rtype: int
        """
        return self._default_leveraged_short_long

    @default_leveraged_short_long.setter
    def default_leveraged_short_long(self, default_leveraged_short_long):
        """Sets the default_leveraged_short_long of this InlineResponse2003Data.


        :param default_leveraged_short_long: The default_leveraged_short_long of this InlineResponse2003Data.  # noqa: E501
        :type: int
        """

        self._default_leveraged_short_long = default_leveraged_short_long

    @property
    def default_leveraged_issuer_id(self):
        """Gets the default_leveraged_issuer_id of this InlineResponse2003Data.  # noqa: E501


        :return: The default_leveraged_issuer_id of this InlineResponse2003Data.  # noqa: E501
        :rtype: int
        """
        return self._default_leveraged_issuer_id

    @default_leveraged_issuer_id.setter
    def default_leveraged_issuer_id(self, default_leveraged_issuer_id):
        """Sets the default_leveraged_issuer_id of this InlineResponse2003Data.


        :param default_leveraged_issuer_id: The default_leveraged_issuer_id of this InlineResponse2003Data.  # noqa: E501
        :type: int
        """

        self._default_leveraged_issuer_id = default_leveraged_issuer_id

    @property
    def default_leveraged_underlying_id(self):
        """Gets the default_leveraged_underlying_id of this InlineResponse2003Data.  # noqa: E501


        :return: The default_leveraged_underlying_id of this InlineResponse2003Data.  # noqa: E501
        :rtype: int
        """
        return self._default_leveraged_underlying_id

    @default_leveraged_underlying_id.setter
    def default_leveraged_underlying_id(self, default_leveraged_underlying_id):
        """Sets the default_leveraged_underlying_id of this InlineResponse2003Data.


        :param default_leveraged_underlying_id: The default_leveraged_underlying_id of this InlineResponse2003Data.  # noqa: E501
        :type: int
        """

        self._default_leveraged_underlying_id = default_leveraged_underlying_id

    @property
    def default_leveraged_popular_only(self):
        """Gets the default_leveraged_popular_only of this InlineResponse2003Data.  # noqa: E501


        :return: The default_leveraged_popular_only of this InlineResponse2003Data.  # noqa: E501
        :rtype: bool
        """
        return self._default_leveraged_popular_only

    @default_leveraged_popular_only.setter
    def default_leveraged_popular_only(self, default_leveraged_popular_only):
        """Sets the default_leveraged_popular_only of this InlineResponse2003Data.


        :param default_leveraged_popular_only: The default_leveraged_popular_only of this InlineResponse2003Data.  # noqa: E501
        :type: bool
        """

        self._default_leveraged_popular_only = default_leveraged_popular_only

    @property
    def default_bond_issuer_type(self):
        """Gets the default_bond_issuer_type of this InlineResponse2003Data.  # noqa: E501


        :return: The default_bond_issuer_type of this InlineResponse2003Data.  # noqa: E501
        :rtype: int
        """
        return self._default_bond_issuer_type

    @default_bond_issuer_type.setter
    def default_bond_issuer_type(self, default_bond_issuer_type):
        """Sets the default_bond_issuer_type of this InlineResponse2003Data.


        :param default_bond_issuer_type: The default_bond_issuer_type of this InlineResponse2003Data.  # noqa: E501
        :type: int
        """

        self._default_bond_issuer_type = default_bond_issuer_type

    @property
    def default_bond_exchange_id(self):
        """Gets the default_bond_exchange_id of this InlineResponse2003Data.  # noqa: E501


        :return: The default_bond_exchange_id of this InlineResponse2003Data.  # noqa: E501
        :rtype: int
        """
        return self._default_bond_exchange_id

    @default_bond_exchange_id.setter
    def default_bond_exchange_id(self, default_bond_exchange_id):
        """Sets the default_bond_exchange_id of this InlineResponse2003Data.


        :param default_bond_exchange_id: The default_bond_exchange_id of this InlineResponse2003Data.  # noqa: E501
        :type: int
        """

        self._default_bond_exchange_id = default_bond_exchange_id

    @property
    def default_fund_fee_type(self):
        """Gets the default_fund_fee_type of this InlineResponse2003Data.  # noqa: E501


        :return: The default_fund_fee_type of this InlineResponse2003Data.  # noqa: E501
        :rtype: int
        """
        return self._default_fund_fee_type

    @default_fund_fee_type.setter
    def default_fund_fee_type(self, default_fund_fee_type):
        """Sets the default_fund_fee_type of this InlineResponse2003Data.


        :param default_fund_fee_type: The default_fund_fee_type of this InlineResponse2003Data.  # noqa: E501
        :type: int
        """

        self._default_fund_fee_type = default_fund_fee_type

    @property
    def default_fund_issuer_id(self):
        """Gets the default_fund_issuer_id of this InlineResponse2003Data.  # noqa: E501


        :return: The default_fund_issuer_id of this InlineResponse2003Data.  # noqa: E501
        :rtype: int
        """
        return self._default_fund_issuer_id

    @default_fund_issuer_id.setter
    def default_fund_issuer_id(self, default_fund_issuer_id):
        """Sets the default_fund_issuer_id of this InlineResponse2003Data.


        :param default_fund_issuer_id: The default_fund_issuer_id of this InlineResponse2003Data.  # noqa: E501
        :type: int
        """

        self._default_fund_issuer_id = default_fund_issuer_id

    @property
    def default_etf_exchange_id(self):
        """Gets the default_etf_exchange_id of this InlineResponse2003Data.  # noqa: E501


        :return: The default_etf_exchange_id of this InlineResponse2003Data.  # noqa: E501
        :rtype: int
        """
        return self._default_etf_exchange_id

    @default_etf_exchange_id.setter
    def default_etf_exchange_id(self, default_etf_exchange_id):
        """Sets the default_etf_exchange_id of this InlineResponse2003Data.


        :param default_etf_exchange_id: The default_etf_exchange_id of this InlineResponse2003Data.  # noqa: E501
        :type: int
        """

        self._default_etf_exchange_id = default_etf_exchange_id

    @property
    def default_etf_fee_type(self):
        """Gets the default_etf_fee_type of this InlineResponse2003Data.  # noqa: E501


        :return: The default_etf_fee_type of this InlineResponse2003Data.  # noqa: E501
        :rtype: int
        """
        return self._default_etf_fee_type

    @default_etf_fee_type.setter
    def default_etf_fee_type(self, default_etf_fee_type):
        """Sets the default_etf_fee_type of this InlineResponse2003Data.


        :param default_etf_fee_type: The default_etf_fee_type of this InlineResponse2003Data.  # noqa: E501
        :type: int
        """

        self._default_etf_fee_type = default_etf_fee_type

    @property
    def default_etf_issuer_id(self):
        """Gets the default_etf_issuer_id of this InlineResponse2003Data.  # noqa: E501


        :return: The default_etf_issuer_id of this InlineResponse2003Data.  # noqa: E501
        :rtype: int
        """
        return self._default_etf_issuer_id

    @default_etf_issuer_id.setter
    def default_etf_issuer_id(self, default_etf_issuer_id):
        """Sets the default_etf_issuer_id of this InlineResponse2003Data.


        :param default_etf_issuer_id: The default_etf_issuer_id of this InlineResponse2003Data.  # noqa: E501
        :type: int
        """

        self._default_etf_issuer_id = default_etf_issuer_id

    @property
    def default_etf_popular_only(self):
        """Gets the default_etf_popular_only of this InlineResponse2003Data.  # noqa: E501


        :return: The default_etf_popular_only of this InlineResponse2003Data.  # noqa: E501
        :rtype: bool
        """
        return self._default_etf_popular_only

    @default_etf_popular_only.setter
    def default_etf_popular_only(self, default_etf_popular_only):
        """Sets the default_etf_popular_only of this InlineResponse2003Data.


        :param default_etf_popular_only: The default_etf_popular_only of this InlineResponse2003Data.  # noqa: E501
        :type: bool
        """

        self._default_etf_popular_only = default_etf_popular_only

    @property
    def default_cfd_exchange_id(self):
        """Gets the default_cfd_exchange_id of this InlineResponse2003Data.  # noqa: E501


        :return: The default_cfd_exchange_id of this InlineResponse2003Data.  # noqa: E501
        :rtype: int
        """
        return self._default_cfd_exchange_id

    @default_cfd_exchange_id.setter
    def default_cfd_exchange_id(self, default_cfd_exchange_id):
        """Sets the default_cfd_exchange_id of this InlineResponse2003Data.


        :param default_cfd_exchange_id: The default_cfd_exchange_id of this InlineResponse2003Data.  # noqa: E501
        :type: int
        """

        self._default_cfd_exchange_id = default_cfd_exchange_id

    @property
    def default_warrant_underlying_name(self):
        """Gets the default_warrant_underlying_name of this InlineResponse2003Data.  # noqa: E501


        :return: The default_warrant_underlying_name of this InlineResponse2003Data.  # noqa: E501
        :rtype: int
        """
        return self._default_warrant_underlying_name

    @default_warrant_underlying_name.setter
    def default_warrant_underlying_name(self, default_warrant_underlying_name):
        """Sets the default_warrant_underlying_name of this InlineResponse2003Data.


        :param default_warrant_underlying_name: The default_warrant_underlying_name of this InlineResponse2003Data.  # noqa: E501
        :type: int
        """

        self._default_warrant_underlying_name = default_warrant_underlying_name

    @property
    def default_warrant_issuer_name(self):
        """Gets the default_warrant_issuer_name of this InlineResponse2003Data.  # noqa: E501


        :return: The default_warrant_issuer_name of this InlineResponse2003Data.  # noqa: E501
        :rtype: int
        """
        return self._default_warrant_issuer_name

    @default_warrant_issuer_name.setter
    def default_warrant_issuer_name(self, default_warrant_issuer_name):
        """Sets the default_warrant_issuer_name of this InlineResponse2003Data.


        :param default_warrant_issuer_name: The default_warrant_issuer_name of this InlineResponse2003Data.  # noqa: E501
        :type: int
        """

        self._default_warrant_issuer_name = default_warrant_issuer_name

    @property
    def decimal_delimiter(self):
        """Gets the decimal_delimiter of this InlineResponse2003Data.  # noqa: E501


        :return: The decimal_delimiter of this InlineResponse2003Data.  # noqa: E501
        :rtype: str
        """
        return self._decimal_delimiter

    @decimal_delimiter.setter
    def decimal_delimiter(self, decimal_delimiter):
        """Sets the decimal_delimiter of this InlineResponse2003Data.


        :param decimal_delimiter: The decimal_delimiter of this InlineResponse2003Data.  # noqa: E501
        :type: str
        """

        self._decimal_delimiter = decimal_delimiter

    @property
    def thousand_delimiter(self):
        """Gets the thousand_delimiter of this InlineResponse2003Data.  # noqa: E501


        :return: The thousand_delimiter of this InlineResponse2003Data.  # noqa: E501
        :rtype: str
        """
        return self._thousand_delimiter

    @thousand_delimiter.setter
    def thousand_delimiter(self, thousand_delimiter):
        """Sets the thousand_delimiter of this InlineResponse2003Data.


        :param thousand_delimiter: The thousand_delimiter of this InlineResponse2003Data.  # noqa: E501
        :type: str
        """

        self._thousand_delimiter = thousand_delimiter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2003Data, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2003Data):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
