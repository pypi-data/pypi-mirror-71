# coding: utf-8

"""
    Unofficial Degiro API

    Unofficial Degiro API  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: maximdeclercq00@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from degiro_client.models.update_response_part import UpdateResponsePart  # noqa: F401,E501

class UpdateResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'orders': 'UpdateResponsePart',
        'historical_orders': 'UpdateResponsePart',
        'transactions': 'UpdateResponsePart',
        'portfolio': 'UpdateResponsePart',
        'cash_funds': 'UpdateResponsePart'
    }

    attribute_map = {
        'orders': 'orders',
        'historical_orders': 'historicalOrders',
        'transactions': 'transactions',
        'portfolio': 'portfolio',
        'cash_funds': 'cashFunds'
    }

    def __init__(self, orders=None, historical_orders=None, transactions=None, portfolio=None, cash_funds=None):  # noqa: E501
        """UpdateResponse - a model defined in Swagger"""  # noqa: E501
        self._orders = None
        self._historical_orders = None
        self._transactions = None
        self._portfolio = None
        self._cash_funds = None
        self.discriminator = None
        if orders is not None:
            self.orders = orders
        if historical_orders is not None:
            self.historical_orders = historical_orders
        if transactions is not None:
            self.transactions = transactions
        if portfolio is not None:
            self.portfolio = portfolio
        if cash_funds is not None:
            self.cash_funds = cash_funds

    @property
    def orders(self):
        """Gets the orders of this UpdateResponse.  # noqa: E501


        :return: The orders of this UpdateResponse.  # noqa: E501
        :rtype: UpdateResponsePart
        """
        return self._orders

    @orders.setter
    def orders(self, orders):
        """Sets the orders of this UpdateResponse.


        :param orders: The orders of this UpdateResponse.  # noqa: E501
        :type: UpdateResponsePart
        """

        self._orders = orders

    @property
    def historical_orders(self):
        """Gets the historical_orders of this UpdateResponse.  # noqa: E501


        :return: The historical_orders of this UpdateResponse.  # noqa: E501
        :rtype: UpdateResponsePart
        """
        return self._historical_orders

    @historical_orders.setter
    def historical_orders(self, historical_orders):
        """Sets the historical_orders of this UpdateResponse.


        :param historical_orders: The historical_orders of this UpdateResponse.  # noqa: E501
        :type: UpdateResponsePart
        """

        self._historical_orders = historical_orders

    @property
    def transactions(self):
        """Gets the transactions of this UpdateResponse.  # noqa: E501


        :return: The transactions of this UpdateResponse.  # noqa: E501
        :rtype: UpdateResponsePart
        """
        return self._transactions

    @transactions.setter
    def transactions(self, transactions):
        """Sets the transactions of this UpdateResponse.


        :param transactions: The transactions of this UpdateResponse.  # noqa: E501
        :type: UpdateResponsePart
        """

        self._transactions = transactions

    @property
    def portfolio(self):
        """Gets the portfolio of this UpdateResponse.  # noqa: E501


        :return: The portfolio of this UpdateResponse.  # noqa: E501
        :rtype: UpdateResponsePart
        """
        return self._portfolio

    @portfolio.setter
    def portfolio(self, portfolio):
        """Sets the portfolio of this UpdateResponse.


        :param portfolio: The portfolio of this UpdateResponse.  # noqa: E501
        :type: UpdateResponsePart
        """

        self._portfolio = portfolio

    @property
    def cash_funds(self):
        """Gets the cash_funds of this UpdateResponse.  # noqa: E501


        :return: The cash_funds of this UpdateResponse.  # noqa: E501
        :rtype: UpdateResponsePart
        """
        return self._cash_funds

    @cash_funds.setter
    def cash_funds(self, cash_funds):
        """Sets the cash_funds of this UpdateResponse.


        :param cash_funds: The cash_funds of this UpdateResponse.  # noqa: E501
        :type: UpdateResponsePart
        """

        self._cash_funds = cash_funds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
