# coding: utf-8

"""
    Unofficial Degiro API

    Unofficial Degiro API  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: maximdeclercq00@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from degiro_client.api_client import ApiClient


class TradingApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def account_info(self, int_account, session_id, **kwargs):  # noqa: E501
        """TODO  # noqa: E501

        TODO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_info(int_account, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int int_account: Account ID (required)
        :param str session_id: Session ID (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_info_with_http_info(int_account, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.account_info_with_http_info(int_account, session_id, **kwargs)  # noqa: E501
            return data

    def account_info_with_http_info(self, int_account, session_id, **kwargs):  # noqa: E501
        """TODO  # noqa: E501

        TODO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_info_with_http_info(int_account, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int int_account: Account ID (required)
        :param str session_id: Session ID (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['int_account', 'session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'int_account' is set
        if ('int_account' not in params or
                params['int_account'] is None):
            raise ValueError("Missing the required parameter `int_account` when calling `account_info`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `account_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'int_account' in params:
            path_params['intAccount'] = params['int_account']  # noqa: E501
        if 'session_id' in params:
            path_params['sessionId'] = params['session_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['IntAccountAuth', 'SessionIdAuth']  # noqa: E501

        return self.api_client.call_api(
            '/trading/secure/v5/account/info/{intAccount};jsessionid={sessionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def check_order(self, body, session_id, **kwargs):  # noqa: E501
        """TODO  # noqa: E501

        TODO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.check_order(body, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrderRequest body: A JSON object containing the order to check. (required)
        :param str session_id: Session ID (required)
        :return: CheckOrderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.check_order_with_http_info(body, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.check_order_with_http_info(body, session_id, **kwargs)  # noqa: E501
            return data

    def check_order_with_http_info(self, body, session_id, **kwargs):  # noqa: E501
        """TODO  # noqa: E501

        TODO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.check_order_with_http_info(body, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrderRequest body: A JSON object containing the order to check. (required)
        :param str session_id: Session ID (required)
        :return: CheckOrderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method check_order" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `check_order`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `check_order`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['sessionId'] = params['session_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/trading/secure/v5/checkOrder;jsessionid={sessionId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CheckOrderResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def order(self, body, confirmation_id, session_id, **kwargs):  # noqa: E501
        """TODO  # noqa: E501

        TODO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order(body, confirmation_id, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrderRequest body: A JSON object containing the order. (required)
        :param str confirmation_id: Indentifier to execute the order with (required)
        :param str session_id: Session ID (required)
        :return: OrderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.order_with_http_info(body, confirmation_id, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.order_with_http_info(body, confirmation_id, session_id, **kwargs)  # noqa: E501
            return data

    def order_with_http_info(self, body, confirmation_id, session_id, **kwargs):  # noqa: E501
        """TODO  # noqa: E501

        TODO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_with_http_info(body, confirmation_id, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrderRequest body: A JSON object containing the order. (required)
        :param str confirmation_id: Indentifier to execute the order with (required)
        :param str session_id: Session ID (required)
        :return: OrderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'confirmation_id', 'session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method order" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `order`")  # noqa: E501
        # verify the required parameter 'confirmation_id' is set
        if ('confirmation_id' not in params or
                params['confirmation_id'] is None):
            raise ValueError("Missing the required parameter `confirmation_id` when calling `order`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `order`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'confirmation_id' in params:
            path_params['confirmationId'] = params['confirmation_id']  # noqa: E501
        if 'session_id' in params:
            path_params['sessionId'] = params['session_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/trading/secure/v5/order/{confirmationId};jsessionid={sessionId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrderResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update(self, int_account, session_id, **kwargs):  # noqa: E501
        """TODO  # noqa: E501

        TODO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update(int_account, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int int_account: Account ID (required)
        :param str session_id: Session ID (required)
        :param int orders: Get orders (Set to 0)
        :param int historical_orders: Get historical orders (Set to 0)
        :param int transactions: Get transactions (Set to 0)
        :param int portfolio: Get portfolio (Set to 0)
        :param int cash_funds: Get cash funds (Set to 0)
        :return: UpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_with_http_info(int_account, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_with_http_info(int_account, session_id, **kwargs)  # noqa: E501
            return data

    def update_with_http_info(self, int_account, session_id, **kwargs):  # noqa: E501
        """TODO  # noqa: E501

        TODO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_with_http_info(int_account, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int int_account: Account ID (required)
        :param str session_id: Session ID (required)
        :param int orders: Get orders (Set to 0)
        :param int historical_orders: Get historical orders (Set to 0)
        :param int transactions: Get transactions (Set to 0)
        :param int portfolio: Get portfolio (Set to 0)
        :param int cash_funds: Get cash funds (Set to 0)
        :return: UpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['int_account', 'session_id', 'orders', 'historical_orders', 'transactions', 'portfolio', 'cash_funds']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'int_account' is set
        if ('int_account' not in params or
                params['int_account'] is None):
            raise ValueError("Missing the required parameter `int_account` when calling `update`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'int_account' in params:
            path_params['intAccount'] = params['int_account']  # noqa: E501
        if 'session_id' in params:
            path_params['sessionId'] = params['session_id']  # noqa: E501

        query_params = []
        if 'orders' in params:
            query_params.append(('orders', params['orders']))  # noqa: E501
        if 'historical_orders' in params:
            query_params.append(('historicalOrders', params['historical_orders']))  # noqa: E501
        if 'transactions' in params:
            query_params.append(('transactions', params['transactions']))  # noqa: E501
        if 'portfolio' in params:
            query_params.append(('portfolio', params['portfolio']))  # noqa: E501
        if 'cash_funds' in params:
            query_params.append(('cashFunds', params['cash_funds']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['IntAccountAuth', 'SessionIdAuth']  # noqa: E501

        return self.api_client.call_api(
            '/trading/secure/v5/update/{intAccount};jsessionid={sessionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpdateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
