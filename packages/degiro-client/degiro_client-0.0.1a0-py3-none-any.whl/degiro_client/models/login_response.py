# coding: utf-8

"""
    Unofficial Degiro API

    Unofficial Degiro API  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class LoginResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'int',
        'status_text': 'str',
        'session_id': 'str',
        'redirect_url': 'str',
        'locale': 'str',
        'is_pass_code_enabled': 'bool'
    }

    attribute_map = {
        'status': 'status',
        'status_text': 'statusText',
        'session_id': 'sessionId',
        'redirect_url': 'redirectUrl',
        'locale': 'locale',
        'is_pass_code_enabled': 'isPassCodeEnabled'
    }

    def __init__(self, status=None, status_text=None, session_id=None, redirect_url=None, locale=None, is_pass_code_enabled=None):  # noqa: E501
        """LoginResponse - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._status_text = None
        self._session_id = None
        self._redirect_url = None
        self._locale = None
        self._is_pass_code_enabled = None
        self.discriminator = None
        self.status = status
        self.status_text = status_text
        self.session_id = session_id
        if redirect_url is not None:
            self.redirect_url = redirect_url
        if locale is not None:
            self.locale = locale
        if is_pass_code_enabled is not None:
            self.is_pass_code_enabled = is_pass_code_enabled

    @property
    def status(self):
        """Gets the status of this LoginResponse.  # noqa: E501


        :return: The status of this LoginResponse.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LoginResponse.


        :param status: The status of this LoginResponse.  # noqa: E501
        :type: int
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def status_text(self):
        """Gets the status_text of this LoginResponse.  # noqa: E501


        :return: The status_text of this LoginResponse.  # noqa: E501
        :rtype: str
        """
        return self._status_text

    @status_text.setter
    def status_text(self, status_text):
        """Sets the status_text of this LoginResponse.


        :param status_text: The status_text of this LoginResponse.  # noqa: E501
        :type: str
        """
        if status_text is None:
            raise ValueError("Invalid value for `status_text`, must not be `None`")  # noqa: E501

        self._status_text = status_text

    @property
    def session_id(self):
        """Gets the session_id of this LoginResponse.  # noqa: E501


        :return: The session_id of this LoginResponse.  # noqa: E501
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this LoginResponse.


        :param session_id: The session_id of this LoginResponse.  # noqa: E501
        :type: str
        """
        if session_id is None:
            raise ValueError("Invalid value for `session_id`, must not be `None`")  # noqa: E501

        self._session_id = session_id

    @property
    def redirect_url(self):
        """Gets the redirect_url of this LoginResponse.  # noqa: E501


        :return: The redirect_url of this LoginResponse.  # noqa: E501
        :rtype: str
        """
        return self._redirect_url

    @redirect_url.setter
    def redirect_url(self, redirect_url):
        """Sets the redirect_url of this LoginResponse.


        :param redirect_url: The redirect_url of this LoginResponse.  # noqa: E501
        :type: str
        """

        self._redirect_url = redirect_url

    @property
    def locale(self):
        """Gets the locale of this LoginResponse.  # noqa: E501


        :return: The locale of this LoginResponse.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this LoginResponse.


        :param locale: The locale of this LoginResponse.  # noqa: E501
        :type: str
        """

        self._locale = locale

    @property
    def is_pass_code_enabled(self):
        """Gets the is_pass_code_enabled of this LoginResponse.  # noqa: E501


        :return: The is_pass_code_enabled of this LoginResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_pass_code_enabled

    @is_pass_code_enabled.setter
    def is_pass_code_enabled(self, is_pass_code_enabled):
        """Sets the is_pass_code_enabled of this LoginResponse.


        :param is_pass_code_enabled: The is_pass_code_enabled of this LoginResponse.  # noqa: E501
        :type: bool
        """

        self._is_pass_code_enabled = is_pass_code_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoginResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoginResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
