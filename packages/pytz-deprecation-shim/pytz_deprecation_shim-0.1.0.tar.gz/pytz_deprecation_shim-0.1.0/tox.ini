[tox]
minversion = 3.3.0
isolated_build = True
skip_missing_interpreters = true

[testenv]
description = Run the tests
deps =
    attrs
    coverage[toml]
    hypothesis>=5.7.0; python_version>="3.6"
    hypothesis; python_version<="2.7"
    pytz; python_version!="2.7"
    pytz==2019.3; python_version=="2.7"
    pytest
    pytest-cov
    pytest-randomly
    pytest-xdist
passenv =
    HYPOTHESIS_PROFILE
    PYTZ_TZDATADIR
    PYTHONTZPATH
setenv =
    COVERAGE_FILE={toxworkdir}/.coverage/.coverage.{envname}
commands =
    pytest {toxinidir} {posargs: {env:DEFAULT_TEST_POSARGS:--cov=pytz_deprecation_shim --cov=tests}}

[testenv:coverage-report]
skip_install = true
deps = coverage[toml]>=5.0.2
depends = py38
setenv=COVERAGE_FILE=.coverage
changedir = {toxworkdir}/.coverage
commands =
    coverage combine
    coverage report
    coverage xml

[testenv:codecov]
description = [only run on CI]: upload coverage data to codecov (depends on coverage running first)
deps = codecov
depends = coverage-report
passenv = CODECOV_TOKEN
skip_install = True
commands =
    python -m codecov --file {toxworkdir}/.coverage/coverage.xml

[testenv:format]
description = Run auto formatters
skip_install = True
whitelist_externals =
    bash
deps =
    black
    isort
commands =
    black .
    isort -rc docs src tests

[testenv:precommit]
description = Run the pre-commit hooks on all files
skip_install = True
deps =
    pre-commit
commands =
    pre-commit install -f --install-hooks
    pre-commit run --all-files

[testenv:update-test-data]
description = Update the test data JSON file
skip_install = True
deps =
    backports.zoneinfo
commands =
    python scripts/update_test_data.py

[testenv:lint]
description = Run linting checks
skip_install = True
deps =
    black
    isort
    pylint
commands =
    black --check .
    isort --check-only --recursive docs src tests
    pylint src tests

[testenv:docs]
description = Build the documentation
deps =
    -rdocs/requirements.txt
commands =
    sphinx-build -d "{toxworkdir}/docs_doctree" "{toxinidir}/docs" \
                    "{toxinidir}/docs/_output" {posargs: -j auto --color -bhtml}

[testenv:build]
description = Build a wheel and source distribution
skip_install = True
passenv = *
deps =
    pep517
commands =
    python -m pep517.build {posargs} {toxinidir} -o {toxinidir}/dist

[testenv:build-check]
description = Build a wheel and source distribution
skip_install = True
deps =
    twine
depends = build
commands =
    twine check dist/*

[testenv:release]
description = Make a release; must be called after "build"
skip_install = True
deps =
    twine
depends =
    build
passenv =
    TWINE_*
commands =
    twine check {toxinidir}/dist/*
    twine upload {toxinidir}/dist/* \
                 {posargs:-r {env:TWINE_REPOSITORY:testpypi} --non-interactive}
