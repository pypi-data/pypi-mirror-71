Determining if the system is big endian passed with the following output:
Change Dir: /tmp/pip-req-build-yeqf_vl_/openjpeg/src/openjpeg/build/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/gmake "cmTryCompileExec3720873004/fast"
/usr/bin/gmake -f CMakeFiles/cmTryCompileExec3720873004.dir/build.make CMakeFiles/cmTryCompileExec3720873004.dir/build
gmake[1]: Entering directory `/tmp/pip-req-build-yeqf_vl_/openjpeg/src/openjpeg/build/CMakeFiles/CMakeTmp'
/usr/bin/cmake -E cmake_progress_report /tmp/pip-req-build-yeqf_vl_/openjpeg/src/openjpeg/build/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3720873004.dir/TestEndianess.c.o
/opt/rh/devtoolset-8/root/usr/bin/cc    -o CMakeFiles/cmTryCompileExec3720873004.dir/TestEndianess.c.o   -c /tmp/pip-req-build-yeqf_vl_/openjpeg/src/openjpeg/build/CMakeFiles/CMakeTmp/TestEndianess.c
Linking C executable cmTryCompileExec3720873004
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3720873004.dir/link.txt --verbose=1
/opt/rh/devtoolset-8/root/usr/bin/cc       CMakeFiles/cmTryCompileExec3720873004.dir/TestEndianess.c.o  -o cmTryCompileExec3720873004 -rdynamic 
gmake[1]: Leaving directory `/tmp/pip-req-build-yeqf_vl_/openjpeg/src/openjpeg/build/CMakeFiles/CMakeTmp'

TestEndianess.c:
/* A 16 bit integer is required. */
typedef unsigned short cmakeint16;

/* On a little endian machine, these 16bit ints will give "THIS IS LITTLE ENDIAN."
   On a big endian machine the characters will be exchanged pairwise. */
const cmakeint16 info_little[] =  {0x4854, 0x5349, 0x4920, 0x2053, 0x494c, 0x5454, 0x454c, 0x4520, 0x444e, 0x4149, 0x2e4e, 0x0000};

/* on a big endian machine, these 16bit ints will give "THIS IS BIG ENDIAN."
   On a little endian machine the characters will be exchanged pairwise. */
const cmakeint16 info_big[] =     {0x5448, 0x4953, 0x2049, 0x5320, 0x4249, 0x4720, 0x454e, 0x4449, 0x414e, 0x2e2e, 0x0000};

#ifdef __CLASSIC_C__
int main(argc, argv) int argc; char *argv[];
#else
int main(int argc, char *argv[])
#endif
{
  int require = 0;
  require += info_little[argc];
  require += info_big[argc];
  (void)argv;
  return require;
}


Determining if the _aligned_malloc exist failed with the following output:
Change Dir: /tmp/pip-req-build-yeqf_vl_/openjpeg/src/openjpeg/build/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/gmake "cmTryCompileExec1465558574/fast"
/usr/bin/gmake -f CMakeFiles/cmTryCompileExec1465558574.dir/build.make CMakeFiles/cmTryCompileExec1465558574.dir/build
gmake[1]: Entering directory `/tmp/pip-req-build-yeqf_vl_/openjpeg/src/openjpeg/build/CMakeFiles/CMakeTmp'
/usr/bin/cmake -E cmake_progress_report /tmp/pip-req-build-yeqf_vl_/openjpeg/src/openjpeg/build/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1465558574.dir/CheckSymbolExists.c.o
/opt/rh/devtoolset-8/root/usr/bin/cc    -o CMakeFiles/cmTryCompileExec1465558574.dir/CheckSymbolExists.c.o   -c /tmp/pip-req-build-yeqf_vl_/openjpeg/src/openjpeg/build/CMakeFiles/CMakeTmp/CheckSymbolExists.c
/tmp/pip-req-build-yeqf_vl_/openjpeg/src/openjpeg/build/CMakeFiles/CMakeTmp/CheckSymbolExists.c: In function ‘main’:
/tmp/pip-req-build-yeqf_vl_/openjpeg/src/openjpeg/build/CMakeFiles/CMakeTmp/CheckSymbolExists.c:8:19: error: ‘_aligned_malloc’ undeclared (first use in this function); did you mean ‘__builtin_malloc’?
   return ((int*)(&_aligned_malloc))[argc];
                   ^~~~~~~~~~~~~~~
                   __builtin_malloc
/tmp/pip-req-build-yeqf_vl_/openjpeg/src/openjpeg/build/CMakeFiles/CMakeTmp/CheckSymbolExists.c:8:19: note: each undeclared identifier is reported only once for each function it appears in
gmake[1]: *** [CMakeFiles/cmTryCompileExec1465558574.dir/CheckSymbolExists.c.o] Error 1
gmake[1]: Leaving directory `/tmp/pip-req-build-yeqf_vl_/openjpeg/src/openjpeg/build/CMakeFiles/CMakeTmp'
gmake: *** [cmTryCompileExec1465558574/fast] Error 2

File /tmp/pip-req-build-yeqf_vl_/openjpeg/src/openjpeg/build/CMakeFiles/CMakeTmp/CheckSymbolExists.c:
/* */
#include <malloc.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef _aligned_malloc
  return ((int*)(&_aligned_malloc))[argc];
#else
  (void)argc;
  return 0;
#endif
}

