# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import conflicts_pb2 as conflicts__pb2


class ConflictsServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.ListConflictFiles = channel.unary_stream(
        '/gitaly.ConflictsService/ListConflictFiles',
        request_serializer=conflicts__pb2.ListConflictFilesRequest.SerializeToString,
        response_deserializer=conflicts__pb2.ListConflictFilesResponse.FromString,
        )
    self.ResolveConflicts = channel.stream_unary(
        '/gitaly.ConflictsService/ResolveConflicts',
        request_serializer=conflicts__pb2.ResolveConflictsRequest.SerializeToString,
        response_deserializer=conflicts__pb2.ResolveConflictsResponse.FromString,
        )


class ConflictsServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def ListConflictFiles(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ResolveConflicts(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ConflictsServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'ListConflictFiles': grpc.unary_stream_rpc_method_handler(
          servicer.ListConflictFiles,
          request_deserializer=conflicts__pb2.ListConflictFilesRequest.FromString,
          response_serializer=conflicts__pb2.ListConflictFilesResponse.SerializeToString,
      ),
      'ResolveConflicts': grpc.stream_unary_rpc_method_handler(
          servicer.ResolveConflicts,
          request_deserializer=conflicts__pb2.ResolveConflictsRequest.FromString,
          response_serializer=conflicts__pb2.ResolveConflictsResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'gitaly.ConflictsService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
