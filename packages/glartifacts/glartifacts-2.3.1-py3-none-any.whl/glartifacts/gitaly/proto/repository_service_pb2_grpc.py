# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import repository_service_pb2 as repository__service__pb2


class RepositoryServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.RepositoryExists = channel.unary_unary(
        '/gitaly.RepositoryService/RepositoryExists',
        request_serializer=repository__service__pb2.RepositoryExistsRequest.SerializeToString,
        response_deserializer=repository__service__pb2.RepositoryExistsResponse.FromString,
        )
    self.RepackIncremental = channel.unary_unary(
        '/gitaly.RepositoryService/RepackIncremental',
        request_serializer=repository__service__pb2.RepackIncrementalRequest.SerializeToString,
        response_deserializer=repository__service__pb2.RepackIncrementalResponse.FromString,
        )
    self.RepackFull = channel.unary_unary(
        '/gitaly.RepositoryService/RepackFull',
        request_serializer=repository__service__pb2.RepackFullRequest.SerializeToString,
        response_deserializer=repository__service__pb2.RepackFullResponse.FromString,
        )
    self.GarbageCollect = channel.unary_unary(
        '/gitaly.RepositoryService/GarbageCollect',
        request_serializer=repository__service__pb2.GarbageCollectRequest.SerializeToString,
        response_deserializer=repository__service__pb2.GarbageCollectResponse.FromString,
        )
    self.RepositorySize = channel.unary_unary(
        '/gitaly.RepositoryService/RepositorySize',
        request_serializer=repository__service__pb2.RepositorySizeRequest.SerializeToString,
        response_deserializer=repository__service__pb2.RepositorySizeResponse.FromString,
        )
    self.ApplyGitattributes = channel.unary_unary(
        '/gitaly.RepositoryService/ApplyGitattributes',
        request_serializer=repository__service__pb2.ApplyGitattributesRequest.SerializeToString,
        response_deserializer=repository__service__pb2.ApplyGitattributesResponse.FromString,
        )
    self.FetchRemote = channel.unary_unary(
        '/gitaly.RepositoryService/FetchRemote',
        request_serializer=repository__service__pb2.FetchRemoteRequest.SerializeToString,
        response_deserializer=repository__service__pb2.FetchRemoteResponse.FromString,
        )
    self.CreateRepository = channel.unary_unary(
        '/gitaly.RepositoryService/CreateRepository',
        request_serializer=repository__service__pb2.CreateRepositoryRequest.SerializeToString,
        response_deserializer=repository__service__pb2.CreateRepositoryResponse.FromString,
        )
    self.GetArchive = channel.unary_stream(
        '/gitaly.RepositoryService/GetArchive',
        request_serializer=repository__service__pb2.GetArchiveRequest.SerializeToString,
        response_deserializer=repository__service__pb2.GetArchiveResponse.FromString,
        )
    self.HasLocalBranches = channel.unary_unary(
        '/gitaly.RepositoryService/HasLocalBranches',
        request_serializer=repository__service__pb2.HasLocalBranchesRequest.SerializeToString,
        response_deserializer=repository__service__pb2.HasLocalBranchesResponse.FromString,
        )
    self.FetchSourceBranch = channel.unary_unary(
        '/gitaly.RepositoryService/FetchSourceBranch',
        request_serializer=repository__service__pb2.FetchSourceBranchRequest.SerializeToString,
        response_deserializer=repository__service__pb2.FetchSourceBranchResponse.FromString,
        )
    self.Fsck = channel.unary_unary(
        '/gitaly.RepositoryService/Fsck',
        request_serializer=repository__service__pb2.FsckRequest.SerializeToString,
        response_deserializer=repository__service__pb2.FsckResponse.FromString,
        )
    self.WriteRef = channel.unary_unary(
        '/gitaly.RepositoryService/WriteRef',
        request_serializer=repository__service__pb2.WriteRefRequest.SerializeToString,
        response_deserializer=repository__service__pb2.WriteRefResponse.FromString,
        )
    self.FindMergeBase = channel.unary_unary(
        '/gitaly.RepositoryService/FindMergeBase',
        request_serializer=repository__service__pb2.FindMergeBaseRequest.SerializeToString,
        response_deserializer=repository__service__pb2.FindMergeBaseResponse.FromString,
        )
    self.CreateFork = channel.unary_unary(
        '/gitaly.RepositoryService/CreateFork',
        request_serializer=repository__service__pb2.CreateForkRequest.SerializeToString,
        response_deserializer=repository__service__pb2.CreateForkResponse.FromString,
        )
    self.IsRebaseInProgress = channel.unary_unary(
        '/gitaly.RepositoryService/IsRebaseInProgress',
        request_serializer=repository__service__pb2.IsRebaseInProgressRequest.SerializeToString,
        response_deserializer=repository__service__pb2.IsRebaseInProgressResponse.FromString,
        )
    self.IsSquashInProgress = channel.unary_unary(
        '/gitaly.RepositoryService/IsSquashInProgress',
        request_serializer=repository__service__pb2.IsSquashInProgressRequest.SerializeToString,
        response_deserializer=repository__service__pb2.IsSquashInProgressResponse.FromString,
        )
    self.CreateRepositoryFromURL = channel.unary_unary(
        '/gitaly.RepositoryService/CreateRepositoryFromURL',
        request_serializer=repository__service__pb2.CreateRepositoryFromURLRequest.SerializeToString,
        response_deserializer=repository__service__pb2.CreateRepositoryFromURLResponse.FromString,
        )
    self.CreateBundle = channel.unary_stream(
        '/gitaly.RepositoryService/CreateBundle',
        request_serializer=repository__service__pb2.CreateBundleRequest.SerializeToString,
        response_deserializer=repository__service__pb2.CreateBundleResponse.FromString,
        )
    self.CreateRepositoryFromBundle = channel.stream_unary(
        '/gitaly.RepositoryService/CreateRepositoryFromBundle',
        request_serializer=repository__service__pb2.CreateRepositoryFromBundleRequest.SerializeToString,
        response_deserializer=repository__service__pb2.CreateRepositoryFromBundleResponse.FromString,
        )
    self.WriteConfig = channel.unary_unary(
        '/gitaly.RepositoryService/WriteConfig',
        request_serializer=repository__service__pb2.WriteConfigRequest.SerializeToString,
        response_deserializer=repository__service__pb2.WriteConfigResponse.FromString,
        )
    self.SetConfig = channel.unary_unary(
        '/gitaly.RepositoryService/SetConfig',
        request_serializer=repository__service__pb2.SetConfigRequest.SerializeToString,
        response_deserializer=repository__service__pb2.SetConfigResponse.FromString,
        )
    self.DeleteConfig = channel.unary_unary(
        '/gitaly.RepositoryService/DeleteConfig',
        request_serializer=repository__service__pb2.DeleteConfigRequest.SerializeToString,
        response_deserializer=repository__service__pb2.DeleteConfigResponse.FromString,
        )
    self.FindLicense = channel.unary_unary(
        '/gitaly.RepositoryService/FindLicense',
        request_serializer=repository__service__pb2.FindLicenseRequest.SerializeToString,
        response_deserializer=repository__service__pb2.FindLicenseResponse.FromString,
        )
    self.GetInfoAttributes = channel.unary_stream(
        '/gitaly.RepositoryService/GetInfoAttributes',
        request_serializer=repository__service__pb2.GetInfoAttributesRequest.SerializeToString,
        response_deserializer=repository__service__pb2.GetInfoAttributesResponse.FromString,
        )
    self.CalculateChecksum = channel.unary_unary(
        '/gitaly.RepositoryService/CalculateChecksum',
        request_serializer=repository__service__pb2.CalculateChecksumRequest.SerializeToString,
        response_deserializer=repository__service__pb2.CalculateChecksumResponse.FromString,
        )
    self.Cleanup = channel.unary_unary(
        '/gitaly.RepositoryService/Cleanup',
        request_serializer=repository__service__pb2.CleanupRequest.SerializeToString,
        response_deserializer=repository__service__pb2.CleanupResponse.FromString,
        )
    self.GetSnapshot = channel.unary_stream(
        '/gitaly.RepositoryService/GetSnapshot',
        request_serializer=repository__service__pb2.GetSnapshotRequest.SerializeToString,
        response_deserializer=repository__service__pb2.GetSnapshotResponse.FromString,
        )
    self.CreateRepositoryFromSnapshot = channel.unary_unary(
        '/gitaly.RepositoryService/CreateRepositoryFromSnapshot',
        request_serializer=repository__service__pb2.CreateRepositoryFromSnapshotRequest.SerializeToString,
        response_deserializer=repository__service__pb2.CreateRepositoryFromSnapshotResponse.FromString,
        )
    self.GetRawChanges = channel.unary_stream(
        '/gitaly.RepositoryService/GetRawChanges',
        request_serializer=repository__service__pb2.GetRawChangesRequest.SerializeToString,
        response_deserializer=repository__service__pb2.GetRawChangesResponse.FromString,
        )
    self.SearchFilesByContent = channel.unary_stream(
        '/gitaly.RepositoryService/SearchFilesByContent',
        request_serializer=repository__service__pb2.SearchFilesByContentRequest.SerializeToString,
        response_deserializer=repository__service__pb2.SearchFilesByContentResponse.FromString,
        )
    self.SearchFilesByName = channel.unary_stream(
        '/gitaly.RepositoryService/SearchFilesByName',
        request_serializer=repository__service__pb2.SearchFilesByNameRequest.SerializeToString,
        response_deserializer=repository__service__pb2.SearchFilesByNameResponse.FromString,
        )
    self.RestoreCustomHooks = channel.stream_unary(
        '/gitaly.RepositoryService/RestoreCustomHooks',
        request_serializer=repository__service__pb2.RestoreCustomHooksRequest.SerializeToString,
        response_deserializer=repository__service__pb2.RestoreCustomHooksResponse.FromString,
        )
    self.BackupCustomHooks = channel.unary_stream(
        '/gitaly.RepositoryService/BackupCustomHooks',
        request_serializer=repository__service__pb2.BackupCustomHooksRequest.SerializeToString,
        response_deserializer=repository__service__pb2.BackupCustomHooksResponse.FromString,
        )


class RepositoryServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def RepositoryExists(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RepackIncremental(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RepackFull(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GarbageCollect(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RepositorySize(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ApplyGitattributes(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def FetchRemote(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CreateRepository(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetArchive(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def HasLocalBranches(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def FetchSourceBranch(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Fsck(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def WriteRef(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def FindMergeBase(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CreateFork(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def IsRebaseInProgress(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def IsSquashInProgress(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CreateRepositoryFromURL(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CreateBundle(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CreateRepositoryFromBundle(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def WriteConfig(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SetConfig(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DeleteConfig(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def FindLicense(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetInfoAttributes(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CalculateChecksum(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Cleanup(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetSnapshot(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CreateRepositoryFromSnapshot(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetRawChanges(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SearchFilesByContent(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SearchFilesByName(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RestoreCustomHooks(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def BackupCustomHooks(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_RepositoryServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'RepositoryExists': grpc.unary_unary_rpc_method_handler(
          servicer.RepositoryExists,
          request_deserializer=repository__service__pb2.RepositoryExistsRequest.FromString,
          response_serializer=repository__service__pb2.RepositoryExistsResponse.SerializeToString,
      ),
      'RepackIncremental': grpc.unary_unary_rpc_method_handler(
          servicer.RepackIncremental,
          request_deserializer=repository__service__pb2.RepackIncrementalRequest.FromString,
          response_serializer=repository__service__pb2.RepackIncrementalResponse.SerializeToString,
      ),
      'RepackFull': grpc.unary_unary_rpc_method_handler(
          servicer.RepackFull,
          request_deserializer=repository__service__pb2.RepackFullRequest.FromString,
          response_serializer=repository__service__pb2.RepackFullResponse.SerializeToString,
      ),
      'GarbageCollect': grpc.unary_unary_rpc_method_handler(
          servicer.GarbageCollect,
          request_deserializer=repository__service__pb2.GarbageCollectRequest.FromString,
          response_serializer=repository__service__pb2.GarbageCollectResponse.SerializeToString,
      ),
      'RepositorySize': grpc.unary_unary_rpc_method_handler(
          servicer.RepositorySize,
          request_deserializer=repository__service__pb2.RepositorySizeRequest.FromString,
          response_serializer=repository__service__pb2.RepositorySizeResponse.SerializeToString,
      ),
      'ApplyGitattributes': grpc.unary_unary_rpc_method_handler(
          servicer.ApplyGitattributes,
          request_deserializer=repository__service__pb2.ApplyGitattributesRequest.FromString,
          response_serializer=repository__service__pb2.ApplyGitattributesResponse.SerializeToString,
      ),
      'FetchRemote': grpc.unary_unary_rpc_method_handler(
          servicer.FetchRemote,
          request_deserializer=repository__service__pb2.FetchRemoteRequest.FromString,
          response_serializer=repository__service__pb2.FetchRemoteResponse.SerializeToString,
      ),
      'CreateRepository': grpc.unary_unary_rpc_method_handler(
          servicer.CreateRepository,
          request_deserializer=repository__service__pb2.CreateRepositoryRequest.FromString,
          response_serializer=repository__service__pb2.CreateRepositoryResponse.SerializeToString,
      ),
      'GetArchive': grpc.unary_stream_rpc_method_handler(
          servicer.GetArchive,
          request_deserializer=repository__service__pb2.GetArchiveRequest.FromString,
          response_serializer=repository__service__pb2.GetArchiveResponse.SerializeToString,
      ),
      'HasLocalBranches': grpc.unary_unary_rpc_method_handler(
          servicer.HasLocalBranches,
          request_deserializer=repository__service__pb2.HasLocalBranchesRequest.FromString,
          response_serializer=repository__service__pb2.HasLocalBranchesResponse.SerializeToString,
      ),
      'FetchSourceBranch': grpc.unary_unary_rpc_method_handler(
          servicer.FetchSourceBranch,
          request_deserializer=repository__service__pb2.FetchSourceBranchRequest.FromString,
          response_serializer=repository__service__pb2.FetchSourceBranchResponse.SerializeToString,
      ),
      'Fsck': grpc.unary_unary_rpc_method_handler(
          servicer.Fsck,
          request_deserializer=repository__service__pb2.FsckRequest.FromString,
          response_serializer=repository__service__pb2.FsckResponse.SerializeToString,
      ),
      'WriteRef': grpc.unary_unary_rpc_method_handler(
          servicer.WriteRef,
          request_deserializer=repository__service__pb2.WriteRefRequest.FromString,
          response_serializer=repository__service__pb2.WriteRefResponse.SerializeToString,
      ),
      'FindMergeBase': grpc.unary_unary_rpc_method_handler(
          servicer.FindMergeBase,
          request_deserializer=repository__service__pb2.FindMergeBaseRequest.FromString,
          response_serializer=repository__service__pb2.FindMergeBaseResponse.SerializeToString,
      ),
      'CreateFork': grpc.unary_unary_rpc_method_handler(
          servicer.CreateFork,
          request_deserializer=repository__service__pb2.CreateForkRequest.FromString,
          response_serializer=repository__service__pb2.CreateForkResponse.SerializeToString,
      ),
      'IsRebaseInProgress': grpc.unary_unary_rpc_method_handler(
          servicer.IsRebaseInProgress,
          request_deserializer=repository__service__pb2.IsRebaseInProgressRequest.FromString,
          response_serializer=repository__service__pb2.IsRebaseInProgressResponse.SerializeToString,
      ),
      'IsSquashInProgress': grpc.unary_unary_rpc_method_handler(
          servicer.IsSquashInProgress,
          request_deserializer=repository__service__pb2.IsSquashInProgressRequest.FromString,
          response_serializer=repository__service__pb2.IsSquashInProgressResponse.SerializeToString,
      ),
      'CreateRepositoryFromURL': grpc.unary_unary_rpc_method_handler(
          servicer.CreateRepositoryFromURL,
          request_deserializer=repository__service__pb2.CreateRepositoryFromURLRequest.FromString,
          response_serializer=repository__service__pb2.CreateRepositoryFromURLResponse.SerializeToString,
      ),
      'CreateBundle': grpc.unary_stream_rpc_method_handler(
          servicer.CreateBundle,
          request_deserializer=repository__service__pb2.CreateBundleRequest.FromString,
          response_serializer=repository__service__pb2.CreateBundleResponse.SerializeToString,
      ),
      'CreateRepositoryFromBundle': grpc.stream_unary_rpc_method_handler(
          servicer.CreateRepositoryFromBundle,
          request_deserializer=repository__service__pb2.CreateRepositoryFromBundleRequest.FromString,
          response_serializer=repository__service__pb2.CreateRepositoryFromBundleResponse.SerializeToString,
      ),
      'WriteConfig': grpc.unary_unary_rpc_method_handler(
          servicer.WriteConfig,
          request_deserializer=repository__service__pb2.WriteConfigRequest.FromString,
          response_serializer=repository__service__pb2.WriteConfigResponse.SerializeToString,
      ),
      'SetConfig': grpc.unary_unary_rpc_method_handler(
          servicer.SetConfig,
          request_deserializer=repository__service__pb2.SetConfigRequest.FromString,
          response_serializer=repository__service__pb2.SetConfigResponse.SerializeToString,
      ),
      'DeleteConfig': grpc.unary_unary_rpc_method_handler(
          servicer.DeleteConfig,
          request_deserializer=repository__service__pb2.DeleteConfigRequest.FromString,
          response_serializer=repository__service__pb2.DeleteConfigResponse.SerializeToString,
      ),
      'FindLicense': grpc.unary_unary_rpc_method_handler(
          servicer.FindLicense,
          request_deserializer=repository__service__pb2.FindLicenseRequest.FromString,
          response_serializer=repository__service__pb2.FindLicenseResponse.SerializeToString,
      ),
      'GetInfoAttributes': grpc.unary_stream_rpc_method_handler(
          servicer.GetInfoAttributes,
          request_deserializer=repository__service__pb2.GetInfoAttributesRequest.FromString,
          response_serializer=repository__service__pb2.GetInfoAttributesResponse.SerializeToString,
      ),
      'CalculateChecksum': grpc.unary_unary_rpc_method_handler(
          servicer.CalculateChecksum,
          request_deserializer=repository__service__pb2.CalculateChecksumRequest.FromString,
          response_serializer=repository__service__pb2.CalculateChecksumResponse.SerializeToString,
      ),
      'Cleanup': grpc.unary_unary_rpc_method_handler(
          servicer.Cleanup,
          request_deserializer=repository__service__pb2.CleanupRequest.FromString,
          response_serializer=repository__service__pb2.CleanupResponse.SerializeToString,
      ),
      'GetSnapshot': grpc.unary_stream_rpc_method_handler(
          servicer.GetSnapshot,
          request_deserializer=repository__service__pb2.GetSnapshotRequest.FromString,
          response_serializer=repository__service__pb2.GetSnapshotResponse.SerializeToString,
      ),
      'CreateRepositoryFromSnapshot': grpc.unary_unary_rpc_method_handler(
          servicer.CreateRepositoryFromSnapshot,
          request_deserializer=repository__service__pb2.CreateRepositoryFromSnapshotRequest.FromString,
          response_serializer=repository__service__pb2.CreateRepositoryFromSnapshotResponse.SerializeToString,
      ),
      'GetRawChanges': grpc.unary_stream_rpc_method_handler(
          servicer.GetRawChanges,
          request_deserializer=repository__service__pb2.GetRawChangesRequest.FromString,
          response_serializer=repository__service__pb2.GetRawChangesResponse.SerializeToString,
      ),
      'SearchFilesByContent': grpc.unary_stream_rpc_method_handler(
          servicer.SearchFilesByContent,
          request_deserializer=repository__service__pb2.SearchFilesByContentRequest.FromString,
          response_serializer=repository__service__pb2.SearchFilesByContentResponse.SerializeToString,
      ),
      'SearchFilesByName': grpc.unary_stream_rpc_method_handler(
          servicer.SearchFilesByName,
          request_deserializer=repository__service__pb2.SearchFilesByNameRequest.FromString,
          response_serializer=repository__service__pb2.SearchFilesByNameResponse.SerializeToString,
      ),
      'RestoreCustomHooks': grpc.stream_unary_rpc_method_handler(
          servicer.RestoreCustomHooks,
          request_deserializer=repository__service__pb2.RestoreCustomHooksRequest.FromString,
          response_serializer=repository__service__pb2.RestoreCustomHooksResponse.SerializeToString,
      ),
      'BackupCustomHooks': grpc.unary_stream_rpc_method_handler(
          servicer.BackupCustomHooks,
          request_deserializer=repository__service__pb2.BackupCustomHooksRequest.FromString,
          response_serializer=repository__service__pb2.BackupCustomHooksResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'gitaly.RepositoryService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
