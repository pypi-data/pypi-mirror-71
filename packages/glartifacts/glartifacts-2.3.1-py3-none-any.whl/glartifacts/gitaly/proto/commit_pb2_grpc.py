# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import commit_pb2 as commit__pb2


class CommitServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.CommitIsAncestor = channel.unary_unary(
        '/gitaly.CommitService/CommitIsAncestor',
        request_serializer=commit__pb2.CommitIsAncestorRequest.SerializeToString,
        response_deserializer=commit__pb2.CommitIsAncestorResponse.FromString,
        )
    self.TreeEntry = channel.unary_stream(
        '/gitaly.CommitService/TreeEntry',
        request_serializer=commit__pb2.TreeEntryRequest.SerializeToString,
        response_deserializer=commit__pb2.TreeEntryResponse.FromString,
        )
    self.CommitsBetween = channel.unary_stream(
        '/gitaly.CommitService/CommitsBetween',
        request_serializer=commit__pb2.CommitsBetweenRequest.SerializeToString,
        response_deserializer=commit__pb2.CommitsBetweenResponse.FromString,
        )
    self.CountCommits = channel.unary_unary(
        '/gitaly.CommitService/CountCommits',
        request_serializer=commit__pb2.CountCommitsRequest.SerializeToString,
        response_deserializer=commit__pb2.CountCommitsResponse.FromString,
        )
    self.GetTreeEntries = channel.unary_stream(
        '/gitaly.CommitService/GetTreeEntries',
        request_serializer=commit__pb2.GetTreeEntriesRequest.SerializeToString,
        response_deserializer=commit__pb2.GetTreeEntriesResponse.FromString,
        )
    self.ListFiles = channel.unary_stream(
        '/gitaly.CommitService/ListFiles',
        request_serializer=commit__pb2.ListFilesRequest.SerializeToString,
        response_deserializer=commit__pb2.ListFilesResponse.FromString,
        )
    self.FindCommit = channel.unary_unary(
        '/gitaly.CommitService/FindCommit',
        request_serializer=commit__pb2.FindCommitRequest.SerializeToString,
        response_deserializer=commit__pb2.FindCommitResponse.FromString,
        )
    self.CommitStats = channel.unary_unary(
        '/gitaly.CommitService/CommitStats',
        request_serializer=commit__pb2.CommitStatsRequest.SerializeToString,
        response_deserializer=commit__pb2.CommitStatsResponse.FromString,
        )
    self.FindAllCommits = channel.unary_stream(
        '/gitaly.CommitService/FindAllCommits',
        request_serializer=commit__pb2.FindAllCommitsRequest.SerializeToString,
        response_deserializer=commit__pb2.FindAllCommitsResponse.FromString,
        )
    self.FindCommits = channel.unary_stream(
        '/gitaly.CommitService/FindCommits',
        request_serializer=commit__pb2.FindCommitsRequest.SerializeToString,
        response_deserializer=commit__pb2.FindCommitsResponse.FromString,
        )
    self.CommitLanguages = channel.unary_unary(
        '/gitaly.CommitService/CommitLanguages',
        request_serializer=commit__pb2.CommitLanguagesRequest.SerializeToString,
        response_deserializer=commit__pb2.CommitLanguagesResponse.FromString,
        )
    self.RawBlame = channel.unary_stream(
        '/gitaly.CommitService/RawBlame',
        request_serializer=commit__pb2.RawBlameRequest.SerializeToString,
        response_deserializer=commit__pb2.RawBlameResponse.FromString,
        )
    self.LastCommitForPath = channel.unary_unary(
        '/gitaly.CommitService/LastCommitForPath',
        request_serializer=commit__pb2.LastCommitForPathRequest.SerializeToString,
        response_deserializer=commit__pb2.LastCommitForPathResponse.FromString,
        )
    self.ListLastCommitsForTree = channel.unary_stream(
        '/gitaly.CommitService/ListLastCommitsForTree',
        request_serializer=commit__pb2.ListLastCommitsForTreeRequest.SerializeToString,
        response_deserializer=commit__pb2.ListLastCommitsForTreeResponse.FromString,
        )
    self.CommitsByMessage = channel.unary_stream(
        '/gitaly.CommitService/CommitsByMessage',
        request_serializer=commit__pb2.CommitsByMessageRequest.SerializeToString,
        response_deserializer=commit__pb2.CommitsByMessageResponse.FromString,
        )
    self.ListCommitsByOid = channel.unary_stream(
        '/gitaly.CommitService/ListCommitsByOid',
        request_serializer=commit__pb2.ListCommitsByOidRequest.SerializeToString,
        response_deserializer=commit__pb2.ListCommitsByOidResponse.FromString,
        )
    self.FilterShasWithSignatures = channel.stream_stream(
        '/gitaly.CommitService/FilterShasWithSignatures',
        request_serializer=commit__pb2.FilterShasWithSignaturesRequest.SerializeToString,
        response_deserializer=commit__pb2.FilterShasWithSignaturesResponse.FromString,
        )
    self.ExtractCommitSignature = channel.unary_stream(
        '/gitaly.CommitService/ExtractCommitSignature',
        request_serializer=commit__pb2.ExtractCommitSignatureRequest.SerializeToString,
        response_deserializer=commit__pb2.ExtractCommitSignatureResponse.FromString,
        )
    self.GetCommitSignatures = channel.unary_stream(
        '/gitaly.CommitService/GetCommitSignatures',
        request_serializer=commit__pb2.GetCommitSignaturesRequest.SerializeToString,
        response_deserializer=commit__pb2.GetCommitSignaturesResponse.FromString,
        )
    self.GetCommitMessages = channel.unary_stream(
        '/gitaly.CommitService/GetCommitMessages',
        request_serializer=commit__pb2.GetCommitMessagesRequest.SerializeToString,
        response_deserializer=commit__pb2.GetCommitMessagesResponse.FromString,
        )


class CommitServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def CommitIsAncestor(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def TreeEntry(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CommitsBetween(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CountCommits(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetTreeEntries(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListFiles(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def FindCommit(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CommitStats(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def FindAllCommits(self, request, context):
    """Use a stream to paginate the result set
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def FindCommits(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CommitLanguages(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RawBlame(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def LastCommitForPath(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListLastCommitsForTree(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CommitsByMessage(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListCommitsByOid(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def FilterShasWithSignatures(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ExtractCommitSignature(self, request, context):
    """ExtractCommitSignature returns a stream because the signed text may be
    arbitrarily large and signature verification is impossible without the
    full text.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetCommitSignatures(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetCommitMessages(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_CommitServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'CommitIsAncestor': grpc.unary_unary_rpc_method_handler(
          servicer.CommitIsAncestor,
          request_deserializer=commit__pb2.CommitIsAncestorRequest.FromString,
          response_serializer=commit__pb2.CommitIsAncestorResponse.SerializeToString,
      ),
      'TreeEntry': grpc.unary_stream_rpc_method_handler(
          servicer.TreeEntry,
          request_deserializer=commit__pb2.TreeEntryRequest.FromString,
          response_serializer=commit__pb2.TreeEntryResponse.SerializeToString,
      ),
      'CommitsBetween': grpc.unary_stream_rpc_method_handler(
          servicer.CommitsBetween,
          request_deserializer=commit__pb2.CommitsBetweenRequest.FromString,
          response_serializer=commit__pb2.CommitsBetweenResponse.SerializeToString,
      ),
      'CountCommits': grpc.unary_unary_rpc_method_handler(
          servicer.CountCommits,
          request_deserializer=commit__pb2.CountCommitsRequest.FromString,
          response_serializer=commit__pb2.CountCommitsResponse.SerializeToString,
      ),
      'GetTreeEntries': grpc.unary_stream_rpc_method_handler(
          servicer.GetTreeEntries,
          request_deserializer=commit__pb2.GetTreeEntriesRequest.FromString,
          response_serializer=commit__pb2.GetTreeEntriesResponse.SerializeToString,
      ),
      'ListFiles': grpc.unary_stream_rpc_method_handler(
          servicer.ListFiles,
          request_deserializer=commit__pb2.ListFilesRequest.FromString,
          response_serializer=commit__pb2.ListFilesResponse.SerializeToString,
      ),
      'FindCommit': grpc.unary_unary_rpc_method_handler(
          servicer.FindCommit,
          request_deserializer=commit__pb2.FindCommitRequest.FromString,
          response_serializer=commit__pb2.FindCommitResponse.SerializeToString,
      ),
      'CommitStats': grpc.unary_unary_rpc_method_handler(
          servicer.CommitStats,
          request_deserializer=commit__pb2.CommitStatsRequest.FromString,
          response_serializer=commit__pb2.CommitStatsResponse.SerializeToString,
      ),
      'FindAllCommits': grpc.unary_stream_rpc_method_handler(
          servicer.FindAllCommits,
          request_deserializer=commit__pb2.FindAllCommitsRequest.FromString,
          response_serializer=commit__pb2.FindAllCommitsResponse.SerializeToString,
      ),
      'FindCommits': grpc.unary_stream_rpc_method_handler(
          servicer.FindCommits,
          request_deserializer=commit__pb2.FindCommitsRequest.FromString,
          response_serializer=commit__pb2.FindCommitsResponse.SerializeToString,
      ),
      'CommitLanguages': grpc.unary_unary_rpc_method_handler(
          servicer.CommitLanguages,
          request_deserializer=commit__pb2.CommitLanguagesRequest.FromString,
          response_serializer=commit__pb2.CommitLanguagesResponse.SerializeToString,
      ),
      'RawBlame': grpc.unary_stream_rpc_method_handler(
          servicer.RawBlame,
          request_deserializer=commit__pb2.RawBlameRequest.FromString,
          response_serializer=commit__pb2.RawBlameResponse.SerializeToString,
      ),
      'LastCommitForPath': grpc.unary_unary_rpc_method_handler(
          servicer.LastCommitForPath,
          request_deserializer=commit__pb2.LastCommitForPathRequest.FromString,
          response_serializer=commit__pb2.LastCommitForPathResponse.SerializeToString,
      ),
      'ListLastCommitsForTree': grpc.unary_stream_rpc_method_handler(
          servicer.ListLastCommitsForTree,
          request_deserializer=commit__pb2.ListLastCommitsForTreeRequest.FromString,
          response_serializer=commit__pb2.ListLastCommitsForTreeResponse.SerializeToString,
      ),
      'CommitsByMessage': grpc.unary_stream_rpc_method_handler(
          servicer.CommitsByMessage,
          request_deserializer=commit__pb2.CommitsByMessageRequest.FromString,
          response_serializer=commit__pb2.CommitsByMessageResponse.SerializeToString,
      ),
      'ListCommitsByOid': grpc.unary_stream_rpc_method_handler(
          servicer.ListCommitsByOid,
          request_deserializer=commit__pb2.ListCommitsByOidRequest.FromString,
          response_serializer=commit__pb2.ListCommitsByOidResponse.SerializeToString,
      ),
      'FilterShasWithSignatures': grpc.stream_stream_rpc_method_handler(
          servicer.FilterShasWithSignatures,
          request_deserializer=commit__pb2.FilterShasWithSignaturesRequest.FromString,
          response_serializer=commit__pb2.FilterShasWithSignaturesResponse.SerializeToString,
      ),
      'ExtractCommitSignature': grpc.unary_stream_rpc_method_handler(
          servicer.ExtractCommitSignature,
          request_deserializer=commit__pb2.ExtractCommitSignatureRequest.FromString,
          response_serializer=commit__pb2.ExtractCommitSignatureResponse.SerializeToString,
      ),
      'GetCommitSignatures': grpc.unary_stream_rpc_method_handler(
          servicer.GetCommitSignatures,
          request_deserializer=commit__pb2.GetCommitSignaturesRequest.FromString,
          response_serializer=commit__pb2.GetCommitSignaturesResponse.SerializeToString,
      ),
      'GetCommitMessages': grpc.unary_stream_rpc_method_handler(
          servicer.GetCommitMessages,
          request_deserializer=commit__pb2.GetCommitMessagesRequest.FromString,
          response_serializer=commit__pb2.GetCommitMessagesResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'gitaly.CommitService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
