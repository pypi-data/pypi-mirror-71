Metadata-Version: 2.1
Name: hydrofunctions
Version: 0.2.0
Summary: A suite of convenience functions for exploring water data in a Jupyter Notebook.
Home-page: https://github.com/mroberge/hydrofunctions
Author: Martin Roberge
Author-email: mroberge@towson.edu
License: MIT license
Project-URL: Documentation, https://hydrofunctions.readthedocs.io
Project-URL: Source, https://github.com/mroberge/hydrofunctions
Project-URL: Latest, https://github.com/mroberge/hydrofunctions/tree/develop
Project-URL: Tracker, https://github.com/mroberge/hydrofunctions/issues
Keywords: hydrofunctions hydrology USGS stream gauge water NWIS
Platform: UNKNOWN
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Topic :: Scientific/Engineering :: Hydrology
Classifier: Topic :: Scientific/Engineering :: Information Analysis
Classifier: Topic :: Scientific/Engineering :: Visualization
Classifier: Topic :: Utilities
Description-Content-Type: text/x-rst
Requires-Dist: matplotlib
Requires-Dist: numpy (>=1.16.0)
Requires-Dist: pandas
Requires-Dist: requests
Requires-Dist: IPython
Requires-Dist: pyarrow (==0.16.0)
Requires-Dist: ipykernel
Requires-Dist: nbsphinx

===============================
HydroFunctions
===============================

.. image:: https://img.shields.io/pypi/v/hydrofunctions.svg
        :target: https://pypi.python.org/pypi/hydrofunctions
        :alt: Visit Hydrofunctions on PyPI

.. image:: https://img.shields.io/travis/mroberge/hydrofunctions.svg
        :target: https://travis-ci.org/mroberge/hydrofunctions
        :alt: Unit Testing Status

.. image:: https://codecov.io/gh/mroberge/hydrofunctions/branch/master/graph/badge.svg
        :target: https://codecov.io/gh/mroberge/hydrofunctions
        :alt: Code Coverage Status

.. image:: https://readthedocs.org/projects/hydrofunctions/badge/?version=latest
        :target: https://hydrofunctions.readthedocs.io/en/latest/?badge=latest
        :alt: Documentation Status

.. image:: https://img.shields.io/github/license/mashape/apistatus.svg
        :target: https://github.com/mroberge/hydrofunctions/blob/master/LICENSE
        :alt: MIT license

a suite of convenience functions for exploring water data in Python.

Features
--------

* Retrieves stream data from the USGS NWIS service
* Select data using multiple site numbers, by state, county codes, or a boundary box
* Preserves NWIS metadata, including NoData values
* Helpful error messages to help you write valid requests
* Extracts data into a Pandas dataframe, json, or dict
* Plot beautiful graphs in Jupyter Notebooks
   * hydrographs (or time series of any data)
   * flow duration charts
   * cycle plots to illustrate annual or diurnal cycles
   * Interactive map for finding stream gauge ID numbers
* Plotting and manipulation through Pandas dataframes
* Retrieve USGS rating curves, peak discharges, field notes, and site files for gauging stations
* Retrieve USGS daily, monthly, and annual statistics for gauging stations
* Saves data in compact, easy-to-use parquet files instead of requesting the same dataset repeatedly
* **Massive Users Guide that makes Hydrology AND Data Science easy!**

Still in active development! Let me know what features you want!

Read the `Users Guide <https://hydrofunctions.readthedocs.io/en/master>`_ for more details.


Basic Usage
-----------

First, import hydrofunctions into your project and enable automatic chart
display::

    >>> import hydrofunctions as hf
    >>> %matplotlib inline

Create NWIS data object to hold our request and the data we will retrieve.
We will request the daily values ('dv') for site '0158520' for the past
55 days::

    >>> herring = hf.NWIS('01585200', 'dv', period='P55D')
    Requested data from https://waterservices.usgs.gov/nwis/iv/?format=json%2C1.1&sites=01585200&period=P55D


Find out what data we received::

    >>> herring
    USGS:01585200: WEST BRANCH HERRING RUN AT IDLEWYLDE, MD
        00060: <5 * Minutes>  Discharge, cubic feet per second
        00065: <5 * Minutes>  Gage height, feet
    Start: 2019-05-25 01:05:00+00:00
    End:   2019-07-19 19:05:00+00:00

This tells us the name of our site, and gives a list of the parameters that we
have. For each parameter it lists how frequently the data were collected, and
it show the common name of the parameter and its units.

Create a dataframe from our data, and list the first five items::

    >>> herring.df().head()

*--a table with our data appears--*

    +------------------------------+---------------------------+
    |          datetimeUTC         | USGS:01585200:00060:00000 |
    +------------------------------+---------------------------+
    |   2019-05-25 01:05:00+00:00  |                1.57       |
    +------------------------------+---------------------------+
    |   2019-05-25 01:10:00+00:00  |                1.57       |
    +------------------------------+---------------------------+
    |   2019-05-25 01:15:00+00:00  |                1.51       |
    +------------------------------+---------------------------+
    |   2019-05-25 01:20:00+00:00  |                1.57       |
    +------------------------------+---------------------------+
    |   2019-05-25 01:25:00+00:00  |                1.57       |
    +------------------------------+---------------------------+

Plot the data using built-in methods from Pandas and mathplotlib::

    >>> herring.df().plot()

*--a stream hydrograph appears--*

.. image:: _static/HerringHydrograph.png
        :alt: a stream hydrograph for Herring Run

Learn more:

* `More usage <https://hydrofunctions.readthedocs.io/en/master/usage.html>`_ tips
* `Introduction to Hydrofunctions <https://github.com/mroberge/hydrofunctions/blob/master/Introduction%20to%20Hydrofunctions.ipynb>`_, a Jupyter Notebook with a quick tutorial.

Easy Installation
-----------------

The easiest way to install Hydrofunctions is by typing this from your
command line:

.. code-block:: console

    $ pip install hydrofunctions


Hydrofunctions depends upon Pandas and numerous other scientific packages
for Python. `Anaconda <https://www.continuum.io/open-source-core-modern-software>`_
is an easy, safe, open-source method for downloading everything and avoiding
conflicts with other versions of Python that might be running on your
computer.

Visit the `Installation Page <https://hydrofunctions.readthedocs.io/en/master/installation.html>`_
in the Users Guide to learn how to install
Anaconda, or if you have problems using the Easy Installation method above.


Other Projects You Should See
-----------------------------

`Hydropy <https://github.com/stijnvanhoey/hydropy>`_, a Python package that builds upon Pandas for enhanced data selection and plotting of hydrology data.

`WellApplication <https://github.com/inkenbrandt/WellApplication>`_ a Python package that provides functions for working with dataloggers and USGS well data.

This package was created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.

.. _Cookiecutter: https://github.com/audreyr/cookiecutter
.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage

MIT License

Copyright (c) 2016, Martin Roberge and contributors

