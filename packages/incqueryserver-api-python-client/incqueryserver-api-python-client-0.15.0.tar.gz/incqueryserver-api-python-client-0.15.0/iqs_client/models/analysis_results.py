# coding: utf-8

"""
    IncQuery Server Web API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.15.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AnalysisResults(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'configuration': 'AnalysisConfigurationIdentifier',
        'analysis_results': 'list[AnalysisResult]',
        'kpi_values': 'list[KPI]'
    }

    attribute_map = {
        'configuration': 'configuration',
        'analysis_results': 'analysisResults',
        'kpi_values': 'kpiValues'
    }

    def __init__(self, configuration=None, analysis_results=None, kpi_values=None):  # noqa: E501
        """AnalysisResults - a model defined in OpenAPI"""  # noqa: E501

        self._configuration = None
        self._analysis_results = None
        self._kpi_values = None
        self.discriminator = None

        if configuration is not None:
            self.configuration = configuration
        if analysis_results is not None:
            self.analysis_results = analysis_results
        if kpi_values is not None:
            self.kpi_values = kpi_values

    @property
    def configuration(self):
        """Gets the configuration of this AnalysisResults.  # noqa: E501


        :return: The configuration of this AnalysisResults.  # noqa: E501
        :rtype: AnalysisConfigurationIdentifier
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this AnalysisResults.


        :param configuration: The configuration of this AnalysisResults.  # noqa: E501
        :type: AnalysisConfigurationIdentifier
        """

        self._configuration = configuration

    @property
    def analysis_results(self):
        """Gets the analysis_results of this AnalysisResults.  # noqa: E501


        :return: The analysis_results of this AnalysisResults.  # noqa: E501
        :rtype: list[AnalysisResult]
        """
        return self._analysis_results

    @analysis_results.setter
    def analysis_results(self, analysis_results):
        """Sets the analysis_results of this AnalysisResults.


        :param analysis_results: The analysis_results of this AnalysisResults.  # noqa: E501
        :type: list[AnalysisResult]
        """

        self._analysis_results = analysis_results

    @property
    def kpi_values(self):
        """Gets the kpi_values of this AnalysisResults.  # noqa: E501


        :return: The kpi_values of this AnalysisResults.  # noqa: E501
        :rtype: list[KPI]
        """
        return self._kpi_values

    @kpi_values.setter
    def kpi_values(self, kpi_values):
        """Sets the kpi_values of this AnalysisResults.


        :param kpi_values: The kpi_values of this AnalysisResults.  # noqa: E501
        :type: list[KPI]
        """

        self._kpi_values = kpi_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalysisResults):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
