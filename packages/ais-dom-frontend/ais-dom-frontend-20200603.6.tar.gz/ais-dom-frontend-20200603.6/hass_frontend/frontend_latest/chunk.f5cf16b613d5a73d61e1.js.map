{"version":3,"file":"chunk.f5cf16b613d5a73d61e1.js","sources":["webpack:///./src/components/ha-dialog.ts","webpack:///./src/panels/config/devices/device-detail/ha-device-automation-dialog.ts"],"sourcesContent":["import \"@material/mwc-dialog\";\nimport type { Dialog } from \"@material/mwc-dialog\";\nimport { style } from \"@material/mwc-dialog/mwc-dialog-css\";\nimport \"./ha-icon-button\";\nimport { css, CSSResult, customElement, html } from \"lit-element\";\nimport type { Constructor, HomeAssistant } from \"../types\";\nimport { mdiClose } from \"@mdi/js\";\n\nconst MwcDialog = customElements.get(\"mwc-dialog\") as Constructor<Dialog>;\n\nexport const createCloseHeading = (hass: HomeAssistant, title: string) => html`\n  ${title}\n  <mwc-icon-button\n    aria-label=${hass.localize(\"ui.dialogs.generic.close\")}\n    dialogAction=\"close\"\n    class=\"close_button\"\n  >\n    <ha-svg-icon path=${mdiClose}></ha-svg-icon>\n  </mwc-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends MwcDialog {\n  protected static get styles(): CSSResult[] {\n    return [\n      style,\n      css`\n        .mdc-dialog__actions {\n          justify-content: var(--justify-action-buttons, flex-end);\n        }\n        .mdc-dialog__container {\n          align-items: var(--vertial-align-dialog, center);\n        }\n        .mdc-dialog__title::before {\n          display: block;\n          height: 20px;\n        }\n        .close_button {\n          position: absolute;\n          right: 16px;\n          top: 12px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import {\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  TemplateResult,\n} from \"lit-element\";\nimport \"../../../../components/ha-dialog\";\nimport {\n  DeviceAction,\n  DeviceCondition,\n  DeviceTrigger,\n  fetchDeviceActions,\n  fetchDeviceConditions,\n  fetchDeviceTriggers,\n} from \"../../../../data/device_automation\";\nimport { haStyleDialog } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\nimport \"./ha-device-actions-card\";\nimport \"./ha-device-conditions-card\";\nimport \"./ha-device-triggers-card\";\nimport { DeviceAutomationDialogParams } from \"./show-dialog-device-automation\";\n\n@customElement(\"dialog-device-automation\")\nexport class DialogDeviceAutomation extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() private _triggers: DeviceTrigger[] = [];\n\n  @property() private _conditions: DeviceCondition[] = [];\n\n  @property() private _actions: DeviceAction[] = [];\n\n  @property() private _params?: DeviceAutomationDialogParams;\n\n  public async showDialog(params: DeviceAutomationDialogParams): Promise<void> {\n    this._params = params;\n    await this.updateComplete;\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    this.hass.loadBackendTranslation(\"device_automation\");\n  }\n\n  protected updated(changedProps): void {\n    super.updated(changedProps);\n\n    if (!changedProps.has(\"_params\")) {\n      return;\n    }\n\n    this._triggers = [];\n    this._conditions = [];\n    this._actions = [];\n\n    if (!this._params) {\n      return;\n    }\n\n    const { deviceId, script } = this._params;\n\n    fetchDeviceActions(this.hass, deviceId).then((actions) => {\n      this._actions = actions;\n    });\n    if (script) {\n      return;\n    }\n    fetchDeviceTriggers(this.hass, deviceId).then((triggers) => {\n      this._triggers = triggers;\n    });\n    fetchDeviceConditions(this.hass, deviceId).then((conditions) => {\n      this._conditions = conditions;\n    });\n  }\n\n  protected render(): TemplateResult | void {\n    if (!this._params) {\n      return html``;\n    }\n\n    return html`\n      <ha-dialog\n        open\n        @closing=\"${this._close}\"\n        .heading=${this.hass.localize(\n          `ui.panel.config.devices.${\n            this._params.script ? \"script\" : \"automation\"\n          }.create`\n        )}\n      >\n        <div @chip-clicked=${this._close}>\n          ${this._triggers.length ||\n          this._conditions.length ||\n          this._actions.length\n            ? html`\n                ${this._triggers.length\n                  ? html`\n                      <ha-device-triggers-card\n                        .hass=${this.hass}\n                        .automations=${this._triggers}\n                      ></ha-device-triggers-card>\n                    `\n                  : \"\"}\n                ${this._conditions.length\n                  ? html`\n                      <ha-device-conditions-card\n                        .hass=${this.hass}\n                        .automations=${this._conditions}\n                      ></ha-device-conditions-card>\n                    `\n                  : \"\"}\n                ${this._actions.length\n                  ? html`\n                      <ha-device-actions-card\n                        .hass=${this.hass}\n                        .automations=${this._actions}\n                        .script=${this._params.script}\n                      ></ha-device-actions-card>\n                    `\n                  : \"\"}\n              `\n            : this.hass.localize(\n                \"ui.panel.config.devices.automation.no_device_automations\"\n              )}\n        </div>\n        <mwc-button slot=\"primaryAction\" @click=\"${this._close}\">\n          Close\n        </mwc-button>\n      </ha-dialog>\n    `;\n  }\n\n  private _close(): void {\n    this._params = undefined;\n  }\n\n  static get styles(): CSSResult {\n    return haStyleDialog;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-device-automation\": DialogDeviceAutomation;\n  }\n}\n"],"mappings":"AAQA;AAGA;;AAEA;;;;AAIA;;AAKA;;;;;;;;;;;;;;;;AAAA;;;AC+DA;AACA;;AAMA;AACA;AAIA;;AAGA;AACA;;AAGA;AACA;;AAGA;AACA;;AAGA;AACA;;AAGA;AACA;AACA;;AAGA;AAEA;;AAIA;;;;AAhDA","sourceRoot":""}