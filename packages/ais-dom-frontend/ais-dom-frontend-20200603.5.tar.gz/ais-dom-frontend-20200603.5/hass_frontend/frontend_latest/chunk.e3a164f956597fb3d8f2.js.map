{"version":3,"file":"chunk.e3a164f956597fb3d8f2.js","sources":["webpack:///./src/data/device_automation.ts","webpack:///./src/components/ha-chips.ts","webpack:///./src/panels/config/devices/device-detail/ha-device-automation-card.ts"],"sourcesContent":["import { computeStateName } from \"../common/entity/compute_state_name\";\nimport { HomeAssistant } from \"../types\";\n\nexport interface DeviceAutomation {\n  device_id: string;\n  domain: string;\n  entity_id: string;\n  type?: string;\n  subtype?: string;\n  event?: string;\n}\n\nexport type DeviceAction = DeviceAutomation;\n\nexport interface DeviceCondition extends DeviceAutomation {\n  condition: string;\n}\n\nexport interface DeviceTrigger extends DeviceAutomation {\n  platform: \"device\";\n}\n\nexport const fetchDeviceActions = (hass: HomeAssistant, deviceId: string) =>\n  hass.callWS<DeviceAction[]>({\n    type: \"device_automation/action/list\",\n    device_id: deviceId,\n  });\n\nexport const fetchDeviceConditions = (hass: HomeAssistant, deviceId: string) =>\n  hass.callWS<DeviceCondition[]>({\n    type: \"device_automation/condition/list\",\n    device_id: deviceId,\n  });\n\nexport const fetchDeviceTriggers = (hass: HomeAssistant, deviceId: string) =>\n  hass.callWS<DeviceTrigger[]>({\n    type: \"device_automation/trigger/list\",\n    device_id: deviceId,\n  });\n\nexport const fetchDeviceActionCapabilities = (\n  hass: HomeAssistant,\n  action: DeviceAction\n) =>\n  hass.callWS<DeviceAction[]>({\n    type: \"device_automation/action/capabilities\",\n    action,\n  });\n\nexport const fetchDeviceConditionCapabilities = (\n  hass: HomeAssistant,\n  condition: DeviceCondition\n) =>\n  hass.callWS<DeviceCondition[]>({\n    type: \"device_automation/condition/capabilities\",\n    condition,\n  });\n\nexport const fetchDeviceTriggerCapabilities = (\n  hass: HomeAssistant,\n  trigger: DeviceTrigger\n) =>\n  hass.callWS<DeviceTrigger[]>({\n    type: \"device_automation/trigger/capabilities\",\n    trigger,\n  });\n\nconst deviceAutomationIdentifiers = [\n  \"device_id\",\n  \"domain\",\n  \"entity_id\",\n  \"type\",\n  \"subtype\",\n  \"event\",\n  \"condition\",\n  \"platform\",\n];\n\nexport const deviceAutomationsEqual = (\n  a: DeviceAutomation,\n  b: DeviceAutomation\n) => {\n  if (typeof a !== typeof b) {\n    return false;\n  }\n\n  for (const property in a) {\n    if (!deviceAutomationIdentifiers.includes(property)) {\n      continue;\n    }\n    if (!Object.is(a[property], b[property])) {\n      return false;\n    }\n  }\n  for (const property in b) {\n    if (!deviceAutomationIdentifiers.includes(property)) {\n      continue;\n    }\n    if (!Object.is(a[property], b[property])) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nexport const localizeDeviceAutomationAction = (\n  hass: HomeAssistant,\n  action: DeviceAction\n): string => {\n  const state = action.entity_id ? hass.states[action.entity_id] : undefined;\n  return (\n    hass.localize(\n      `component.${action.domain}.device_automation.action_type.${action.type}`,\n      \"entity_name\",\n      state ? computeStateName(state) : action.entity_id || \"<unknown>\",\n      \"subtype\",\n      action.subtype\n        ? hass.localize(\n            `component.${action.domain}.device_automation.action_subtype.${action.subtype}`\n          ) || action.subtype\n        : \"\"\n    ) || (action.subtype ? `\"${action.subtype}\" ${action.type}` : action.type!)\n  );\n};\n\nexport const localizeDeviceAutomationCondition = (\n  hass: HomeAssistant,\n  condition: DeviceCondition\n): string => {\n  const state = condition.entity_id\n    ? hass.states[condition.entity_id]\n    : undefined;\n  return (\n    hass.localize(\n      `component.${condition.domain}.device_automation.condition_type.${condition.type}`,\n      \"entity_name\",\n      state ? computeStateName(state) : condition.entity_id || \"<unknown>\",\n      \"subtype\",\n      condition.subtype\n        ? hass.localize(\n            `component.${condition.domain}.device_automation.condition_subtype.${condition.subtype}`\n          ) || condition.subtype\n        : \"\"\n    ) ||\n    (condition.subtype\n      ? `\"${condition.subtype}\" ${condition.type}`\n      : condition.type!)\n  );\n};\n\nexport const localizeDeviceAutomationTrigger = (\n  hass: HomeAssistant,\n  trigger: DeviceTrigger\n): string => {\n  const state = trigger.entity_id ? hass.states[trigger.entity_id] : undefined;\n  return (\n    hass.localize(\n      `component.${trigger.domain}.device_automation.trigger_type.${trigger.type}`,\n      \"entity_name\",\n      state ? computeStateName(state) : trigger.entity_id || \"<unknown>\",\n      \"subtype\",\n      trigger.subtype\n        ? hass.localize(\n            `component.${trigger.domain}.device_automation.trigger_subtype.${trigger.subtype}`\n          ) || trigger.subtype\n        : \"\"\n    ) ||\n    (trigger.subtype ? `\"${trigger.subtype}\" ${trigger.type}` : trigger.type!)\n  );\n};\n","// @ts-ignore\nimport chipStyles from \"@material/chips/dist/mdc.chips.min.css\";\nimport { ripple } from \"@material/mwc-ripple/ripple-directive\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  TemplateResult,\n  unsafeCSS,\n} from \"lit-element\";\nimport { fireEvent } from \"../common/dom/fire_event\";\n\ndeclare global {\n  // for fire event\n  interface HASSDomEvents {\n    \"chip-clicked\": { index: string };\n  }\n}\n\n@customElement(\"ha-chips\")\nexport class HaChips extends LitElement {\n  @property() public items = [];\n\n  protected render(): TemplateResult {\n    if (this.items.length === 0) {\n      return html``;\n    }\n    return html`\n      <div class=\"mdc-chip-set\">\n        ${this.items.map(\n          (item, idx) =>\n            html`\n              <div class=\"mdc-chip\" .index=${idx} @click=${this._handleClick}>\n                <div class=\"mdc-chip__ripple\" .ripple=\"${ripple()}\"></div>\n                <span role=\"gridcell\">\n                  <span\n                    role=\"button\"\n                    tabindex=\"0\"\n                    class=\"mdc-chip__primary-action\"\n                  >\n                    <span class=\"mdc-chip__text\">${item}</span>\n                  </span>\n                </span>\n              </div>\n            `\n        )}\n      </div>\n    `;\n  }\n\n  private _handleClick(ev): void {\n    fireEvent(this, \"chip-clicked\", {\n      index: ev.currentTarget.index,\n    });\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      ${unsafeCSS(chipStyles)}\n      .mdc-chip {\n        background-color: rgba(var(--rgb-primary-text-color), 0.15);\n        color: var(--primary-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-chips\": HaChips;\n  }\n}\n","import {\n  css,\n  CSSResult,\n  html,\n  LitElement,\n  property,\n  TemplateResult,\n} from \"lit-element\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/ha-chips\";\nimport { showAutomationEditor } from \"../../../../data/automation\";\nimport { DeviceAutomation } from \"../../../../data/device_automation\";\nimport { showScriptEditor } from \"../../../../data/script\";\nimport { HomeAssistant } from \"../../../../types\";\n\nexport abstract class HaDeviceAutomationCard<\n  T extends DeviceAutomation\n> extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public deviceId?: string;\n\n  @property() public script = false;\n\n  @property() public automations: T[] = [];\n\n  protected headerKey = \"\";\n\n  protected type = \"\";\n\n  private _localizeDeviceAutomation: (\n    hass: HomeAssistant,\n    automation: T\n  ) => string;\n\n  constructor(\n    localizeDeviceAutomation: HaDeviceAutomationCard<\n      T\n    >[\"_localizeDeviceAutomation\"]\n  ) {\n    super();\n    this._localizeDeviceAutomation = localizeDeviceAutomation;\n  }\n\n  protected shouldUpdate(changedProps): boolean {\n    if (changedProps.has(\"deviceId\") || changedProps.has(\"automations\")) {\n      return true;\n    }\n    const oldHass = changedProps.get(\"hass\");\n    if (!oldHass || this.hass.language !== oldHass.language) {\n      return true;\n    }\n    return false;\n  }\n\n  protected render(): TemplateResult {\n    if (this.automations.length === 0) {\n      return html``;\n    }\n    return html`\n      <h3>\n        ${this.hass.localize(this.headerKey)}\n      </h3>\n      <div class=\"content\">\n        <ha-chips\n          @chip-clicked=${this._handleAutomationClicked}\n          .items=${this.automations.map((automation) =>\n            this._localizeDeviceAutomation(this.hass, automation)\n          )}\n        >\n        </ha-chips>\n      </div>\n    `;\n  }\n\n  private _handleAutomationClicked(ev: CustomEvent) {\n    const automation = this.automations[ev.detail.index];\n    if (!automation) {\n      return;\n    }\n    if (this.script) {\n      showScriptEditor(this, { sequence: [automation] });\n      return;\n    }\n    const data = {};\n    data[this.type] = [automation];\n    showAutomationEditor(this, data);\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      h3 {\n        color: var(--primary-text-color);\n      }\n    `;\n  }\n}\n"],"mappings":"AAAA;;ACgCA;AAGA;AACA;;;;;;;AAOA;;;;;;AApBA;AAsCA;;;;;AAtCA;;ACsCA;;;;AAIA;AACA;;;;AAnDA;;;;AAEA","sourceRoot":""}