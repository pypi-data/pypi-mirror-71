{"version":3,"file":"chunk.a1d5272b5c5df66e075a.js","sources":["webpack:///./src/common/entity/compute_state_name.ts","webpack:///./src/components/entity/state-badge.ts"],"sourcesContent":["import { HassEntity } from \"home-assistant-js-websocket\";\nimport { computeObjectId } from \"./compute_object_id\";\n\nexport const computeStateName = (stateObj: HassEntity): string => {\n  return stateObj.attributes.friendly_name === undefined\n    ? computeObjectId(stateObj.entity_id).replace(/_/g, \" \")\n    : stateObj.attributes.friendly_name || \"\";\n};\n","import type { HassEntity } from \"home-assistant-js-websocket\";\nimport { styleMap } from \"lit-html/directives/style-map\";\nimport {\n  css,\n  CSSResult,\n  html,\n  LitElement,\n  property,\n  PropertyValues,\n  TemplateResult,\n} from \"lit-element\";\nimport { ifDefined } from \"lit-html/directives/if-defined\";\nimport { computeActiveState } from \"../../common/entity/compute_active_state\";\nimport { computeStateDomain } from \"../../common/entity/compute_state_domain\";\nimport { stateIcon } from \"../../common/entity/state_icon\";\nimport { iconColorCSS } from \"../../common/style/icon_color_css\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-icon\";\n\nexport class StateBadge extends LitElement {\n  public hass?: HomeAssistant;\n\n  @property() public stateObj?: HassEntity;\n\n  @property() public overrideIcon?: string;\n\n  @property() public overrideImage?: string;\n\n  @property({ type: Boolean }) public stateColor?: boolean;\n\n  @property({ type: Boolean, reflect: true, attribute: \"icon\" })\n  private _showIcon = true;\n\n  @property() private _iconStyle: { [name: string]: string } = {};\n\n  protected render(): TemplateResult {\n    const stateObj = this.stateObj;\n\n    if (!stateObj || !this._showIcon) {\n      return html``;\n    }\n\n    const domain = computeStateDomain(stateObj);\n\n    return html`\n      <ha-icon\n        style=${styleMap(this._iconStyle)}\n        data-domain=${ifDefined(\n          this.stateColor || (domain === \"light\" && this.stateColor !== false)\n            ? domain\n            : undefined\n        )}\n        data-state=${computeActiveState(stateObj)}\n        .icon=${this.overrideIcon || stateIcon(stateObj)}\n      ></ha-icon>\n    `;\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    if (!changedProps.has(\"stateObj\") || !this.stateObj) {\n      return;\n    }\n    const stateObj = this.stateObj;\n\n    const iconStyle: { [name: string]: string } = {};\n    const hostStyle: Partial<CSSStyleDeclaration> = {\n      backgroundImage: \"\",\n    };\n\n    this._showIcon = true;\n\n    if (stateObj) {\n      // hide icon if we have entity picture\n      if (\n        (stateObj.attributes.entity_picture && !this.overrideIcon) ||\n        this.overrideImage\n      ) {\n        let imageUrl = this.overrideImage || stateObj.attributes.entity_picture;\n        if (this.hass) {\n          imageUrl = this.hass.hassUrl(imageUrl);\n        }\n        hostStyle.backgroundImage = `url(${imageUrl})`;\n        this._showIcon = false;\n      } else if (stateObj.state === \"on\") {\n        if (stateObj.attributes.hs_color && this.stateColor !== false) {\n          const hue = stateObj.attributes.hs_color[0];\n          const sat = stateObj.attributes.hs_color[1];\n          if (sat > 10) {\n            iconStyle.color = `hsl(${hue}, 100%, ${100 - sat / 2}%)`;\n          }\n        }\n        if (stateObj.attributes.brightness && this.stateColor !== false) {\n          const brightness = stateObj.attributes.brightness;\n          if (typeof brightness !== \"number\") {\n            const errorMessage = `Type error: state-badge expected number, but type of ${\n              stateObj.entity_id\n            }.attributes.brightness is ${typeof brightness} (${brightness})`;\n            // eslint-disable-next-line\n            console.warn(errorMessage);\n          }\n          // lowest brighntess will be around 50% (that's pretty dark)\n          iconStyle.filter = `brightness(${(brightness + 245) / 5}%)`;\n        }\n      }\n    }\n    this._iconStyle = iconStyle;\n    Object.assign(this.style, hostStyle);\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      :host {\n        position: relative;\n        display: inline-block;\n        width: 40px;\n        color: var(--paper-item-icon-color, #44739e);\n        border-radius: 50%;\n        height: 40px;\n        text-align: center;\n        background-size: cover;\n        line-height: 40px;\n        vertical-align: middle;\n        box-sizing: border-box;\n      }\n      :host(:focus) {\n        outline: none;\n      }\n      :host(:not([icon]):focus) {\n        border: 2px solid var(--divider-color);\n      }\n      :host([icon]:focus) {\n        background: var(--divider-color);\n      }\n      ha-icon {\n        transition: color 0.3s ease-in-out, filter 0.3s ease-in-out;\n      }\n\n      ${iconColorCSS}\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"state-badge\": StateBadge;\n  }\n}\n\ncustomElements.define(\"state-badge\", StateBadge);\n"],"mappings":"AACA;;AC6CA;AACA;AAKA;AACA;;AAlCA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsHA;AAtHA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}