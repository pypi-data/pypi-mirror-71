cmake_minimum_required(VERSION 2.8)
project(discreture)
set(PROJECT_NAME_STR discreture)

option(BUILD_TESTS "Build gtest unit tests" OFF)
option(BUILD_OLD_TESTS "Build old unit tests (deprecated)" OFF)

option(BUILD_BENCHMARKS "Build benchmarks" OFF)
option(BUILD_OLD_BENCHMARKS "Build old benchmarks (deprecated)" OFF)

option(BUILD_EXAMPLES "Build example programs" OFF)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# set(CMAKE_BUILD_TYPE Debug)
set(CMAKE_BUILD_TYPE Release)

find_package(Boost REQUIRED)

include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include/Discreture)

add_definitions(-march=native -pipe -O3)

message("Installing to " ${CMAKE_INSTALL_PREFIX})
install(DIRECTORY ${PROJECT_SOURCE_DIR}/include DESTINATION ${CMAKE_INSTALL_PREFIX})
# install(DIRECTORY ${PROJECT_SOURCE_DIR}/include DESTINATION ${CMAKE_INSTALL_PREFIX} FILES_MATCHING PATTERN "*.hpp")



if(BUILD_TESTS)
	find_package(GTest)
	if (GTEST_FOUND)
		find_package(Threads REQUIRED)
		enable_testing()
		include_directories(${GTEST_INCLUDE_DIRS})
		set(PROJECT_TEST_NAME ${PROJECT_NAME_STR}_test)
		file(GLOB TEST_SRC_FILES ${PROJECT_SOURCE_DIR}/tests/*.cpp)
		add_executable(${PROJECT_TEST_NAME} ${TEST_SRC_FILES})
# 		add_executable(${PROJECT_TEST_NAME} ${PROJECT_SOURCE_DIR}/tests/combination_tests.cpp ${PROJECT_SOURCE_DIR}/tests/google_test.cpp)
		target_link_libraries(${PROJECT_TEST_NAME} ${GTEST_BOTH_LIBRARIES} Threads::Threads)
		add_test(AllTests ${PROJECT_TEST_NAME})
	else()
		message("Google testing framework not found. Falling back to old tests")
		set(BUILD_OLD_TESTS ON)
	endif()
endif (BUILD_TESTS)

if (BUILD_OLD_TESTS)
	file(GLOB TEST_SRC_FILES ${PROJECT_SOURCE_DIR}/tests/OldTests/*.cpp)
	add_executable(discreture_test_old ${TEST_SRC_FILES})
endif(BUILD_OLD_TESTS)

if(BUILD_BENCHMARKS)
	find_package(GSL)
	if (${GSL_FOUND})
		add_definitions(-DTEST_GSL_COMBINATIONS)
		include_directories(${GSL_INCLUDE_DIRS})
	endif()
	add_definitions(-g)
	file(GLOB TEST_SRC_FILES ${PROJECT_SOURCE_DIR}/Benchmarks/*.cpp)
	add_executable(discreture_benchmark ${TEST_SRC_FILES})
	if (GSL_FOUND)
		target_link_libraries(discreture_benchmark ${GSL_LIBRARIES})
	endif()
endif (BUILD_BENCHMARKS)

if(BUILD_OLD_BENCHMARKS)
	find_package(GSL)
	if (${GSL_FOUND})
		add_definitions(-DTEST_GSL_COMBINATIONS)
		include_directories(${GSL_INCLUDE_DIRS})
	endif(${GSL_FOUND})
	add_definitions(-g)
	file(GLOB TEST_SRC_FILES ${PROJECT_SOURCE_DIR}/Benchmarks/old/*.cpp)
	add_executable(discreture_benchmark_old ${TEST_SRC_FILES})
	if (GSL_FOUND)
		target_link_libraries(discreture_benchmark_old ${GSL_LIBRARIES})
	endif(GSL_FOUND)
endif (BUILD_OLD_BENCHMARKS)

if(BUILD_EXAMPLES)
	add_executable(combinations examples/combinations.cpp)
	add_executable(combinations_reverse examples/combinations_reverse.cpp)
	add_executable(combinations_tree examples/combinations_tree.cpp)
	add_executable(combinations_tree_reverse examples/combinations_tree_reverse.cpp)
	add_executable(dyck examples/dyck.cpp)
	add_executable(motzkin examples/motzkin.cpp)
	add_executable(permutations examples/permutations.cpp)
	add_executable(number_range examples/number_range.cpp)
	add_executable(setpartitions examples/setpartitions.cpp)
	add_executable(partitions examples/partitions.cpp)
	add_executable(multisets examples/multisets.cpp)
endif (BUILD_EXAMPLES)
