#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright (c) 2018, Cyrille Favreau <cyrille.favreau@gmail.com>
#
# This file is part of pyPhaneron
# <https://github.com/favreau/pyPhaneron>
#
# This library is free software; you can redistribute it and/or modify it under
# the terms of the GNU Lesser General Public License version 3.0 as published
# by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
# details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this library; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
# All rights reserved. Do not distribute without further notice.


class Steps(object):

    """ Steps """
    def __init__(self, client):
        """
        Create a new Steps instance
        """
        self._client = client

    def __str__(self):
        """Return a pretty-print of the class"""
        return "Steps for Brayns"

    def set_steps_geometry(self, mesh_filename, ca_count_filename):
        '''
        Loads a mesh generated by STEPS, together with the Calcium concentration, and sends it to
        Brayns
        :param mesh_filename: Full path of the file containing the mesh
        :param ca_count_filename: Full path of the file containing the CA concentrations
        :return: Result of the request submission
        '''
        import steps.utilities.meshio as meshio
        mesh = meshio.loadMesh(mesh_filename)[0]
        data = open(ca_count_filename, 'r').readlines()
        tets = data[0].split()
        ca_count = data[-2].split()
        ntets = min(len(tets), len(ca_count))

        vertices = list()
        for i in range(mesh.countVertices()):
            vertex = mesh.getVertex(i)
            vertices.append(float(vertex[0]))
            vertices.append(float(vertex[1]))
            vertices.append(float(vertex[2]))

        indices = list()
        for i in range(ntets):
            for j in mesh.getTet(int(tets[i])):
                indices.append(int(j))

        ca = list()
        for i in range(ntets):
            ca.append(int(ca_count[i]))

        params = dict()
        params['vertices'] = vertices
        params['indices'] = indices
        params['caCount'] = ca
        params['scale'] = 100
        return self._client.request('addStepsGeometry', params=params)
