import pytest
from unittest import IsolatedAsyncioTestCase
import os
import asyncio
import time
import pfp_lgbt

sample_img = b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00 \x00\x00\x00 \x01\x03\x00\x00\x00I\xb4\xe8\xb7\x00\x00\x00\x04gAMA\x00\x00\xb1\x8f\x0b\xfca\x05\x00\x00\x00\x01sRGB\x00\xae\xce\x1c\xe9\x00\x00\x00\x03PLTE\xff\xff\xff\xa7\xc4\x1b\xc8\x00\x00\x00\x0cIDAT\x08\xd7c`\x18\xdc\x00\x00\x00\xa0\x00\x01a%}G\x00\x00\x00\x00IEND\xaeB`\x82'
result_img = b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00 \x00\x00\x00 \x08\x02\x00\x00\x00\xfc\x18\xed\xa3\x00\x00\x03\xadIDATx\x9c\xb4V\x7flSU\x14\xfe\xeem\xeb \x95G\x95\x8da\x94\xcd\xc1\xa3\x01#\x91\x81\x11\x12u\x99\rfB]@\xfe1\x1a\x83\xff`buY\x88!\xc2 MH\xf0\x0f\x8c?0s\x19\x89C]\xb6\x18\x9aH\xfcQ\x02\x89\xd3Y$\x91Dg\x8cC\x84ml\xa1\x04t\x19[_\xdb\xf7\x96u\xd2\xbe{\xcd\xeb{\xdb\xfb\xc1\x14\xb7=\xbe\xbc\xb4\xe7\x9c{\xee\xf7\xbds\xcf\xcd\xbb\xd7\x9b\xbf|\x99\xcb2\x93e\x9e\xc9\x18\x86,sE\xf1m\xdcXRS\x93\x8b\xc7\xf3g\xcf\xe6{{\xd5\xabW\xb9$\x81s\x00 \x84\x96\x96z*+\xbdk\xd7\xdeU[[R_\x7f3\x91(\xf4\xf4`\xd1""\x084\x10 \x82\xa0\x19\xc5_\xc2\xf59\x16\xa8}}\xd9H\xe4\xe6\x993\x98\rJ\xea\xea\x84\x96\x16\x8f(:\xe2N\x81\x89\xb66\xa5\xb1\x91ON\xda\x92(\xf5\xacY\xe3\r\x06\xc9\x92%`\x8cKRa`\xa0p\xe9\x12\xecs\x89\xdf/\xb4\xb6.\xdc\xb9\xd3\xa6\xc0-\x90\xf7\xee\x1d\x06\xac\xcf\xd8\x86\r\x13\x1d\x1dj:\xcdo\x81\x9aJM\xb4\xb7\x8fUW;\xa6\xc8\xd1\xa85\xcd\x14\x90\x9b\x9a\xacy\xa3\xa2\x98;q\xe2V^\x07\x18c\xb9X\xec\xc6\x8a\x15\xd6\xb9\xca\xa1CN\x81\x89c\xc7\xac\x19\xe9m\xdbTE\xb9-\xbbYM6+m\xddje\xc8\x1d?\xae\x0f\x15{ \xf5\xa1s=\n9c\xd5\xaa\x1b\xf1\xd4\x07 dVM\x06g\xe8n@\xefQ\xc3\xf5\xdd\x8d\x97\xcfcq\x15\xd5\x9c\xef"&\xbb\xb8}.\xec\xc5\x9d\x80\xd0\x87x\xb0\xcep\xf3\xe3H\xec\x06@\x91\xec\xc2\xb5\xa9\x1d\x19\x10\xb1\xa5s.\xec:\xa8\x07\xe1\x18\x84\n\xc3\x1d\x8a\xe3\xcfs\x9e\x835)d\x06\x8d\xd0\xd3\x1fa\xe9\xba9\xb2\xeb\xf0.\xc0\xc2R\x0c~i\xb8\x93)\xc2\xdf\x9d\x1a+\x7f\x14/\xf5\xcc\x8b]\x07gZGG{5\x9b\xfa\xa89\xb0\xbe\xd1\x05v\xbd\x19\x8fD\x0c\x9b\xe5\tO\xebQ\x0f\x84\x14\xc8bw4\xd8\x08\xe4e\xba9U\x01]\xed\x1a\xbb\xc6V\x0eZ\xe5\x10X\xe5\x1a\xbb\x0eO\xd0.@\xeeuY\x80\x94\xd9\x05\xee\x18\xa6\x04\xb8\xe421\x1f\xd5\xff\xbd\xa4\xb9\x12\xc0Ce\xca\x1f\x117\xf9\xab>\x1eOf*\xcd\n\xfa\xc6\x86\xd2\xb9\xac[\xec\x7f)#\xc9\xccu\xdd6\x04\x18\xe7\xf1\x81o\xdd\x12\xf8\xba\xbfk\xda6\x9b\xdc\xfcs\xbb+\xec\x8c\xb3\xd6_:u\xdbG\xbdt\x8bX\xab;\xbf\x0e_\xf8\xfc\xe2\xa9\xf9\x0bt\x9e\xff\xe2\xc2\x8d\x01\xdd\x0e\xaf\n\xd176\xed\x9a\x1e\xdb\xd7}X\xfe[\x99\x0f\xbb\x94\xcbD\x13\xefM\xbb\xfb\x9f|];2\xeb\xf6ql6\x9e\xf0\x01\xae\xaa\xff\xff\xac\xb4!_\xe0\xa1=&\xd5\x8e\x83ZP\xebAK\x03\xfc\x0b\x0c\xcdS?\xa1\xa1\x05\x8c\xcd\xfa\xddU\x15\xaf5\xe3\xfb\xdf\x0c7\xe0\xc7\x91\xe2\xbe\xd7\x04\xc4\xfb\xd1j\xf9T\x1f=\x89\xf0\x01d\xc6g\xb322\x9e\xd9\x8f\xb6\xd3\x86K\x80O\xf6\xa0bi\xd1\x99.0\xfa\xa9Y\x1d6\xf3\x8a\x17yG\x17g\xecv\xf7\t\x95\xb7\x7f\xc3\x97\xbf`\x9b\xfbv\xccL\xb0\xdd\xec\xde\xfa\x0cQ\xfb^]\xb7\x12\xaf>\x8b\xed\x8f\xa3\xfc\x1e\xe7[\x0f\xa7\xf0\xd59\xad\xdc\xdf\xaf\x98A\x02\x1c\xde\x857\x9f\xb7D\x1cW\xc7X\x02\xaf\xbc\x8f\xf1I\']\xd52\x04\x1f@Y\xf1\xc8\x18\xcd\xa2\xff\x1a\x92#\xce\x9c\x80_[\x99\xe7\x9e\xb0\x05g\xb8\xfcJW\xb2\'ww_\x8c\x0f\xfe\xdb\x8a\xcf\x88\x87w\x04\xeb\x8f\x84\x02\x15\x82#>\x83\x80\x8e\xe4\x8f\xd7\x7fx\xa7\xa7\xff\xf4\x90\x9a\xff\xaf-E}tuxe\xa8i\xd3\xf2\xc7\xee\x9b1\xe1\x9f\x00\x00\x00\xff\xffr\xd7\x88\xc2\xc8\xa5\xb8\x01\x00\x00\x00\x00IEND\xaeB`\x82'

class Static(IsolatedAsyncioTestCase):
    async def asyncSetUp(self):
        self.client = pfp_lgbt.Client()
        self.flag = pfp_lgbt.Flag('pride')

    async def asyncTearDown(self):
        await self.client.close()

class TestStatic(Static):
    async def test_static_byte(self):
        await asyncio.sleep(1.5)
        circle = await self.client.imageStatic(sample_img, 'circle', 'solid', self.flag, 'png')
        assert circle == result_img, 'Byte static sample image does not match'
    async def test_static_file(self):
        await asyncio.sleep(2)
        with open('in.png', 'wb') as input_img:
            input_img.write(sample_img)
        await self.client.imageStatic('in.png', 'circle', 'solid', self.flag, 'png', 'out.png')
        with open('out.png', 'rb') as output_img:
            assert output_img.read() == result_img, 'File static sample output image does not match'
        os.remove('out.png')
        os.remove('in.png')
    async def test_static_url_error(self):
        await asyncio.sleep(1.5)
        try:
            await self.client.imageStatic('https://github.com/Weilbyte/pfp_lgbt.py', 'circle', 'solid', self.flag, 'png')
        except Exception as e:
            if not isinstance(e, pfp_lgbt.UnsupportedMIMEError):
                raise AssertionError('Error static sample image does not match UnsupportedMIMEError')
