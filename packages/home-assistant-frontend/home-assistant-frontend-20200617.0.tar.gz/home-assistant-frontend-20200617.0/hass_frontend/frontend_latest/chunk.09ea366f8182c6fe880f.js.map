{"version":3,"file":"chunk.09ea366f8182c6fe880f.js","sources":["webpack:///./src/common/search/search-input.ts","webpack:///src/mwc-fab-base.ts","webpack:///./src/components/data-table/ha-data-table.ts","webpack:///./src/panels/lovelace/editor/unused-entities/hui-unused-entities.ts"],"sourcesContent":["import \"@polymer/paper-input/paper-input\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  LitElement,\n  property,\n} from \"lit-element\";\nimport { html, TemplateResult } from \"lit-html\";\nimport { classMap } from \"lit-html/directives/class-map\";\nimport \"../../components/ha-svg-icon\";\nimport { fireEvent } from \"../dom/fire_event\";\nimport { mdiMagnify, mdiClose } from \"@mdi/js\";\nimport \"@material/mwc-icon-button/mwc-icon-button\";\n\n@customElement(\"search-input\")\nclass SearchInput extends LitElement {\n  @property() public filter?: string;\n\n  @property({ type: Boolean, attribute: \"no-label-float\" })\n  public noLabelFloat? = false;\n\n  @property({ type: Boolean, attribute: \"no-underline\" })\n  public noUnderline = false;\n\n  @property({ type: Boolean })\n  public autofocus = false;\n\n  public focus() {\n    this.shadowRoot!.querySelector(\"paper-input\")!.focus();\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <style>\n        .no-underline:not(.focused) {\n          --paper-input-container-underline: {\n            display: none;\n            height: 0;\n          }\n        }\n      </style>\n      <paper-input\n        class=${classMap({ \"no-underline\": this.noUnderline })}\n        .autofocus=${this.autofocus}\n        label=\"Search\"\n        .value=${this.filter}\n        @value-changed=${this._filterInputChanged}\n        .noLabelFloat=${this.noLabelFloat}\n      >\n        <ha-svg-icon\n          path=${mdiMagnify}\n          slot=\"prefix\"\n          class=\"prefix\"\n        ></ha-svg-icon>\n        ${this.filter &&\n        html`\n          <mwc-icon-button\n            slot=\"suffix\"\n            class=\"suffix\"\n            @click=${this._clearSearch}\n            alt=\"Clear\"\n            title=\"Clear\"\n          >\n            <ha-svg-icon path=${mdiClose}></ha-svg-icon>\n          </mwc-icon-button>\n        `}\n      </paper-input>\n    `;\n  }\n\n  private async _filterChanged(value: string) {\n    fireEvent(this, \"value-changed\", { value: String(value) });\n  }\n\n  private async _filterInputChanged(e) {\n    this._filterChanged(e.target.value);\n  }\n\n  private async _clearSearch() {\n    this._filterChanged(\"\");\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      ha-svg-icon,\n      mwc-icon-button {\n        color: var(--primary-text-color);\n      }\n      mwc-icon-button {\n        --mdc-icon-button-size: 24px;\n      }\n      ha-svg-icon.prefix {\n        margin: 8px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"search-input\": SearchInput;\n  }\n}\n","/**\n@license\nCopyright 2018 Google Inc. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport {ripple} from '@material/mwc-ripple/ripple-directive.js';\nimport {html, LitElement, property, TemplateResult} from 'lit-element';\nimport {classMap} from 'lit-html/directives/class-map.js';\n\nexport class FabBase extends LitElement {\n  @property({type: Boolean}) mini = false;\n\n  @property({type: Boolean}) exited = false;\n\n  @property({type: Boolean}) disabled = false;\n\n  @property({type: Boolean}) extended = false;\n\n  @property({type: Boolean}) showIconAtEnd = false;\n\n  @property() icon = '';\n\n  @property() label = '';\n\n  protected createRenderRoot() {\n    return this.attachShadow({mode: 'open', delegatesFocus: true});\n  }\n\n  protected render() {\n    const classes = {\n      'mdc-fab--mini': this.mini,\n      'mdc-fab--exited': this.exited,\n      'mdc-fab--extended': this.extended,\n      'icon-end': this.showIconAtEnd,\n    };\n    const showLabel = this.label !== '' && this.extended;\n\n    let iconTemplate: TemplateResult|string = '';\n\n    if (this.icon) {\n      iconTemplate = html`\n        <span class=\"material-icons mdc-fab__icon\">${this.icon}</span>`;\n    }\n\n    let label = html``;\n\n    if (showLabel) {\n      label = html`<span class=\"mdc-fab__label\">${this.label}</span>`;\n    }\n\n    return html`\n      <button\n          class=\"mdc-fab ${classMap(classes)}\"\n          ?disabled=\"${this.disabled}\"\n          aria-label=\"${this.label || this.icon}\"\n          .ripple=\"${ripple()}\">\n        <div class=\"mdc-fab__ripple\"></div>\n        ${this.showIconAtEnd ? label : ''}\n        <slot name=\"icon\">\n          ${iconTemplate}\n        </slot>\n        ${!this.showIconAtEnd ? label : ''}\n      </button>`;\n  }\n}\n","import deepClone from \"deep-clone-simple\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  PropertyValues,\n  query,\n  TemplateResult,\n} from \"lit-element\";\nimport { classMap } from \"lit-html/directives/class-map\";\nimport { ifDefined } from \"lit-html/directives/if-defined\";\nimport { styleMap } from \"lit-html/directives/style-map\";\nimport { scroll } from \"lit-virtualizer\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport \"../../common/search/search-input\";\nimport { debounce } from \"../../common/util/debounce\";\nimport { nextRender } from \"../../common/util/render-status\";\nimport \"../ha-checkbox\";\nimport type { HaCheckbox } from \"../ha-checkbox\";\nimport \"../ha-icon\";\nimport { filterData, sortData } from \"./sort-filter\";\nimport memoizeOne from \"memoize-one\";\n\ndeclare global {\n  // for fire event\n  interface HASSDomEvents {\n    \"selection-changed\": SelectionChangedEvent;\n    \"row-click\": RowClickedEvent;\n    \"sorting-changed\": SortingChangedEvent;\n  }\n}\n\nexport interface RowClickedEvent {\n  id: string;\n}\n\nexport interface SelectionChangedEvent {\n  value: string[];\n}\n\nexport interface SortingChangedEvent {\n  column: string;\n  direction: SortingDirection;\n}\n\nexport type SortingDirection = \"desc\" | \"asc\" | null;\n\nexport interface DataTableColumnContainer {\n  [key: string]: DataTableColumnData;\n}\n\nexport interface DataTableSortColumnData {\n  sortable?: boolean;\n  filterable?: boolean;\n  filterKey?: string;\n  direction?: SortingDirection;\n}\n\nexport interface DataTableColumnData extends DataTableSortColumnData {\n  title: string;\n  type?: \"numeric\" | \"icon\" | \"icon-button\";\n  template?: <T>(data: any, row: T) => TemplateResult | string;\n  width?: string;\n  maxWidth?: string;\n  grows?: boolean;\n}\n\nexport interface DataTableRowData {\n  [key: string]: any;\n  selectable?: boolean;\n}\n\nexport interface SortableColumnContainer {\n  [key: string]: DataTableSortColumnData;\n}\n\n@customElement(\"ha-data-table\")\nexport class HaDataTable extends LitElement {\n  @property({ type: Object }) public columns: DataTableColumnContainer = {};\n\n  @property({ type: Array }) public data: DataTableRowData[] = [];\n\n  @property({ type: Boolean }) public selectable = false;\n\n  @property({ type: Boolean }) public hasFab = false;\n\n  @property({ type: Boolean, attribute: \"auto-height\" })\n  public autoHeight = false;\n\n  @property({ type: String }) public id = \"id\";\n\n  @property({ type: String }) public noDataText?: string;\n\n  @property({ type: String }) public filter = \"\";\n\n  @property({ type: Boolean }) private _filterable = false;\n\n  @property({ type: String }) private _filter = \"\";\n\n  @property({ type: String }) private _sortColumn?: string;\n\n  @property({ type: String }) private _sortDirection: SortingDirection = null;\n\n  @property({ type: Array }) private _filteredData: DataTableRowData[] = [];\n\n  @query(\"slot[name='header']\") private _header!: HTMLSlotElement;\n\n  @query(\".mdc-data-table__table\") private _table!: HTMLDivElement;\n\n  private _checkableRowsCount?: number;\n\n  private _checkedRows: string[] = [];\n\n  private _sortColumns: SortableColumnContainer = {};\n\n  private curRequest = 0;\n\n  private _debounceSearch = debounce(\n    (value: string) => {\n      this._filter = value;\n    },\n    100,\n    false\n  );\n\n  public clearSelection(): void {\n    this._checkedRows = [];\n    this._checkedRowsChanged();\n  }\n\n  public connectedCallback() {\n    super.connectedCallback();\n    if (this._filteredData.length) {\n      // Force update of location of rows\n      this._filteredData = [...this._filteredData];\n    }\n  }\n\n  protected updated(properties: PropertyValues) {\n    super.updated(properties);\n\n    if (properties.has(\"columns\")) {\n      this._filterable = Object.values(this.columns).some(\n        (column) => column.filterable\n      );\n\n      for (const columnId in this.columns) {\n        if (this.columns[columnId].direction) {\n          this._sortDirection = this.columns[columnId].direction!;\n          this._sortColumn = columnId;\n          break;\n        }\n      }\n\n      const clonedColumns: DataTableColumnContainer = deepClone(this.columns);\n      Object.values(clonedColumns).forEach((column: DataTableColumnData) => {\n        delete column.title;\n        delete column.type;\n        delete column.template;\n      });\n\n      this._sortColumns = clonedColumns;\n    }\n\n    if (properties.has(\"filter\")) {\n      this._debounceSearch(this.filter);\n    }\n\n    if (properties.has(\"data\")) {\n      this._checkableRowsCount = this.data.filter(\n        (row) => row.selectable !== false\n      ).length;\n    }\n\n    if (\n      properties.has(\"data\") ||\n      properties.has(\"columns\") ||\n      properties.has(\"_filter\") ||\n      properties.has(\"_sortColumn\") ||\n      properties.has(\"_sortDirection\")\n    ) {\n      this._sortFilterData();\n    }\n  }\n\n  protected render() {\n    return html`\n      <div class=\"mdc-data-table\">\n        <slot name=\"header\" @slotchange=${this._calcTableHeight}>\n          ${this._filterable\n            ? html`\n                <div class=\"table-header\">\n                  <search-input\n                    @value-changed=${this._handleSearchChange}\n                  ></search-input>\n                </div>\n              `\n            : \"\"}\n        </slot>\n        <div\n          class=\"mdc-data-table__table ${classMap({\n            \"auto-height\": this.autoHeight,\n          })}\"\n          style=${styleMap({\n            height: this.autoHeight\n              ? `${(this._filteredData.length || 1) * 53 + 57}px`\n              : `calc(100% - ${this._header?.clientHeight}px)`,\n          })}\n        >\n          <div class=\"mdc-data-table__header-row\">\n            ${this.selectable\n              ? html`\n                  <div\n                    class=\"mdc-data-table__header-cell mdc-data-table__header-cell--checkbox\"\n                    role=\"columnheader\"\n                    scope=\"col\"\n                  >\n                    <ha-checkbox\n                      class=\"mdc-data-table__row-checkbox\"\n                      @change=${this._handleHeaderRowCheckboxClick}\n                      .indeterminate=${this._checkedRows.length &&\n                      this._checkedRows.length !== this._checkableRowsCount}\n                      .checked=${this._checkedRows.length ===\n                      this._checkableRowsCount}\n                    >\n                    </ha-checkbox>\n                  </div>\n                `\n              : \"\"}\n            ${Object.entries(this.columns).map((columnEntry) => {\n              const [key, column] = columnEntry;\n              const sorted = key === this._sortColumn;\n              const classes = {\n                \"mdc-data-table__header-cell--numeric\": Boolean(\n                  column.type === \"numeric\"\n                ),\n                \"mdc-data-table__header-cell--icon\": Boolean(\n                  column.type === \"icon\"\n                ),\n                \"mdc-data-table__header-cell--icon-button\": Boolean(\n                  column.type === \"icon-button\"\n                ),\n                sortable: Boolean(column.sortable),\n                \"not-sorted\": Boolean(column.sortable && !sorted),\n                grows: Boolean(column.grows),\n              };\n              return html`\n                <div\n                  class=\"mdc-data-table__header-cell ${classMap(classes)}\"\n                  style=${column.width\n                    ? styleMap({\n                        [column.grows ? \"minWidth\" : \"width\"]: column.width,\n                        maxWidth: column.maxWidth || \"\",\n                      })\n                    : \"\"}\n                  role=\"columnheader\"\n                  scope=\"col\"\n                  @click=${this._handleHeaderClick}\n                  .columnId=${key}\n                >\n                  ${column.sortable\n                    ? html`\n                        <ha-icon\n                          .icon=${sorted && this._sortDirection === \"desc\"\n                            ? \"hass:arrow-down\"\n                            : \"hass:arrow-up\"}\n                        ></ha-icon>\n                      `\n                    : \"\"}\n                  <span>${column.title}</span>\n                </div>\n              `;\n            })}\n          </div>\n          ${!this._filteredData.length\n            ? html`\n                <div class=\"mdc-data-table__content\">\n                  <div class=\"mdc-data-table__row\">\n                    <div class=\"mdc-data-table__cell grows center\">\n                      ${this.noDataText || \"No data\"}\n                    </div>\n                  </div>\n                </div>\n              `\n            : html`\n                <div class=\"mdc-data-table__content scroller\">\n                  ${scroll({\n                    items: !this.hasFab\n                      ? this._filteredData\n                      : [...this._filteredData, ...[{ empty: true }]],\n                    renderItem: (row: DataTableRowData) => {\n                      if (row.empty) {\n                        return html` <div class=\"mdc-data-table__row\"></div> `;\n                      }\n                      return html`\n                        <div\n                          .rowId=\"${row[this.id]}\"\n                          @click=${this._handleRowClick}\n                          class=\"mdc-data-table__row ${classMap({\n                            \"mdc-data-table__row--selected\": this._checkedRows.includes(\n                              String(row[this.id])\n                            ),\n                          })}\"\n                          aria-selected=${ifDefined(\n                            this._checkedRows.includes(String(row[this.id]))\n                              ? true\n                              : undefined\n                          )}\n                          .selectable=${row.selectable !== false}\n                        >\n                          ${this.selectable\n                            ? html`\n                                <div\n                                  class=\"mdc-data-table__cell mdc-data-table__cell--checkbox\"\n                                >\n                                  <ha-checkbox\n                                    class=\"mdc-data-table__row-checkbox\"\n                                    @change=${this._handleRowCheckboxClick}\n                                    .disabled=${row.selectable === false}\n                                    .checked=${this._checkedRows.includes(\n                                      String(row[this.id])\n                                    )}\n                                  >\n                                  </ha-checkbox>\n                                </div>\n                              `\n                            : \"\"}\n                          ${Object.entries(this.columns).map((columnEntry) => {\n                            const [key, column] = columnEntry;\n                            return html`\n                              <div\n                                class=\"mdc-data-table__cell ${classMap({\n                                  \"mdc-data-table__cell--numeric\": Boolean(\n                                    column.type === \"numeric\"\n                                  ),\n                                  \"mdc-data-table__cell--icon\": Boolean(\n                                    column.type === \"icon\"\n                                  ),\n                                  \"mdc-data-table__cell--icon-button\": Boolean(\n                                    column.type === \"icon-button\"\n                                  ),\n                                  grows: Boolean(column.grows),\n                                })}\"\n                                style=${column.width\n                                  ? styleMap({\n                                      [column.grows\n                                        ? \"minWidth\"\n                                        : \"width\"]: column.width,\n                                      maxWidth: column.maxWidth\n                                        ? column.maxWidth\n                                        : \"\",\n                                    })\n                                  : \"\"}\n                              >\n                                ${column.template\n                                  ? column.template(row[key], row)\n                                  : row[key]}\n                              </div>\n                            `;\n                          })}\n                        </div>\n                      `;\n                    },\n                  })}\n                </div>\n              `}\n        </div>\n      </div>\n    `;\n  }\n\n  private async _sortFilterData() {\n    const startTime = new Date().getTime();\n    this.curRequest++;\n    const curRequest = this.curRequest;\n\n    let filteredData = this.data;\n    if (this._filter) {\n      filteredData = await this._memFilterData(\n        this.data,\n        this._sortColumns,\n        this._filter\n      );\n    }\n\n    const prom = this._sortColumn\n      ? sortData(\n          filteredData,\n          this._sortColumns,\n          this._sortDirection,\n          this._sortColumn\n        )\n      : filteredData;\n\n    const [data] = await Promise.all([prom, nextRender]);\n\n    const curTime = new Date().getTime();\n    const elapsed = curTime - startTime;\n\n    if (elapsed < 100) {\n      await new Promise((resolve) => setTimeout(resolve, 100 - elapsed));\n    }\n    if (this.curRequest !== curRequest) {\n      return;\n    }\n    this._filteredData = data;\n  }\n\n  private _memFilterData = memoizeOne(\n    async (\n      data: DataTableRowData[],\n      columns: SortableColumnContainer,\n      filter: string\n    ): Promise<DataTableRowData[]> => {\n      return filterData(data, columns, filter);\n    }\n  );\n\n  private _handleHeaderClick(ev: Event) {\n    const columnId = ((ev.target as HTMLElement).closest(\n      \".mdc-data-table__header-cell\"\n    ) as any).columnId;\n    if (!this.columns[columnId].sortable) {\n      return;\n    }\n    if (!this._sortDirection || this._sortColumn !== columnId) {\n      this._sortDirection = \"asc\";\n    } else if (this._sortDirection === \"asc\") {\n      this._sortDirection = \"desc\";\n    } else {\n      this._sortDirection = null;\n    }\n\n    this._sortColumn = this._sortDirection === null ? undefined : columnId;\n\n    fireEvent(this, \"sorting-changed\", {\n      column: columnId,\n      direction: this._sortDirection,\n    });\n  }\n\n  private _handleHeaderRowCheckboxClick(ev: Event) {\n    const checkbox = ev.target as HaCheckbox;\n    if (checkbox.checked) {\n      this._checkedRows = this._filteredData\n        .filter((data) => data.selectable !== false)\n        .map((data) => data[this.id]);\n      this._checkedRowsChanged();\n    } else {\n      this._checkedRows = [];\n      this._checkedRowsChanged();\n    }\n  }\n\n  private _handleRowCheckboxClick(ev: Event) {\n    const checkbox = ev.target as HaCheckbox;\n    const rowId = (checkbox.closest(\".mdc-data-table__row\") as any).rowId;\n\n    if (checkbox.checked) {\n      if (this._checkedRows.includes(rowId)) {\n        return;\n      }\n      this._checkedRows = [...this._checkedRows, rowId];\n    } else {\n      this._checkedRows = this._checkedRows.filter((row) => row !== rowId);\n    }\n    this._checkedRowsChanged();\n  }\n\n  private _handleRowClick(ev: Event) {\n    const target = ev.target as HTMLElement;\n    if (target.tagName === \"HA-CHECKBOX\") {\n      return;\n    }\n    const rowId = (target.closest(\".mdc-data-table__row\") as any).rowId;\n    fireEvent(this, \"row-click\", { id: rowId }, { bubbles: false });\n  }\n\n  private _checkedRowsChanged() {\n    // force scroller to update, change it's items\n    this._filteredData = [...this._filteredData];\n    fireEvent(this, \"selection-changed\", {\n      value: this._checkedRows,\n    });\n  }\n\n  private _handleSearchChange(ev: CustomEvent): void {\n    this._debounceSearch(ev.detail.value);\n  }\n\n  private async _calcTableHeight() {\n    if (this.autoHeight) {\n      return;\n    }\n    await this.updateComplete;\n    this._table.style.height = `calc(100% - ${this._header.clientHeight}px)`;\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      /* default mdc styles, colors changed, without checkbox styles */\n      :host {\n        height: 100%;\n      }\n      .mdc-data-table__content {\n        font-family: Roboto, sans-serif;\n        -moz-osx-font-smoothing: grayscale;\n        -webkit-font-smoothing: antialiased;\n        font-size: 0.875rem;\n        line-height: 1.25rem;\n        font-weight: 400;\n        letter-spacing: 0.0178571429em;\n        text-decoration: inherit;\n        text-transform: inherit;\n      }\n\n      .mdc-data-table {\n        background-color: var(--data-table-background-color);\n        border-radius: 4px;\n        border-width: 1px;\n        border-style: solid;\n        border-color: rgba(var(--rgb-primary-text-color), 0.12);\n        display: inline-flex;\n        flex-direction: column;\n        box-sizing: border-box;\n        overflow: hidden;\n      }\n\n      .mdc-data-table__row--selected {\n        background-color: rgba(var(--rgb-primary-color), 0.04);\n      }\n\n      .mdc-data-table__row {\n        display: flex;\n        width: 100%;\n        height: 52px;\n      }\n\n      .mdc-data-table__row ~ .mdc-data-table__row {\n        border-top: 1px solid rgba(var(--rgb-primary-text-color), 0.12);\n      }\n\n      .mdc-data-table__row:not(.mdc-data-table__row--selected):hover {\n        background-color: rgba(var(--rgb-primary-text-color), 0.04);\n      }\n\n      .mdc-data-table__header-cell {\n        color: var(--primary-text-color);\n      }\n\n      .mdc-data-table__cell {\n        color: var(--primary-text-color);\n      }\n\n      .mdc-data-table__header-row {\n        height: 56px;\n        display: flex;\n        width: 100%;\n        border-bottom: 1px solid rgba(var(--rgb-primary-text-color), 0.12);\n        overflow-x: auto;\n      }\n\n      .mdc-data-table__header-row::-webkit-scrollbar {\n        display: none;\n      }\n\n      .mdc-data-table__cell,\n      .mdc-data-table__header-cell {\n        padding-right: 16px;\n        padding-left: 16px;\n        align-self: center;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        flex-shrink: 0;\n        box-sizing: border-box;\n      }\n\n      .mdc-data-table__cell.mdc-data-table__cell--icon {\n        overflow: initial;\n      }\n\n      .mdc-data-table__header-cell--checkbox,\n      .mdc-data-table__cell--checkbox {\n        /* @noflip */\n        padding-left: 16px;\n        /* @noflip */\n        padding-right: 0;\n        width: 56px;\n      }\n      [dir=\"rtl\"] .mdc-data-table__header-cell--checkbox,\n      .mdc-data-table__header-cell--checkbox[dir=\"rtl\"],\n      [dir=\"rtl\"] .mdc-data-table__cell--checkbox,\n      .mdc-data-table__cell--checkbox[dir=\"rtl\"] {\n        /* @noflip */\n        padding-left: 0;\n        /* @noflip */\n        padding-right: 16px;\n      }\n\n      .mdc-data-table__table {\n        height: 100%;\n        width: 100%;\n        border: 0;\n        white-space: nowrap;\n      }\n\n      .mdc-data-table__cell {\n        font-family: Roboto, sans-serif;\n        -moz-osx-font-smoothing: grayscale;\n        -webkit-font-smoothing: antialiased;\n        font-size: 0.875rem;\n        line-height: 1.25rem;\n        font-weight: 400;\n        letter-spacing: 0.0178571429em;\n        text-decoration: inherit;\n        text-transform: inherit;\n      }\n\n      .mdc-data-table__cell a {\n        color: inherit;\n        text-decoration: none;\n      }\n\n      .mdc-data-table__cell--numeric {\n        text-align: right;\n      }\n      [dir=\"rtl\"] .mdc-data-table__cell--numeric,\n      .mdc-data-table__cell--numeric[dir=\"rtl\"] {\n        /* @noflip */\n        text-align: left;\n      }\n\n      .mdc-data-table__cell--icon {\n        color: var(--secondary-text-color);\n        text-align: center;\n      }\n\n      .mdc-data-table__header-cell--icon,\n      .mdc-data-table__cell--icon {\n        width: 54px;\n      }\n\n      .mdc-data-table__header-cell.mdc-data-table__header-cell--icon {\n        text-align: center;\n      }\n      .mdc-data-table__header-cell.sortable.mdc-data-table__header-cell--icon:hover,\n      .mdc-data-table__header-cell.sortable.mdc-data-table__header-cell--icon:not(.not-sorted) {\n        text-align: left;\n      }\n\n      .mdc-data-table__cell--icon:first-child ha-icon {\n        margin-left: 8px;\n      }\n\n      .mdc-data-table__cell--icon:first-child state-badge {\n        margin-right: -8px;\n      }\n\n      .mdc-data-table__header-cell--icon-button,\n      .mdc-data-table__cell--icon-button {\n        width: 56px;\n        padding: 8px;\n      }\n\n      .mdc-data-table__cell--icon-button {\n        color: var(--secondary-text-color);\n        text-overflow: clip;\n      }\n\n      .mdc-data-table__header-cell--icon-button:first-child,\n      .mdc-data-table__cell--icon-button:first-child {\n        width: 64px;\n        padding-left: 16px;\n      }\n\n      .mdc-data-table__header-cell--icon-button:last-child,\n      .mdc-data-table__cell--icon-button:last-child {\n        width: 64px;\n        padding-right: 16px;\n      }\n\n      .mdc-data-table__cell--icon-button a {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-data-table__header-cell {\n        font-family: Roboto, sans-serif;\n        -moz-osx-font-smoothing: grayscale;\n        -webkit-font-smoothing: antialiased;\n        font-size: 0.875rem;\n        line-height: 1.375rem;\n        font-weight: 500;\n        letter-spacing: 0.0071428571em;\n        text-decoration: inherit;\n        text-transform: inherit;\n        text-align: left;\n      }\n      [dir=\"rtl\"] .mdc-data-table__header-cell,\n      .mdc-data-table__header-cell[dir=\"rtl\"] {\n        /* @noflip */\n        text-align: right;\n      }\n\n      .mdc-data-table__header-cell--numeric {\n        text-align: right;\n      }\n      .mdc-data-table__header-cell--numeric.sortable:hover,\n      .mdc-data-table__header-cell--numeric.sortable:not(.not-sorted) {\n        text-align: left;\n      }\n      [dir=\"rtl\"] .mdc-data-table__header-cell--numeric,\n      .mdc-data-table__header-cell--numeric[dir=\"rtl\"] {\n        /* @noflip */\n        text-align: left;\n      }\n\n      /* custom from here */\n\n      :host {\n        display: block;\n      }\n\n      .mdc-data-table {\n        display: block;\n        border-width: var(--data-table-border-width, 1px);\n        height: 100%;\n      }\n      .mdc-data-table__header-cell {\n        overflow: hidden;\n        position: relative;\n      }\n      .mdc-data-table__header-cell span {\n        position: relative;\n        left: 0px;\n      }\n\n      .mdc-data-table__header-cell.sortable {\n        cursor: pointer;\n      }\n      .mdc-data-table__header-cell > * {\n        transition: left 0.2s ease;\n      }\n      .mdc-data-table__header-cell ha-icon {\n        top: -3px;\n        position: absolute;\n      }\n      .mdc-data-table__header-cell.not-sorted ha-icon {\n        left: -20px;\n      }\n      .mdc-data-table__header-cell.sortable:not(.not-sorted) span,\n      .mdc-data-table__header-cell.sortable.not-sorted:hover span {\n        left: 24px;\n      }\n      .mdc-data-table__header-cell.sortable:not(.not-sorted) ha-icon,\n      .mdc-data-table__header-cell.sortable:hover.not-sorted ha-icon {\n        left: 12px;\n      }\n      .table-header {\n        border-bottom: 1px solid rgba(var(--rgb-primary-text-color), 0.12);\n        padding: 0 16px;\n      }\n      search-input {\n        position: relative;\n        top: 2px;\n      }\n      slot[name=\"header\"] {\n        display: block;\n      }\n      .center {\n        text-align: center;\n      }\n      .secondary {\n        color: var(--secondary-text-color);\n      }\n      .scroller {\n        display: flex;\n        position: relative;\n        contain: strict;\n        height: calc(100% - 57px);\n      }\n      .mdc-data-table__table:not(.auto-height) .scroller {\n        overflow: auto;\n      }\n      .grows {\n        flex-grow: 1;\n        flex-shrink: 1;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-data-table\": HaDataTable;\n  }\n}\n","import \"@material/mwc-fab\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  PropertyValues,\n  TemplateResult,\n} from \"lit-element\";\nimport { classMap } from \"lit-html/directives/class-map\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent, HASSDomEvent } from \"../../../../common/dom/fire_event\";\nimport { computeDomain } from \"../../../../common/entity/compute_domain\";\nimport { computeStateName } from \"../../../../common/entity/compute_state_name\";\nimport { computeRTL } from \"../../../../common/util/compute_rtl\";\nimport \"../../../../components/data-table/ha-data-table\";\nimport type {\n  DataTableColumnContainer,\n  SelectionChangedEvent,\n} from \"../../../../components/data-table/ha-data-table\";\nimport \"../../../../components/entity/state-badge\";\nimport \"../../../../components/ha-icon\";\nimport \"../../../../components/ha-relative-time\";\nimport type { LovelaceConfig } from \"../../../../data/lovelace\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport { computeUnusedEntities } from \"../../common/compute-unused-entities\";\nimport type { Lovelace } from \"../../types\";\nimport { addEntitiesToLovelaceView } from \"../add-entities-to-view\";\nimport \"../../../../components/ha-svg-icon\";\nimport { mdiPlus } from \"@mdi/js\";\n\n@customElement(\"hui-unused-entities\")\nexport class HuiUnusedEntities extends LitElement {\n  @property() public lovelace?: Lovelace;\n\n  @property() public hass!: HomeAssistant;\n\n  @property() public narrow?: boolean;\n\n  @property() private _unusedEntities: string[] = [];\n\n  @property() private _selectedEntities: string[] = [];\n\n  private get _config(): LovelaceConfig {\n    return this.lovelace!.config;\n  }\n\n  private _columns = memoizeOne((narrow: boolean) => {\n    const columns: DataTableColumnContainer = {\n      icon: {\n        title: \"\",\n        type: \"icon\",\n        template: (_icon, entity: any) => html`\n          <state-badge\n            @click=${this._handleEntityClicked}\n            .hass=${this.hass!}\n            .stateObj=${entity.stateObj}\n          ></state-badge>\n        `,\n      },\n      name: {\n        title: this.hass!.localize(\"ui.panel.lovelace.unused_entities.entity\"),\n        sortable: true,\n        filterable: true,\n        grows: true,\n        direction: \"asc\",\n        template: (name, entity: any) => html`\n          <div @click=${this._handleEntityClicked} style=\"cursor: pointer;\">\n            ${name}\n            ${narrow\n              ? html`\n                  <div class=\"secondary\">\n                    ${entity.stateObj.entity_id}\n                  </div>\n                `\n              : \"\"}\n          </div>\n        `,\n      },\n    };\n\n    if (narrow) {\n      return columns;\n    }\n\n    columns.entity_id = {\n      title: this.hass!.localize(\"ui.panel.lovelace.unused_entities.entity_id\"),\n      sortable: true,\n      filterable: true,\n      width: \"30%\",\n    };\n    columns.domain = {\n      title: this.hass!.localize(\"ui.panel.lovelace.unused_entities.domain\"),\n      sortable: true,\n      filterable: true,\n      width: \"15%\",\n    };\n    columns.last_changed = {\n      title: this.hass!.localize(\n        \"ui.panel.lovelace.unused_entities.last_changed\"\n      ),\n      type: \"numeric\",\n      sortable: true,\n      width: \"15%\",\n      template: (lastChanged: string) => html`\n        <ha-relative-time\n          .hass=${this.hass!}\n          .datetime=${lastChanged}\n        ></ha-relative-time>\n      `,\n    };\n\n    return columns;\n  });\n\n  protected updated(changedProperties: PropertyValues): void {\n    super.updated(changedProperties);\n\n    if (changedProperties.has(\"lovelace\")) {\n      this._getUnusedEntities();\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this.lovelace) {\n      return html``;\n    }\n\n    if (this.lovelace.mode === \"storage\" && this.lovelace.editMode === false) {\n      return html``;\n    }\n\n    return html`\n      ${!this.narrow\n        ? html`\n            <ha-card\n              header=\"${this.hass.localize(\n                \"ui.panel.lovelace.unused_entities.title\"\n              )}\"\n            >\n              <div class=\"card-content\">\n                ${this.hass.localize(\n                  \"ui.panel.lovelace.unused_entities.available_entities\"\n                )}\n                ${this.lovelace.mode === \"storage\"\n                  ? html`\n                      <br />${this.hass.localize(\n                        \"ui.panel.lovelace.unused_entities.select_to_add\"\n                      )}\n                    `\n                  : \"\"}\n              </div>\n            </ha-card>\n          `\n        : \"\"}\n      <ha-data-table\n        .columns=${this._columns(this.narrow!)}\n        .data=${this._unusedEntities.map((entity) => {\n          const stateObj = this.hass!.states[entity];\n          return {\n            icon: \"\",\n            entity_id: entity,\n            stateObj,\n            name: computeStateName(stateObj),\n            domain: computeDomain(entity),\n            last_changed: stateObj!.last_changed,\n          };\n        })}\n        .id=${\"entity_id\"}\n        selectable\n        @selection-changed=${this._handleSelectionChanged}\n      ></ha-data-table>\n\n      ${this._selectedEntities.length\n        ? html`\n            <mwc-fab\n              class=\"${classMap({\n                rtl: computeRTL(this.hass),\n              })}\"\n              .label=${this.hass.localize(\n                \"ui.panel.lovelace.editor.edit_card.add\"\n              )}\n              @click=${this._addToLovelaceView}\n            >\n              <ha-svg-icon slot=\"icon\" path=${mdiPlus}></ha-svg-icon>\n            </mwc-fab>\n          `\n        : \"\"}\n    `;\n  }\n\n  private _getUnusedEntities(): void {\n    if (!this.hass || !this.lovelace) {\n      return;\n    }\n    this._selectedEntities = [];\n    const unusedEntities = computeUnusedEntities(this.hass, this._config!);\n    this._unusedEntities = [...unusedEntities].sort();\n  }\n\n  private _handleSelectionChanged(\n    ev: HASSDomEvent<SelectionChangedEvent>\n  ): void {\n    this._selectedEntities = ev.detail.value;\n  }\n\n  private _handleEntityClicked(ev: Event) {\n    const entityId = ((ev.target as HTMLElement).closest(\n      \".mdc-data-table__row\"\n    ) as any).rowId;\n    fireEvent(this, \"hass-more-info\", {\n      entityId,\n    });\n  }\n\n  private _addToLovelaceView(): void {\n    addEntitiesToLovelaceView(\n      this,\n      this.hass,\n      this._selectedEntities,\n      this.lovelace!.config,\n      this.lovelace!.saveConfig\n    );\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      :host {\n        background: var(--lovelace-background);\n        display: flex;\n        flex-direction: column;\n      }\n      ha-card {\n        --ha-card-box-shadow: none;\n        --ha-card-border-radius: 0;\n      }\n      ha-data-table {\n        --data-table-border-width: 0;\n        flex-grow: 1;\n        margin-top: -20px;\n      }\n      mwc-fab {\n        position: absolute;\n        right: 16px;\n        bottom: 16px;\n        z-index: 1;\n      }\n      mwc-fab.rtl {\n        left: 16px;\n        right: auto;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-unused-entities\": HuiUnusedEntities;\n  }\n}\n"],"mappings":";AAeA;;;;;;;;;;AA4BA;AACA;;AAEA;AACA;AACA;;;AAGA;;;;AAIA;;;;AAKA;;;;AAIA;;;;AAOA;;;;;;;;;;;AAvDA;ACoCA;;AAWA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AAnDA;;AC0KA;AACA;;;AAIA;;;AAIA;;;AAGA;AAGA;;;AAOA;;;;;;;;AASA;AACA;AAEA;;;;AAMA;AACA;;AAmBA;AACA;;;AAQA;AACA;;AAEA;;AAGA;;AAKA;AACA;;;;AAKA;;AAYA;;AAUA;AACA;AACA;AAKA;AAKA;;AAEA;;;;;;AAOA;AACA;AACA;;;;AAOA;AACA;;AAIA;AAYA;;AAWA;;;;;;AA/EA;;;;AAIA;;;;;;;AA1MA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;ACxBA;AACA;AACA;;AAIA;AAOA;AACA;AACA;;AAGA;;AAGA;;AAMA;;AAyBA;AACA;;AAKA;AAqBA;;AAGA;;;AAKA;AAGA;AAEA;AAIA;;;;;AAMA;AACA;AAWA;;AAEA;;;AAGA;;AAGA;AAGA;AAGA;;AAEA;;AAGA;AA9DA;;;;;;;;;;;;;;;;;;;;;;;;;AA7FA","sourceRoot":""}