{"version":3,"file":"chunk.854c37c860152843b953.js","sources":["webpack:///./src/common/entity/compute_state_name.ts","webpack:///./src/components/entity/state-badge.ts","webpack:///src/mwc-formfield-base.ts","webpack:///./src/components/ha-formfield.ts","webpack:///./src/components/entity/state-info.js"],"sourcesContent":["import { HassEntity } from \"home-assistant-js-websocket\";\nimport { computeObjectId } from \"./compute_object_id\";\n\nexport const computeStateName = (stateObj: HassEntity): string => {\n  return stateObj.attributes.friendly_name === undefined\n    ? computeObjectId(stateObj.entity_id).replace(/_/g, \" \")\n    : stateObj.attributes.friendly_name || \"\";\n};\n","import type { HassEntity } from \"home-assistant-js-websocket\";\nimport { styleMap } from \"lit-html/directives/style-map\";\nimport {\n  css,\n  CSSResult,\n  html,\n  LitElement,\n  property,\n  PropertyValues,\n  TemplateResult,\n} from \"lit-element\";\nimport { ifDefined } from \"lit-html/directives/if-defined\";\nimport { computeActiveState } from \"../../common/entity/compute_active_state\";\nimport { computeStateDomain } from \"../../common/entity/compute_state_domain\";\nimport { stateIcon } from \"../../common/entity/state_icon\";\nimport { iconColorCSS } from \"../../common/style/icon_color_css\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-icon\";\n\nexport class StateBadge extends LitElement {\n  public hass?: HomeAssistant;\n\n  @property() public stateObj?: HassEntity;\n\n  @property() public overrideIcon?: string;\n\n  @property() public overrideImage?: string;\n\n  @property({ type: Boolean }) public stateColor?: boolean;\n\n  @property({ type: Boolean, reflect: true, attribute: \"icon\" })\n  private _showIcon = true;\n\n  @property() private _iconStyle: { [name: string]: string } = {};\n\n  protected render(): TemplateResult {\n    const stateObj = this.stateObj;\n\n    if (!stateObj || !this._showIcon) {\n      return html``;\n    }\n\n    const domain = computeStateDomain(stateObj);\n\n    return html`\n      <ha-icon\n        style=${styleMap(this._iconStyle)}\n        data-domain=${ifDefined(\n          this.stateColor || (domain === \"light\" && this.stateColor !== false)\n            ? domain\n            : undefined\n        )}\n        data-state=${computeActiveState(stateObj)}\n        .icon=${this.overrideIcon || stateIcon(stateObj)}\n      ></ha-icon>\n    `;\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    if (!changedProps.has(\"stateObj\") || !this.stateObj) {\n      return;\n    }\n    const stateObj = this.stateObj;\n\n    const iconStyle: { [name: string]: string } = {};\n    const hostStyle: Partial<CSSStyleDeclaration> = {\n      backgroundImage: \"\",\n    };\n\n    this._showIcon = true;\n\n    if (stateObj) {\n      // hide icon if we have entity picture\n      if (\n        (stateObj.attributes.entity_picture && !this.overrideIcon) ||\n        this.overrideImage\n      ) {\n        let imageUrl = this.overrideImage || stateObj.attributes.entity_picture;\n        if (this.hass) {\n          imageUrl = this.hass.hassUrl(imageUrl);\n        }\n        hostStyle.backgroundImage = `url(${imageUrl})`;\n        this._showIcon = false;\n      } else if (stateObj.state === \"on\") {\n        if (stateObj.attributes.hs_color && this.stateColor !== false) {\n          const hue = stateObj.attributes.hs_color[0];\n          const sat = stateObj.attributes.hs_color[1];\n          if (sat > 10) {\n            iconStyle.color = `hsl(${hue}, 100%, ${100 - sat / 2}%)`;\n          }\n        }\n        if (stateObj.attributes.brightness && this.stateColor !== false) {\n          const brightness = stateObj.attributes.brightness;\n          if (typeof brightness !== \"number\") {\n            const errorMessage = `Type error: state-badge expected number, but type of ${\n              stateObj.entity_id\n            }.attributes.brightness is ${typeof brightness} (${brightness})`;\n            // eslint-disable-next-line\n            console.warn(errorMessage);\n          }\n          // lowest brighntess will be around 50% (that's pretty dark)\n          iconStyle.filter = `brightness(${(brightness + 245) / 5}%)`;\n        }\n      }\n    }\n    this._iconStyle = iconStyle;\n    Object.assign(this.style, hostStyle);\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      :host {\n        position: relative;\n        display: inline-block;\n        width: 40px;\n        color: var(--paper-item-icon-color, #44739e);\n        border-radius: 50%;\n        height: 40px;\n        text-align: center;\n        background-size: cover;\n        line-height: 40px;\n        vertical-align: middle;\n        box-sizing: border-box;\n      }\n      :host(:focus) {\n        outline: none;\n      }\n      :host(:not([icon]):focus) {\n        border: 2px solid var(--divider-color);\n      }\n      :host([icon]:focus) {\n        background: var(--divider-color);\n      }\n      ha-icon {\n        transition: color 0.3s ease-in-out, filter 0.3s ease-in-out;\n      }\n\n      ${iconColorCSS}\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"state-badge\": StateBadge;\n  }\n}\n\ncustomElements.define(\"state-badge\", StateBadge);\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// tslint:disable:no-new-decorators\n\nimport {MDCFormFieldAdapter} from '@material/form-field/adapter';\nimport MDCFormFieldFoundation from '@material/form-field/foundation';\nimport {BaseElement, EventType, SpecificEventListener} from '@material/mwc-base/base-element';\nimport {FormElement} from '@material/mwc-base/form-element';\nimport {observer} from '@material/mwc-base/observer';\nimport {findAssignedElement} from '@material/mwc-base/utils';\nimport {html, property, query} from 'lit-element';\nimport {classMap} from 'lit-html/directives/class-map';\n\n\nexport class FormfieldBase extends BaseElement {\n  @property({type: Boolean}) alignEnd = false;\n  @property({type: Boolean}) spaceBetween = false;\n  @property({type: Boolean}) nowrap = false;\n\n  @property({type: String})\n  @observer(async function(this: FormfieldBase, label: string) {\n    const input = this.input;\n    if (input) {\n      if (input.localName === 'input') {\n        input.setAttribute('aria-label', label);\n      } else if (input instanceof FormElement) {\n        await input.updateComplete;\n        input.setAriaLabel(label);\n      }\n    }\n  })\n  label = '';\n\n  @query('.mdc-form-field') protected mdcRoot!: HTMLElement;\n\n  protected mdcFoundation!: MDCFormFieldFoundation;\n\n  protected readonly mdcFoundationClass = MDCFormFieldFoundation;\n\n  protected createAdapter(): MDCFormFieldAdapter {\n    return {\n      registerInteractionHandler:\n          <K extends EventType>(type: K, handler: SpecificEventListener<K>) => {\n            this.labelEl.addEventListener(type, handler);\n          },\n      deregisterInteractionHandler:\n          <K extends EventType>(type: K, handler: SpecificEventListener<K>) => {\n            this.labelEl.removeEventListener(type, handler);\n          },\n      activateInputRipple: async () => {\n        const input = this.input;\n        if (input instanceof FormElement) {\n          const ripple = await input.ripple;\n          if (ripple) {\n            ripple.startPress();\n          }\n        }\n      },\n      deactivateInputRipple: async () => {\n        const input = this.input;\n        if (input instanceof FormElement) {\n          const ripple = await input.ripple;\n          if (ripple) {\n            ripple.endPress();\n          }\n        }\n      },\n    };\n  }\n\n  // slotEl should have type HTMLSlotElement, but when TypeScript's\n  // emitDecoratorMetadata is enabled, the HTMLSlotElement constructor will\n  // be emitted into the runtime, which will cause an \"HTMLSlotElement is\n  // undefined\" error in browsers that don't define it (e.g. IE11).\n  @query('slot') protected slotEl!: HTMLElement;\n\n  @query('label') protected labelEl!: HTMLLabelElement;\n\n  protected get input() {\n    return findAssignedElement(this.slotEl as HTMLSlotElement, '*');\n  }\n\n  protected render() {\n    const classes = {\n      'mdc-form-field--align-end': this.alignEnd,\n      'mdc-form-field--space-between': this.spaceBetween,\n      'mdc-form-field--nowrap': this.nowrap\n    };\n\n    return html`\n      <div class=\"mdc-form-field ${classMap(classes)}\">\n        <slot></slot>\n        <label class=\"mdc-label\"\n               @click=\"${this._labelClick}\">${this.label}</label>\n      </div>`;\n  }\n\n  private _labelClick() {\n    const input = this.input;\n    if (input) {\n      input.focus();\n      input.click();\n    }\n  }\n}\n","import \"@material/mwc-formfield\";\nimport type { Formfield } from \"@material/mwc-formfield\";\nimport { style } from \"@material/mwc-formfield/mwc-formfield-css\";\nimport { css, CSSResult, customElement } from \"lit-element\";\nimport { Constructor } from \"../types\";\n\nconst MwcFormfield = customElements.get(\"mwc-formfield\") as Constructor<\n  Formfield\n>;\n\n@customElement(\"ha-formfield\")\nexport class HaFormfield extends MwcFormfield {\n  protected static get styles(): CSSResult[] {\n    return [\n      style,\n      css`\n        ::slotted(ha-switch) {\n          margin-right: 10px;\n        }\n        [dir=\"rtl\"] ::slotted(ha-switch),\n        ::slotted(ha-switch)[dir=\"rtl\"] {\n          margin-left: 10px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-formfield\": HaFormfield;\n  }\n}\n","import { html } from \"@polymer/polymer/lib/utils/html-tag\";\n/* eslint-plugin-disable lit */\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\nimport { computeStateName } from \"../../common/entity/compute_state_name\";\nimport { computeRTL } from \"../../common/util/compute_rtl\";\nimport \"../ha-relative-time\";\nimport \"./state-badge\";\n\nclass StateInfo extends PolymerElement {\n  static get template() {\n    return html`\n      ${this.styleTemplate} ${this.stateBadgeTemplate} ${this.infoTemplate}\n    `;\n  }\n\n  static get styleTemplate() {\n    return html`\n      <style>\n        :host {\n          @apply --paper-font-body1;\n          min-width: 120px;\n          white-space: nowrap;\n        }\n\n        state-badge {\n          float: left;\n        }\n\n        :host([rtl]) state-badge {\n          float: right;\n        }\n\n        .info {\n          margin-left: 56px;\n        }\n\n        :host([rtl]) .info {\n          margin-right: 56px;\n          margin-left: 0;\n          text-align: right;\n        }\n\n        .name {\n          @apply --paper-font-common-nowrap;\n          color: var(--primary-text-color);\n          line-height: 40px;\n        }\n\n        .name[in-dialog],\n        :host([secondary-line]) .name {\n          line-height: 20px;\n        }\n\n        .time-ago,\n        .extra-info,\n        .extra-info > * {\n          @apply --paper-font-common-nowrap;\n          color: var(--secondary-text-color);\n        }\n      </style>\n    `;\n  }\n\n  static get stateBadgeTemplate() {\n    return html` <state-badge state-obj=\"[[stateObj]]\"></state-badge> `;\n  }\n\n  static get infoTemplate() {\n    return html`\n      <div class=\"info\">\n        <div class=\"name\" in-dialog$=\"[[inDialog]]\">\n          [[computeStateName(stateObj)]]\n        </div>\n\n        <template is=\"dom-if\" if=\"[[inDialog]]\">\n          <div class=\"time-ago\">\n            <ha-relative-time\n              hass=\"[[hass]]\"\n              datetime=\"[[stateObj.last_changed]]\"\n            ></ha-relative-time>\n          </div>\n        </template>\n        <template is=\"dom-if\" if=\"[[!inDialog]]\">\n          <div class=\"extra-info\"><slot> </slot></div>\n        </template>\n      </div>\n    `;\n  }\n\n  static get properties() {\n    return {\n      hass: Object,\n      stateObj: Object,\n      inDialog: {\n        type: Boolean,\n        value: () => false,\n      },\n      rtl: {\n        type: Boolean,\n        reflectToAttribute: true,\n        computed: \"computeRTL(hass)\",\n      },\n    };\n  }\n\n  computeStateName(stateObj) {\n    return computeStateName(stateObj);\n  }\n\n  computeRTL(hass) {\n    return computeRTL(hass);\n  }\n}\n\ncustomElements.define(\"state-info\", StateInfo);\n"],"mappings":";AACA;;AC6CA;AACA;AAKA;AACA;;AAlCA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsHA;AAtHA;ACqFA;;;AAGA;AAIA;;;;;;;;ACpGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;AAWA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDA;;;;;;;;;;;;;;;;;;AA0BA","sourceRoot":""}