{"version":3,"file":"chunk.2b2de69760765382555e.js","sources":["webpack:///./src/components/dialog/ha-iron-focusables-helper.js","webpack:///./src/panels/lovelace/components/hui-views-list.ts","webpack:///./src/panels/lovelace/editor/select-view/hui-dialog-select-view.ts"],"sourcesContent":["/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\n/*\n  Fixes issue with not using shadow dom properly in iron-overlay-behavior/icon-focusables-helper.js\n*/\nimport { IronFocusablesHelper } from \"@polymer/iron-overlay-behavior/iron-focusables-helper\";\nimport { dom } from \"@polymer/polymer/lib/legacy/polymer.dom\";\n\nexport const HaIronFocusablesHelper = {\n  /**\n   * Returns a sorted array of tabbable nodes, including the root node.\n   * It searches the tabbable nodes in the light and shadow dom of the chidren,\n   * sorting the result by tabindex.\n   * @param {!Node} node\n   * @return {!Array<!HTMLElement>}\n   */\n  getTabbableNodes: function (node) {\n    var result = [];\n    // If there is at least one element with tabindex > 0, we need to sort\n    // the final array by tabindex.\n    var needsSortByTabIndex = this._collectTabbableNodes(node, result);\n    if (needsSortByTabIndex) {\n      return IronFocusablesHelper._sortByTabIndex(result);\n    }\n    return result;\n  },\n\n  /**\n   * Searches for nodes that are tabbable and adds them to the `result` array.\n   * Returns if the `result` array needs to be sorted by tabindex.\n   * @param {!Node} node The starting point for the search; added to `result`\n   * if tabbable.\n   * @param {!Array<!HTMLElement>} result\n   * @return {boolean}\n   * @private\n   */\n  _collectTabbableNodes: function (node, result) {\n    // If not an element or not visible, no need to explore children.\n    if (\n      node.nodeType !== Node.ELEMENT_NODE ||\n      !IronFocusablesHelper._isVisible(node)\n    ) {\n      return false;\n    }\n    var element = /** @type {!HTMLElement} */ (node);\n    var tabIndex = IronFocusablesHelper._normalizedTabIndex(element);\n    var needsSort = tabIndex > 0;\n    if (tabIndex >= 0) {\n      result.push(element);\n    }\n\n    // In ShadowDOM v1, tab order is affected by the order of distrubution.\n    // E.g. getTabbableNodes(#root) in ShadowDOM v1 should return [#A, #B];\n    // in ShadowDOM v0 tab order is not affected by the distrubution order,\n    // in fact getTabbableNodes(#root) returns [#B, #A].\n    //  <div id=\"root\">\n    //   <!-- shadow -->\n    //     <slot name=\"a\">\n    //     <slot name=\"b\">\n    //   <!-- /shadow -->\n    //   <input id=\"A\" slot=\"a\">\n    //   <input id=\"B\" slot=\"b\" tabindex=\"1\">\n    //  </div>\n    // TODO(valdrin) support ShadowDOM v1 when upgrading to Polymer v2.0.\n    var children;\n    if (element.localName === \"content\" || element.localName === \"slot\") {\n      children = dom(element).getDistributedNodes();\n    } else {\n      // /////////////////////////\n      // Use shadow root if possible, will check for distributed nodes.\n      // THIS IS THE CHANGED LINE\n      children = dom(element.shadowRoot || element.root || element).children;\n      // /////////////////////////\n    }\n    for (var i = 0; i < children.length; i++) {\n      // Ensure method is always invoked to collect tabbable children.\n      needsSort = this._collectTabbableNodes(children[i], result) || needsSort;\n    }\n    return needsSort;\n  },\n};\n","import \"@polymer/paper-item/paper-icon-item\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  TemplateResult,\n} from \"lit-element\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { toggleAttribute } from \"../../../common/dom/toggle_attribute\";\nimport \"../../../components/ha-icon\";\nimport { LovelaceConfig } from \"../../../data/lovelace\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"view-selected\": {\n      view: number;\n    };\n  }\n}\n\n@customElement(\"hui-views-list\")\nclass HuiViewsList extends LitElement {\n  @property() private lovelaceConfig?: LovelaceConfig | undefined;\n\n  @property() private selected?: number | undefined;\n\n  protected render(): TemplateResult {\n    if (!this.lovelaceConfig) {\n      return html``;\n    }\n\n    return html`\n      <paper-listbox attr-for-selected=\"data-index\" .selected=${this.selected}>\n        ${this.lovelaceConfig.views.map(\n          (view, index) => html`\n            <paper-icon-item @click=${this._handlePickView} data-index=${index}>\n              ${view.icon\n                ? html`\n                    <ha-icon .icon=${view.icon} slot=\"item-icon\"></ha-icon>\n                  `\n                : \"\"}\n              ${view.title || view.path}\n            </paper-icon-item>\n          `\n        )}\n      </paper-listbox>\n    `;\n  }\n\n  protected updated(changedProps) {\n    super.updated(changedProps);\n    toggleAttribute(\n      this,\n      \"hide-icons\",\n      this.lovelaceConfig\n        ? !this.lovelaceConfig.views.some((view) => view.icon)\n        : true\n    );\n  }\n\n  private async _handlePickView(ev: Event) {\n    const view = Number((ev.currentTarget as any).getAttribute(\"data-index\"));\n    fireEvent(this, \"view-selected\", { view });\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      paper-listbox {\n        padding-top: 0;\n      }\n\n      paper-listbox ha-icon {\n        padding: 12px;\n        color: var(--secondary-text-color);\n      }\n\n      paper-icon-item {\n        cursor: pointer;\n      }\n\n      paper-icon-item[disabled] {\n        cursor: initial;\n      }\n\n      :host([hide-icons]) paper-icon-item {\n        --paper-item-icon-width: 0px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-views-list\": HuiViewsList;\n  }\n}\n","import {\n  customElement,\n  html,\n  LitElement,\n  property,\n  TemplateResult,\n} from \"lit-element\";\nimport { toggleAttribute } from \"../../../../common/dom/toggle_attribute\";\nimport \"../../../../components/dialog/ha-paper-dialog\";\nimport type { HaPaperDialog } from \"../../../../components/dialog/ha-paper-dialog\";\nimport type { PolymerChangedEvent } from \"../../../../polymer-types\";\nimport \"../../components/hui-views-list\";\nimport type { SelectViewDialogParams } from \"./show-select-view-dialog\";\n\n@customElement(\"hui-dialog-select-view\")\nexport class HuiDialogSelectView extends LitElement {\n  @property() private _params?: SelectViewDialogParams;\n\n  public async showDialog(params: SelectViewDialogParams): Promise<void> {\n    this._params = params;\n    await this.updateComplete;\n  }\n\n  protected updated(changedProps) {\n    super.updated(changedProps);\n    toggleAttribute(\n      this,\n      \"hide-icons\",\n      this._params?.lovelaceConfig\n        ? !this._params.lovelaceConfig.views.some((view) => view.icon)\n        : true\n    );\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n    return html`\n      <ha-paper-dialog\n        with-backdrop\n        opened\n        @opened-changed=\"${this._openedChanged}\"\n      >\n        <h2>Choose a view</h2>\n        <hui-views-list\n          .lovelaceConfig=${this._params!.lovelaceConfig}\n          @view-selected=${this._selectView}\n        >\n        </hui-views-list>\n      </ha-paper-dialog>\n    `;\n  }\n\n  private get _dialog(): HaPaperDialog {\n    return this.shadowRoot!.querySelector(\"ha-paper-dialog\")!;\n  }\n\n  private _selectView(e: CustomEvent): void {\n    const view: number = e.detail.view;\n    this._params!.viewSelectedCallback(view);\n    this._dialog.close();\n  }\n\n  private _openedChanged(ev: PolymerChangedEvent<boolean>): void {\n    if (!(ev.detail as any).value) {\n      this._params = undefined;\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-dialog-select-view\": HuiDialogSelectView;\n  }\n}\n"],"mappings":";AAgBA;ACoBA;AACA;AAEA;AACA;AAEA;AAEA;AACA;;;;AAbA;;;;;;;;;;;;;;;;;;;;;AAPA;;;;ACiBA;;;;AAIA;AACA;;;;AAXA","sourceRoot":""}