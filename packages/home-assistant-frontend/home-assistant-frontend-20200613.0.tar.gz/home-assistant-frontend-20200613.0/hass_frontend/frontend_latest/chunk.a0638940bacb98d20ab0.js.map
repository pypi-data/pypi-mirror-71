{"version":3,"file":"chunk.a0638940bacb98d20ab0.js","sources":["webpack:///./src/components/ha-icon-button.ts","webpack:///./src/components/ha-dialog.ts","webpack:///./src/panels/config/lovelace/resources/dialog-lovelace-resource-detail.ts"],"sourcesContent":["import \"@material/mwc-icon-button\";\nimport {\n  customElement,\n  html,\n  TemplateResult,\n  property,\n  LitElement,\n  CSSResult,\n  css,\n} from \"lit-element\";\nimport \"./ha-icon\";\n\n@customElement(\"ha-icon-button\")\nexport class HaIconButton extends LitElement {\n  @property({ type: Boolean, reflect: true }) disabled = false;\n\n  @property({ type: String }) icon = \"\";\n\n  @property({ type: String }) label = \"\";\n\n  protected createRenderRoot() {\n    return this.attachShadow({ mode: \"open\", delegatesFocus: true });\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <mwc-icon-button .label=${this.label} .disabled=${this.disabled}>\n        <ha-icon .icon=${this.icon}></ha-icon>\n      </mwc-icon-button>\n    `;\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      :host {\n        display: inline-block;\n        outline: none;\n      }\n      :host([disabled]) {\n        pointer-events: none;\n      }\n      mwc-icon-button {\n        --mdc-theme-on-primary: currentColor;\n        --mdc-theme-text-disabled-on-light: var(--disabled-text-color);\n      }\n      ha-icon {\n        --ha-icon-display: inline;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-icon-button\": HaIconButton;\n  }\n}\n","import \"@material/mwc-dialog\";\nimport type { Dialog } from \"@material/mwc-dialog\";\nimport { style } from \"@material/mwc-dialog/mwc-dialog-css\";\nimport \"./ha-icon-button\";\nimport { css, CSSResult, customElement, html } from \"lit-element\";\nimport type { Constructor, HomeAssistant } from \"../types\";\nimport { mdiClose } from \"@mdi/js\";\n\nconst MwcDialog = customElements.get(\"mwc-dialog\") as Constructor<Dialog>;\n\nexport const createCloseHeading = (hass: HomeAssistant, title: string) => html`\n  ${title}\n  <mwc-icon-button\n    aria-label=${hass.localize(\"ui.dialogs.generic.close\")}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  >\n    <ha-svg-icon path=${mdiClose}></ha-svg-icon>\n  </mwc-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends MwcDialog {\n  protected static get styles(): CSSResult[] {\n    return [\n      style,\n      css`\n        .mdc-dialog {\n          z-index: var(--dialog-z-index, 7);\n        }\n        .mdc-dialog__actions {\n          justify-content: var(--justify-action-buttons, flex-end);\n        }\n        .mdc-dialog__container {\n          align-items: var(--vertial-align-dialog, center);\n        }\n        .mdc-dialog__title::before {\n          display: block;\n          height: 20px;\n        }\n        .mdc-dialog__content {\n          padding: var(--dialog-content-padding, 20px 24px);\n        }\n        .header_button {\n          position: absolute;\n          right: 16px;\n          top: 12px;\n          text-decoration: none;\n          color: inherit;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  TemplateResult,\n} from \"lit-element\";\nimport { createCloseHeading } from \"../../../../components/ha-dialog\";\nimport \"../../../../components/ha-paper-dropdown-menu\";\nimport {\n  LovelaceResource,\n  LovelaceResourcesMutableParams,\n} from \"../../../../data/lovelace\";\nimport { PolymerChangedEvent } from \"../../../../polymer-types\";\nimport { haStyleDialog } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { LovelaceResourceDetailsDialogParams } from \"./show-dialog-lovelace-resource-detail\";\n\n@customElement(\"dialog-lovelace-resource-detail\")\nexport class DialogLovelaceResourceDetail extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() private _params?: LovelaceResourceDetailsDialogParams;\n\n  @property() private _url!: LovelaceResource[\"url\"];\n\n  @property() private _type!: LovelaceResource[\"type\"];\n\n  @property() private _error?: string;\n\n  @property() private _submitting = false;\n\n  public async showDialog(\n    params: LovelaceResourceDetailsDialogParams\n  ): Promise<void> {\n    this._params = params;\n    this._error = undefined;\n    if (this._params.resource) {\n      this._url = this._params.resource.url || \"\";\n      this._type = this._params.resource.type || \"module\";\n    } else {\n      this._url = \"\";\n      this._type = \"module\";\n    }\n    await this.updateComplete;\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n    const urlInvalid = this._url.trim() === \"\";\n    return html`\n      <ha-dialog\n        open\n        @closing=${this._close}\n        scrimClickAction\n        escapeKeyAction\n        .heading=${createCloseHeading(\n          this.hass,\n          this._params.resource\n            ? this._params.resource.url\n            : this.hass!.localize(\n                \"ui.panel.config.lovelace.resources.detail.new_resource\"\n              )\n        )}\n      >\n        <div>\n          ${this._error ? html` <div class=\"error\">${this._error}</div> ` : \"\"}\n          <div class=\"form\">\n            <h3 class=\"warning\">\n              ${this.hass!.localize(\n                \"ui.panel.config.lovelace.resources.detail.warning_header\"\n              )}\n            </h3>\n            ${this.hass!.localize(\n              \"ui.panel.config.lovelace.resources.detail.warning_text\"\n            )}\n            <paper-input\n              .value=${this._url}\n              @value-changed=${this._urlChanged}\n              .label=${this.hass!.localize(\n                \"ui.panel.config.lovelace.resources.detail.url\"\n              )}\n              .errorMessage=${this.hass!.localize(\n                \"ui.panel.config.lovelace.resources.detail.url_error_msg\"\n              )}\n              .invalid=${urlInvalid}\n              dialogInitialFocus\n            ></paper-input>\n            <br />\n            <ha-paper-dropdown-menu\n              .label=${this.hass!.localize(\n                \"ui.panel.config.lovelace.resources.detail.type\"\n              )}\n            >\n              <paper-listbox\n                slot=\"dropdown-content\"\n                .selected=${this._type}\n                @iron-select=${this._typeChanged}\n                attr-for-selected=\"type\"\n              >\n                <paper-item type=\"module\">\n                  ${this.hass!.localize(\n                    \"ui.panel.config.lovelace.resources.types.module\"\n                  )}\n                </paper-item>\n                ${this._type === \"js\"\n                  ? html`\n                      <paper-item type=\"js\">\n                        ${this.hass!.localize(\n                          \"ui.panel.config.lovelace.resources.types.js\"\n                        )}\n                      </paper-item>\n                    `\n                  : \"\"}\n                <paper-item type=\"css\">\n                  ${this.hass!.localize(\n                    \"ui.panel.config.lovelace.resources.types.css\"\n                  )}\n                </paper-item>\n                ${this._type === \"html\"\n                  ? html`\n                      <paper-item type=\"html\">\n                        ${this.hass!.localize(\n                          \"ui.panel.config.lovelace.resources.types.html\"\n                        )}\n                      </paper-item>\n                    `\n                  : \"\"}\n              </paper-listbox>\n            </ha-paper-dropdown-menu>\n          </div>\n        </div>\n        ${this._params.resource\n          ? html`\n              <mwc-button\n                slot=\"secondaryAction\"\n                class=\"warning\"\n                @click=\"${this._deleteResource}\"\n                .disabled=${this._submitting}\n              >\n                ${this.hass!.localize(\n                  \"ui.panel.config.lovelace.resources.detail.delete\"\n                )}\n              </mwc-button>\n            `\n          : html``}\n        <mwc-button\n          slot=\"primaryAction\"\n          @click=\"${this._updateResource}\"\n          .disabled=${urlInvalid || this._submitting}\n        >\n          ${this._params.resource\n            ? this.hass!.localize(\n                \"ui.panel.config.lovelace.resources.detail.update\"\n              )\n            : this.hass!.localize(\n                \"ui.panel.config.lovelace.resources.detail.create\"\n              )}\n        </mwc-button>\n      </ha-dialog>\n    `;\n  }\n\n  private _urlChanged(ev: PolymerChangedEvent<string>) {\n    this._error = undefined;\n    this._url = ev.detail.value;\n  }\n\n  private _typeChanged(ev: CustomEvent) {\n    this._type = ev.detail.item.getAttribute(\"type\");\n  }\n\n  private async _updateResource() {\n    this._submitting = true;\n    try {\n      const values: LovelaceResourcesMutableParams = {\n        url: this._url.trim(),\n        res_type: this._type,\n      };\n      if (this._params!.resource) {\n        await this._params!.updateResource(values);\n      } else {\n        await this._params!.createResource(values);\n      }\n      this._params = undefined;\n    } catch (err) {\n      this._error = err?.message || \"Unknown error\";\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  private async _deleteResource() {\n    this._submitting = true;\n    try {\n      if (await this._params!.removeResource()) {\n        this._close();\n      }\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  private _close(): void {\n    this._params = undefined;\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      haStyleDialog,\n      css`\n        .warning {\n          color: var(--error-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-lovelace-resource-detail\": DialogLovelaceResourceDetail;\n  }\n}\n"],"mappings":"AAaA;AAaA;AACA;;AAdA;;;;;;;;;;;;;;;AAAA;ACFA;;AAEA;;;;AAIA;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;ACuCA;;;AAGA;;;AAUA;;;AAGA;;AAIA;;AAIA;AACA;AACA;AAGA;AAGA;;;;;AAKA;;;;AAMA;AACA;;;;AAIA;;AAIA;;AAGA;;AAKA;;AAEA;;AAIA;;AAGA;;AAKA;;;;;AAKA;;;;AAKA;AACA;;AAEA;;AAKA;;;AAGA;AACA;;AAEA;;;AAtIA;;;;AAAA","sourceRoot":""}