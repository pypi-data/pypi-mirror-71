{"version":3,"file":"chunk.ed051c2c350402176d56.js","sources":["webpack:///./src/data/custom_iconsets.ts","webpack:///./src/components/ha-icon.ts","webpack:///./src/components/ha-icon-button.ts","webpack:///./src/panels/developer-tools/ha-panel-developer-tools.ts"],"sourcesContent":["export interface CustomIcon {\n  path: string;\n  viewBox?: string;\n}\n\nexport interface CustomIconsetsWindow {\n  customIconsets?: { [key: string]: (name: string) => Promise<CustomIcon> };\n}\n\nconst customIconsetsWindow = window as CustomIconsetsWindow;\n\nif (!(\"customIconsets\" in customIconsetsWindow)) {\n  customIconsetsWindow.customIconsets = {};\n}\n\nexport const customIconsets = customIconsetsWindow.customIconsets!;\n","import \"@polymer/iron-icon/iron-icon\";\nimport {\n  customElement,\n  LitElement,\n  property,\n  PropertyValues,\n  html,\n  TemplateResult,\n  css,\n  CSSResult,\n} from \"lit-element\";\nimport \"./ha-svg-icon\";\nimport { customIconsets, CustomIcon } from \"../data/custom_iconsets\";\nimport {\n  Chunks,\n  MDI_PREFIXES,\n  getIcon,\n  findIconChunk,\n  Icons,\n  checkCacheVersion,\n  writeCache,\n} from \"../data/iconsets\";\nimport { debounce } from \"../common/util/debounce\";\n\nconst chunks: Chunks = {};\n\ncheckCacheVersion();\n\nconst debouncedWriteCache = debounce(() => writeCache(chunks), 2000);\n\nconst cachedIcons: { [key: string]: string } = {};\n\n@customElement(\"ha-icon\")\nexport class HaIcon extends LitElement {\n  @property() public icon?: string;\n\n  @property() private _path?: string;\n\n  @property() private _viewBox?;\n\n  @property() private _legacy = false;\n\n  protected updated(changedProps: PropertyValues) {\n    if (changedProps.has(\"icon\")) {\n      this._path = undefined;\n      this._viewBox = undefined;\n      this._loadIcon();\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this.icon) {\n      return html``;\n    }\n    if (this._legacy) {\n      return html`<iron-icon .icon=${this.icon}></iron-icon>`;\n    }\n    return html`<ha-svg-icon\n      .path=${this._path}\n      .viewBox=${this._viewBox}\n    ></ha-svg-icon>`;\n  }\n\n  private async _loadIcon() {\n    if (!this.icon) {\n      return;\n    }\n    const [iconPrefix, iconName] = this.icon.split(\":\", 2);\n\n    if (!iconPrefix || !iconName) {\n      return;\n    }\n\n    if (!MDI_PREFIXES.includes(iconPrefix)) {\n      if (iconPrefix in customIconsets) {\n        const customIconset = customIconsets[iconPrefix];\n        if (customIconset) {\n          this._setCustomPath(customIconset(iconName));\n        }\n        return;\n      }\n      this._legacy = true;\n      return;\n    }\n\n    this._legacy = false;\n\n    if (iconName in cachedIcons) {\n      this._path = cachedIcons[iconName];\n      return;\n    }\n\n    let databaseIcon: string | undefined;\n    try {\n      databaseIcon = await getIcon(iconName);\n    } catch (_err) {\n      // Firefox in private mode doesn't support IDB\n      databaseIcon = undefined;\n    }\n\n    if (databaseIcon) {\n      this._path = databaseIcon;\n      cachedIcons[iconName] = databaseIcon;\n      return;\n    }\n    const chunk = findIconChunk(iconName);\n\n    if (chunk in chunks) {\n      this._setPath(chunks[chunk], iconName);\n      return;\n    }\n    const iconPromise = fetch(`/static/mdi/${chunk}.json`).then((response) =>\n      response.json()\n    );\n    chunks[chunk] = iconPromise;\n    this._setPath(iconPromise, iconName);\n    debouncedWriteCache();\n  }\n\n  private async _setCustomPath(promise: Promise<CustomIcon>) {\n    const icon = await promise;\n    this._path = icon.path;\n    this._viewBox = icon.viewBox;\n  }\n\n  private async _setPath(promise: Promise<Icons>, iconName: string) {\n    const iconPack = await promise;\n    this._path = iconPack[iconName];\n    cachedIcons[iconName] = iconPack[iconName];\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      :host {\n        fill: currentcolor;\n      }\n    `;\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-icon\": HaIcon;\n  }\n}\n","import \"@material/mwc-icon-button\";\nimport {\n  customElement,\n  html,\n  TemplateResult,\n  property,\n  LitElement,\n  CSSResult,\n  css,\n} from \"lit-element\";\nimport \"./ha-icon\";\n\n@customElement(\"ha-icon-button\")\nexport class HaIconButton extends LitElement {\n  @property({ type: Boolean, reflect: true }) disabled = false;\n\n  @property({ type: String }) icon = \"\";\n\n  @property({ type: String }) label = \"\";\n\n  protected createRenderRoot() {\n    return this.attachShadow({ mode: \"open\", delegatesFocus: true });\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <mwc-icon-button .label=${this.label} .disabled=${this.disabled}>\n        <ha-icon .icon=${this.icon}></ha-icon>\n      </mwc-icon-button>\n    `;\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      :host {\n        display: inline-block;\n        outline: none;\n      }\n      :host([disabled]) {\n        pointer-events: none;\n      }\n      mwc-icon-button {\n        --mdc-theme-on-primary: currentColor;\n        --mdc-theme-text-disabled-on-light: var(--disabled-text-color);\n      }\n      ha-icon {\n        --ha-icon-display: inline;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-icon-button\": HaIconButton;\n  }\n}\n","import \"@polymer/app-layout/app-header-layout/app-header-layout\";\nimport \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport \"../../components/ha-icon-button\";\nimport \"@polymer/paper-tabs/paper-tab\";\nimport \"@polymer/paper-tabs/paper-tabs\";\nimport {\n  css,\n  CSSResultArray,\n  customElement,\n  html,\n  LitElement,\n  property,\n  TemplateResult,\n} from \"lit-element\";\nimport { isComponentLoaded } from \"../../common/config/is_component_loaded\";\nimport scrollToTarget from \"../../common/dom/scroll-to-target\";\nimport { navigate } from \"../../common/navigate\";\nimport \"../../components/ha-menu-button\";\nimport { haStyle } from \"../../resources/styles\";\nimport { HomeAssistant, Route } from \"../../types\";\nimport \"./developer-tools-router\";\n\n@customElement(\"ha-panel-developer-tools\")\nclass PanelDeveloperTools extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public route!: Route;\n\n  @property() public narrow!: boolean;\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    this.hass.loadBackendTranslation(\"title\");\n  }\n\n  protected render(): TemplateResult {\n    const page = this._page;\n    return html`\n      <app-header-layout has-scrolling-region>\n        <app-header fixed slot=\"header\">\n          <app-toolbar>\n            <ha-menu-button\n              .hass=${this.hass}\n              .narrow=${this.narrow}\n            ></ha-menu-button>\n            <div main-title>${this.hass.localize(\"panel.developer_tools\")}</div>\n          </app-toolbar>\n          <paper-tabs\n            scrollable\n            attr-for-selected=\"page-name\"\n            .selected=${page}\n            @iron-activate=${this.handlePageSelected}\n          >\n            <paper-tab page-name=\"state\">\n              ${this.hass.localize(\n                \"ui.panel.developer-tools.tabs.states.title\"\n              )}\n            </paper-tab>\n            <paper-tab page-name=\"service\">\n              ${this.hass.localize(\n                \"ui.panel.developer-tools.tabs.services.title\"\n              )}\n            </paper-tab>\n            <paper-tab page-name=\"template\">\n              ${this.hass.localize(\n                \"ui.panel.developer-tools.tabs.templates.title\"\n              )}\n            </paper-tab>\n            <paper-tab page-name=\"event\">\n              ${this.hass.localize(\n                \"ui.panel.developer-tools.tabs.events.title\"\n              )}\n            </paper-tab>\n            ${isComponentLoaded(this.hass, \"mqtt\")\n              ? html`\n                  <paper-tab page-name=\"mqtt\">\n                    ${this.hass.localize(\n                      \"ui.panel.developer-tools.tabs.mqtt.title\"\n                    )}\n                  </paper-tab>\n                `\n              : \"\"}\n          </paper-tabs>\n        </app-header>\n        <developer-tools-router\n          .route=${this.route}\n          .narrow=${this.narrow}\n          .hass=${this.hass}\n        ></developer-tools-router>\n      </app-header-layout>\n    `;\n  }\n\n  private handlePageSelected(ev) {\n    const newPage = ev.detail.item.getAttribute(\"page-name\");\n    if (newPage !== this._page) {\n      navigate(this, `/developer-tools/${newPage}`);\n    }\n\n    scrollToTarget(\n      this,\n      // @ts-ignore\n      this.shadowRoot!.querySelector(\"app-header-layout\").header.scrollTarget\n    );\n  }\n\n  private get _page() {\n    return this.route.path.substr(1);\n  }\n\n  static get styles(): CSSResultArray {\n    return [\n      haStyle,\n      css`\n        :host {\n          color: var(--primary-text-color);\n          --paper-card-header-color: var(--primary-text-color);\n        }\n        paper-tabs {\n          margin-left: 12px;\n          --paper-tabs-selection-bar-color: #fff;\n          text-transform: uppercase;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-panel-developer-tools\": PanelDeveloperTools;\n  }\n}\n"],"mappings":"AASA;ACiDA;AACA;AAPA;;;;AAnBA;ACPA;AACA;;AAdA;;;;;;;;;;;;;;;AAAA;;;;;AC8BA;AACA;;AAEA;;;;;AAKA;AACA;;;AAGA;;;AAKA;;;AAKA;;;AAKA;;AAIA;;AAGA;;AAKA;;;;AAIA;AACA;AACA;;;AAMA;;;;;;;;;;AAtEA","sourceRoot":""}