{"version":3,"file":"chunk.32613285ecb92e9c5bd2.js","sources":["webpack:///./src/components/ha-card.ts","webpack:///./src/panels/config/ha-config-section.ts","webpack:///./src/components/buttons/ha-progress-button.js","webpack:///./src/components/buttons/ha-call-service-button.js","webpack:///./src/panels/config/server_control/ha-config-server-control.ts"],"sourcesContent":["import {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  TemplateResult,\n} from \"lit-element\";\n\n@customElement(\"ha-card\")\nclass HaCard extends LitElement {\n  @property() public header?: string;\n\n  @property({ type: Boolean, reflect: true }) public outlined = false;\n\n  static get styles(): CSSResult {\n    return css`\n      :host {\n        background: var(\n          --ha-card-background,\n          var(--paper-card-background-color, white)\n        );\n        border-radius: var(--ha-card-border-radius, 4px);\n        box-shadow: var(\n          --ha-card-box-shadow,\n          0px 2px 1px -1px rgba(0, 0, 0, 0.2),\n          0px 1px 1px 0px rgba(0, 0, 0, 0.14),\n          0px 1px 3px 0px rgba(0, 0, 0, 0.12)\n        );\n        color: var(--primary-text-color);\n        display: block;\n        transition: all 0.3s ease-out;\n        position: relative;\n      }\n\n      :host([outlined]) {\n        box-shadow: 0 0 0 0;\n        border-width: 1px;\n        border-style: solid;\n        border-color: var(\n          --ha-card-border-color,\n          var(--divider-color, #e0e0e0)\n        );\n      }\n\n      .card-header,\n      :host ::slotted(.card-header) {\n        color: var(--ha-card-header-color, --primary-text-color);\n        font-family: var(--ha-card-header-font-family, inherit);\n        font-size: var(--ha-card-header-font-size, 24px);\n        letter-spacing: -0.012em;\n        line-height: 32px;\n        padding: 24px 16px 16px;\n        display: block;\n      }\n\n      :host ::slotted(.card-content:not(:first-child)),\n      slot:not(:first-child)::slotted(.card-content) {\n        padding-top: 0px;\n        margin-top: -8px;\n      }\n\n      :host ::slotted(.card-content) {\n        padding: 16px;\n      }\n\n      :host ::slotted(.card-actions) {\n        border-top: 1px solid #e8e8e8;\n        padding: 5px 16px;\n      }\n    `;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.header\n        ? html` <div class=\"card-header\">${this.header}</div> `\n        : html``}\n      <slot></slot>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-card\": HaCard;\n  }\n}\n","import { css, customElement, html, LitElement, property } from \"lit-element\";\nimport { classMap } from \"lit-html/directives/class-map\";\n\n@customElement(\"ha-config-section\")\nexport class HaConfigSection extends LitElement {\n  @property() public isWide = false;\n\n  protected render() {\n    return html`\n      <div\n        class=\"content ${classMap({\n          narrow: !this.isWide,\n        })}\"\n      >\n        <div class=\"header\"><slot name=\"header\"></slot></div>\n        <div\n          class=\"together layout ${classMap({\n            narrow: !this.isWide,\n            vertical: !this.isWide,\n            horizontal: this.isWide,\n          })}\"\n        >\n          <div class=\"intro\"><slot name=\"introduction\"></slot></div>\n          <div class=\"panel flex-auto\"><slot></slot></div>\n        </div>\n      </div>\n    `;\n  }\n\n  static get styles() {\n    return css`\n      :host {\n        display: block;\n      }\n      .content {\n        padding: 28px 20px 0;\n        max-width: 1040px;\n        margin: 0 auto;\n      }\n\n      .layout {\n        display: flex;\n      }\n\n      .horizontal {\n        flex-direction: row;\n      }\n\n      .vertical {\n        flex-direction: column;\n      }\n\n      .flex-auto {\n        flex: 1 1 auto;\n      }\n\n      .header {\n        font-family: var(--paper-font-headline_-_font-family);\n        -webkit-font-smoothing: var(\n          --paper-font-headline_-_-webkit-font-smoothing\n        );\n        font-size: var(--paper-font-headline_-_font-size);\n        font-weight: var(--paper-font-headline_-_font-weight);\n        letter-spacing: var(--paper-font-headline_-_letter-spacing);\n        line-height: var(--paper-font-headline_-_line-height);\n        opacity: var(--dark-primary-opacity);\n      }\n\n      .together {\n        margin-top: 32px;\n      }\n\n      .intro {\n        font-family: var(--paper-font-subhead_-_font-family);\n        -webkit-font-smoothing: var(\n          --paper-font-subhead_-_-webkit-font-smoothing\n        );\n        font-weight: var(--paper-font-subhead_-_font-weight);\n        line-height: var(--paper-font-subhead_-_line-height);\n        width: 100%;\n        max-width: 400px;\n        margin-right: 40px;\n        opacity: var(--dark-primary-opacity);\n        font-size: 14px;\n        padding-bottom: 20px;\n      }\n\n      .panel {\n        margin-top: -24px;\n      }\n\n      .panel ::slotted(*) {\n        margin-top: 24px;\n        display: block;\n      }\n\n      .narrow.content {\n        max-width: 640px;\n      }\n      .narrow .together {\n        margin-top: 20px;\n      }\n      .narrow .intro {\n        padding-bottom: 20px;\n        margin-right: 0;\n        max-width: 500px;\n      }\n    `;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@polymer/paper-spinner/paper-spinner\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\n/* eslint-plugin-disable lit */\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\n\nclass HaProgressButton extends PolymerElement {\n  static get template() {\n    return html`\n      <style>\n        .container {\n          position: relative;\n          display: inline-block;\n        }\n\n        mwc-button {\n          transition: all 1s;\n        }\n\n        .success mwc-button {\n          --mdc-theme-primary: white;\n          background-color: var(--google-green-500);\n          transition: none;\n        }\n\n        .error mwc-button {\n          --mdc-theme-primary: white;\n          background-color: var(--google-red-500);\n          transition: none;\n        }\n\n        .progress {\n          @apply --layout;\n          @apply --layout-center-center;\n          position: absolute;\n          top: 0;\n          left: 0;\n          right: 0;\n          bottom: 0;\n        }\n      </style>\n      <div class=\"container\" id=\"container\">\n        <mwc-button\n          id=\"button\"\n          disabled=\"[[computeDisabled(disabled, progress)]]\"\n          on-click=\"buttonTapped\"\n        >\n          <slot></slot>\n        </mwc-button>\n        <template is=\"dom-if\" if=\"[[progress]]\">\n          <div class=\"progress\"><paper-spinner active=\"\"></paper-spinner></div>\n        </template>\n      </div>\n    `;\n  }\n\n  static get properties() {\n    return {\n      hass: {\n        type: Object,\n      },\n\n      progress: {\n        type: Boolean,\n        value: false,\n      },\n\n      disabled: {\n        type: Boolean,\n        value: false,\n      },\n    };\n  }\n\n  tempClass(className) {\n    var classList = this.$.container.classList;\n    classList.add(className);\n    setTimeout(() => {\n      classList.remove(className);\n    }, 1000);\n  }\n\n  ready() {\n    super.ready();\n    this.addEventListener(\"click\", (ev) => this.buttonTapped(ev));\n  }\n\n  buttonTapped(ev) {\n    if (this.progress) ev.stopPropagation();\n  }\n\n  actionSuccess() {\n    this.tempClass(\"success\");\n  }\n\n  actionError() {\n    this.tempClass(\"error\");\n  }\n\n  computeDisabled(disabled, progress) {\n    return disabled || progress;\n  }\n}\n\ncustomElements.define(\"ha-progress-button\", HaProgressButton);\n","import { html } from \"@polymer/polymer/lib/utils/html-tag\";\n/* eslint-plugin-disable lit */\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\nimport { showConfirmationDialog } from \"../../dialogs/generic/show-dialog-box\";\nimport { EventsMixin } from \"../../mixins/events-mixin\";\nimport \"./ha-progress-button\";\n\n/*\n * @appliesMixin EventsMixin\n */\nclass HaCallServiceButton extends EventsMixin(PolymerElement) {\n  static get template() {\n    return html`\n      <ha-progress-button\n        id=\"progress\"\n        progress=\"[[progress]]\"\n        on-click=\"buttonTapped\"\n        tabindex=\"0\"\n        ><slot></slot\n      ></ha-progress-button>\n    `;\n  }\n\n  static get properties() {\n    return {\n      hass: {\n        type: Object,\n      },\n\n      progress: {\n        type: Boolean,\n        value: false,\n      },\n\n      domain: {\n        type: String,\n      },\n\n      service: {\n        type: String,\n      },\n\n      serviceData: {\n        type: Object,\n        value: {},\n      },\n\n      confirmation: {\n        type: String,\n      },\n    };\n  }\n\n  callService() {\n    this.progress = true;\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    var el = this;\n    var eventData = {\n      domain: this.domain,\n      service: this.service,\n      serviceData: this.serviceData,\n    };\n\n    this.hass\n      .callService(this.domain, this.service, this.serviceData)\n      .then(\n        function () {\n          el.progress = false;\n          el.$.progress.actionSuccess();\n          eventData.success = true;\n        },\n        function () {\n          el.progress = false;\n          el.$.progress.actionError();\n          eventData.success = false;\n        }\n      )\n      .then(function () {\n        el.fire(\"hass-service-called\", eventData);\n      });\n  }\n\n  buttonTapped() {\n    if (this.confirmation) {\n      showConfirmationDialog(this, {\n        text: this.confirmation,\n        confirm: () => this.callService(),\n      });\n    } else {\n      this.callService();\n    }\n  }\n}\n\ncustomElements.define(\"ha-call-service-button\", HaCallServiceButton);\n","import \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport \"../../../layouts/hass-tabs-subpage\";\nimport { configSections } from \"../ha-panel-config\";\nimport {\n  LitElement,\n  property,\n  customElement,\n  html,\n  css,\n  CSSResult,\n  TemplateResult,\n} from \"lit-element\";\nimport { HomeAssistant, Route } from \"../../../types\";\n\nimport \"@material/mwc-button\";\nimport \"@polymer/paper-input/paper-input\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport \"../../../components/buttons/ha-call-service-button\";\nimport \"../../../components/ha-card\";\nimport \"../ha-config-section\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { checkCoreConfig } from \"../../../data/core\";\n\nconst reloadableDomains = [\n  \"group\",\n  \"automation\",\n  \"scripts\",\n  \"scene\",\n  \"person\",\n  \"zone\",\n  \"input_boolean\",\n  \"input_text\",\n  \"input_number\",\n  \"input_datetime\",\n  \"input_select\",\n];\n\n@customElement(\"ha-config-server-control\")\nexport class HaConfigServerControl extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public isWide!: boolean;\n\n  @property() public narrow!: boolean;\n\n  @property() public route!: Route;\n\n  @property() public showAdvanced!: boolean;\n\n  @property() private _validating = false;\n\n  private _validateLog = \"\";\n\n  private _isValid: boolean | null = null;\n\n  protected render(): TemplateResult {\n    return html`\n      <hass-tabs-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .route=${this.route}\n        back-path=\"/config\"\n        .tabs=${configSections.general}\n        .showAdvanced=${this.showAdvanced}\n      >\n        <ha-config-section .isWide=${this.isWide}>\n          <span slot=\"header\"\n            >${this.hass.localize(\n              \"ui.panel.config.server_control.caption\"\n            )}</span\n          >\n          <span slot=\"introduction\"\n            >${this.hass.localize(\n              \"ui.panel.config.server_control.description\"\n            )}</span\n          >\n\n          ${this.showAdvanced\n            ? html` <ha-card\n                header=${this.hass.localize(\n                  \"ui.panel.config.server_control.section.validation.heading\"\n                )}\n              >\n                <div class=\"card-content\">\n                  ${this.hass.localize(\n                    \"ui.panel.config.server_control.section.validation.introduction\"\n                  )}\n                  ${!this._validateLog\n                    ? html`\n                        <div\n                          class=\"validate-container layout vertical center-center\"\n                        >\n                          ${!this._validating\n                            ? html`\n                                ${this._isValid\n                                  ? html` <div\n                                      class=\"validate-result\"\n                                      id=\"result\"\n                                    >\n                                      ${this.hass.localize(\n                                        \"ui.panel.config.server_control.section.validation.valid\"\n                                      )}\n                                    </div>`\n                                  : \"\"}\n                                <mwc-button\n                                  raised\n                                  @click=${this._validateConfig}\n                                >\n                                  ${this.hass.localize(\n                                    \"ui.panel.config.server_control.section.validation.check_config\"\n                                  )}\n                                </mwc-button>\n                              `\n                            : html` <paper-spinner active></paper-spinner> `}\n                        </div>\n                      `\n                    : html`\n                        <div class=\"config-invalid\">\n                          <span class=\"text\">\n                            ${this.hass.localize(\n                              \"ui.panel.config.server_control.section.validation.invalid\"\n                            )}\n                          </span>\n                          <mwc-button raised @click=${this._validateConfig}>\n                            ${this.hass.localize(\n                              \"ui.panel.config.server_control.section.validation.check_config\"\n                            )}\n                          </mwc-button>\n                        </div>\n                        <div id=\"configLog\" class=\"validate-log\">\n                          ${this._validateLog}\n                        </div>\n                      `}\n                </div>\n              </ha-card>`\n            : \"\"}\n\n          <ha-card\n            header=${this.hass.localize(\n              \"ui.panel.config.server_control.section.server_management.heading\"\n            )}\n          >\n            <div class=\"card-content\">\n              ${this.hass.localize(\n                \"ui.panel.config.server_control.section.server_management.introduction\"\n              )}\n            </div>\n            <div class=\"card-actions warning\">\n              <ha-call-service-button\n                class=\"warning\"\n                .hass=${this.hass}\n                domain=\"homeassistant\"\n                service=\"restart\"\n                .confirmation=${this.hass.localize(\n                  \"ui.panel.config.server_control.section.server_management.confirm_restart\"\n                )}\n                >${this.hass.localize(\n                  \"ui.panel.config.server_control.section.server_management.restart\"\n                )}\n              </ha-call-service-button>\n              <ha-call-service-button\n                class=\"warning\"\n                .hass=${this.hass}\n                domain=\"homeassistant\"\n                service=\"stop\"\n                confirmation=${this.hass.localize(\n                  \"ui.panel.config.server_control.section.server_management.confirm_stop\"\n                )}\n                >${this.hass.localize(\n                  \"ui.panel.config.server_control.section.server_management.stop\"\n                )}\n              </ha-call-service-button>\n            </div>\n          </ha-card>\n\n          ${this.showAdvanced\n            ? html`\n                <ha-card\n                  header=${this.hass.localize(\n                    \"ui.panel.config.server_control.section.reloading.heading\"\n                  )}\n                >\n                  <div class=\"card-content\">\n                    ${this.hass.localize(\n                      \"ui.panel.config.server_control.section.reloading.introduction\"\n                    )}\n                  </div>\n                  <div class=\"card-actions\">\n                    <ha-call-service-button\n                      .hass=${this.hass}\n                      domain=\"homeassistant\"\n                      service=\"reload_core_config\"\n                      >${this.hass.localize(\n                        \"ui.panel.config.server_control.section.reloading.core\"\n                      )}\n                    </ha-call-service-button>\n                  </div>\n                  ${reloadableDomains.map((domain) =>\n                    isComponentLoaded(this.hass, domain)\n                      ? html`<div class=\"card-actions\">\n                          <ha-call-service-button\n                            .hass=${this.hass}\n                            .domain=${domain}\n                            service=\"reload\"\n                            >${this.hass.localize(\n                              `ui.panel.config.server_control.section.reloading.${domain}`\n                            )}\n                          </ha-call-service-button>\n                        </div>`\n                      : \"\"\n                  )}\n                </ha-card>\n              `\n            : \"\"}\n        </ha-config-section>\n      </hass-tabs-subpage>\n    `;\n  }\n\n  private async _validateConfig() {\n    this._validating = true;\n    this._validateLog = \"\";\n    this._isValid = null;\n\n    const configCheck = await checkCoreConfig(this.hass);\n    this._validating = false;\n    this._isValid = configCheck.result === \"valid\";\n\n    if (configCheck.errors) {\n      this._validateLog = configCheck.errors;\n    }\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      haStyle,\n      css`\n        .validate-container {\n          height: 140px;\n        }\n\n        .validate-result {\n          color: var(--google-green-500);\n          font-weight: 500;\n          margin-bottom: 1em;\n        }\n\n        .config-invalid {\n          margin: 1em 0;\n        }\n\n        .config-invalid .text {\n          color: var(--google-red-500);\n          font-weight: 500;\n        }\n\n        .config-invalid mwc-button {\n          float: right;\n        }\n\n        .validate-log {\n          white-space: pre-wrap;\n          direction: ltr;\n        }\n      `,\n    ];\n  }\n}\n"],"mappings":"AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgEA;AAEA;;AAjEA;;ACDA;;;;AAMA;;;;;;AAZA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACoDA;;;;;;;;ACjCA;;ACoCA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;;AAKA;;;AAKA;AAEA;;;AAKA;AAGA;;;AAgCA;;AAIA;AACA;;;;AAMA;;AA1CA;;;;AAIA;AAEA;;;;AAKA;AAIA;;;AAGA;;AAEA;;;;;;AA2BA;AACA;;AAEA;;;AAKA;;;;;AAOA;;;AAGA;AAGA;;;;AAMA;;;AAGA;AAGA;;;;;AAOA;;AAGA;;;AAKA;;;;AAMA;;;AAGA;;;AAKA;;AAIA;AACA;;AAEA;;AAKA;;AAIA;;;AA/KA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA","sourceRoot":""}