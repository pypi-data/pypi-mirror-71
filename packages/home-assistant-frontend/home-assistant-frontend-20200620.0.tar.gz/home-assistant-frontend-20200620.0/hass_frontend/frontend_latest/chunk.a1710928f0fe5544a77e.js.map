{"version":3,"file":"chunk.a1710928f0fe5544a77e.js","sources":["webpack:///./src/data/custom_iconsets.ts","webpack:///./src/components/ha-icon.ts","webpack:///./src/panels/config/ha-config-section.ts","webpack:///./src/common/search/search-input.ts","webpack:///./src/components/data-table/ha-data-table.ts","webpack:///./src/panels/config/integrations/integration-panels/zha/zha-device-endpoint-data-table.ts","webpack:///./src/panels/config/integrations/integration-panels/zha/zha-add-group-page.ts"],"sourcesContent":["export interface CustomIcon {\n  path: string;\n  viewBox?: string;\n}\n\nexport interface CustomIconsetsWindow {\n  customIconsets?: { [key: string]: (name: string) => Promise<CustomIcon> };\n}\n\nconst customIconsetsWindow = window as CustomIconsetsWindow;\n\nif (!(\"customIconsets\" in customIconsetsWindow)) {\n  customIconsetsWindow.customIconsets = {};\n}\n\nexport const customIconsets = customIconsetsWindow.customIconsets!;\n","import \"@polymer/iron-icon/iron-icon\";\nimport {\n  customElement,\n  LitElement,\n  property,\n  PropertyValues,\n  html,\n  TemplateResult,\n  css,\n  CSSResult,\n} from \"lit-element\";\nimport \"./ha-svg-icon\";\nimport { customIconsets, CustomIcon } from \"../data/custom_iconsets\";\nimport {\n  Chunks,\n  MDI_PREFIXES,\n  getIcon,\n  findIconChunk,\n  Icons,\n  checkCacheVersion,\n  writeCache,\n} from \"../data/iconsets\";\nimport { debounce } from \"../common/util/debounce\";\n\nconst chunks: Chunks = {};\n\ncheckCacheVersion();\n\nconst debouncedWriteCache = debounce(() => writeCache(chunks), 2000);\n\nconst cachedIcons: { [key: string]: string } = {};\n\n@customElement(\"ha-icon\")\nexport class HaIcon extends LitElement {\n  @property() public icon?: string;\n\n  @property() private _path?: string;\n\n  @property() private _viewBox?;\n\n  @property() private _legacy = false;\n\n  protected updated(changedProps: PropertyValues) {\n    if (changedProps.has(\"icon\")) {\n      this._path = undefined;\n      this._viewBox = undefined;\n      this._loadIcon();\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this.icon) {\n      return html``;\n    }\n    if (this._legacy) {\n      return html`<iron-icon .icon=${this.icon}></iron-icon>`;\n    }\n    return html`<ha-svg-icon\n      .path=${this._path}\n      .viewBox=${this._viewBox}\n    ></ha-svg-icon>`;\n  }\n\n  private async _loadIcon() {\n    if (!this.icon) {\n      return;\n    }\n    const [iconPrefix, iconName] = this.icon.split(\":\", 2);\n\n    if (!iconPrefix || !iconName) {\n      return;\n    }\n\n    if (!MDI_PREFIXES.includes(iconPrefix)) {\n      if (iconPrefix in customIconsets) {\n        const customIconset = customIconsets[iconPrefix];\n        if (customIconset) {\n          this._setCustomPath(customIconset(iconName));\n        }\n        return;\n      }\n      this._legacy = true;\n      return;\n    }\n\n    this._legacy = false;\n\n    if (iconName in cachedIcons) {\n      this._path = cachedIcons[iconName];\n      return;\n    }\n\n    let databaseIcon: string | undefined;\n    try {\n      databaseIcon = await getIcon(iconName);\n    } catch (_err) {\n      // Firefox in private mode doesn't support IDB\n      databaseIcon = undefined;\n    }\n\n    if (databaseIcon) {\n      this._path = databaseIcon;\n      cachedIcons[iconName] = databaseIcon;\n      return;\n    }\n    const chunk = findIconChunk(iconName);\n\n    if (chunk in chunks) {\n      this._setPath(chunks[chunk], iconName);\n      return;\n    }\n    const iconPromise = fetch(`/static/mdi/${chunk}.json`).then((response) =>\n      response.json()\n    );\n    chunks[chunk] = iconPromise;\n    this._setPath(iconPromise, iconName);\n    debouncedWriteCache();\n  }\n\n  private async _setCustomPath(promise: Promise<CustomIcon>) {\n    const icon = await promise;\n    this._path = icon.path;\n    this._viewBox = icon.viewBox;\n  }\n\n  private async _setPath(promise: Promise<Icons>, iconName: string) {\n    const iconPack = await promise;\n    this._path = iconPack[iconName];\n    cachedIcons[iconName] = iconPack[iconName];\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      :host {\n        fill: currentcolor;\n      }\n    `;\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-icon\": HaIcon;\n  }\n}\n","import { css, customElement, html, LitElement, property } from \"lit-element\";\nimport { classMap } from \"lit-html/directives/class-map\";\n\n@customElement(\"ha-config-section\")\nexport class HaConfigSection extends LitElement {\n  @property() public isWide = false;\n\n  protected render() {\n    return html`\n      <div\n        class=\"content ${classMap({\n          narrow: !this.isWide,\n        })}\"\n      >\n        <div class=\"header\"><slot name=\"header\"></slot></div>\n        <div\n          class=\"together layout ${classMap({\n            narrow: !this.isWide,\n            vertical: !this.isWide,\n            horizontal: this.isWide,\n          })}\"\n        >\n          <div class=\"intro\"><slot name=\"introduction\"></slot></div>\n          <div class=\"panel flex-auto\"><slot></slot></div>\n        </div>\n      </div>\n    `;\n  }\n\n  static get styles() {\n    return css`\n      :host {\n        display: block;\n      }\n      .content {\n        padding: 28px 20px 0;\n        max-width: 1040px;\n        margin: 0 auto;\n      }\n\n      .layout {\n        display: flex;\n      }\n\n      .horizontal {\n        flex-direction: row;\n      }\n\n      .vertical {\n        flex-direction: column;\n      }\n\n      .flex-auto {\n        flex: 1 1 auto;\n      }\n\n      .header {\n        font-family: var(--paper-font-headline_-_font-family);\n        -webkit-font-smoothing: var(\n          --paper-font-headline_-_-webkit-font-smoothing\n        );\n        font-size: var(--paper-font-headline_-_font-size);\n        font-weight: var(--paper-font-headline_-_font-weight);\n        letter-spacing: var(--paper-font-headline_-_letter-spacing);\n        line-height: var(--paper-font-headline_-_line-height);\n        opacity: var(--dark-primary-opacity);\n      }\n\n      .together {\n        margin-top: 32px;\n      }\n\n      .intro {\n        font-family: var(--paper-font-subhead_-_font-family);\n        -webkit-font-smoothing: var(\n          --paper-font-subhead_-_-webkit-font-smoothing\n        );\n        font-weight: var(--paper-font-subhead_-_font-weight);\n        line-height: var(--paper-font-subhead_-_line-height);\n        width: 100%;\n        max-width: 400px;\n        margin-right: 40px;\n        opacity: var(--dark-primary-opacity);\n        font-size: 14px;\n        padding-bottom: 20px;\n      }\n\n      .panel {\n        margin-top: -24px;\n      }\n\n      .panel ::slotted(*) {\n        margin-top: 24px;\n        display: block;\n      }\n\n      .narrow.content {\n        max-width: 640px;\n      }\n      .narrow .together {\n        margin-top: 20px;\n      }\n      .narrow .intro {\n        padding-bottom: 20px;\n        margin-right: 0;\n        max-width: 500px;\n      }\n    `;\n  }\n}\n","import \"@polymer/paper-input/paper-input\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  LitElement,\n  property,\n} from \"lit-element\";\nimport { html, TemplateResult } from \"lit-html\";\nimport { classMap } from \"lit-html/directives/class-map\";\nimport \"../../components/ha-svg-icon\";\nimport { fireEvent } from \"../dom/fire_event\";\nimport { mdiMagnify, mdiClose } from \"@mdi/js\";\nimport \"@material/mwc-icon-button/mwc-icon-button\";\n\n@customElement(\"search-input\")\nclass SearchInput extends LitElement {\n  @property() public filter?: string;\n\n  @property({ type: Boolean, attribute: \"no-label-float\" })\n  public noLabelFloat? = false;\n\n  @property({ type: Boolean, attribute: \"no-underline\" })\n  public noUnderline = false;\n\n  @property({ type: Boolean })\n  public autofocus = false;\n\n  public focus() {\n    this.shadowRoot!.querySelector(\"paper-input\")!.focus();\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <style>\n        .no-underline:not(.focused) {\n          --paper-input-container-underline: {\n            display: none;\n            height: 0;\n          }\n        }\n      </style>\n      <paper-input\n        class=${classMap({ \"no-underline\": this.noUnderline })}\n        .autofocus=${this.autofocus}\n        label=\"Search\"\n        .value=${this.filter}\n        @value-changed=${this._filterInputChanged}\n        .noLabelFloat=${this.noLabelFloat}\n      >\n        <ha-svg-icon\n          path=${mdiMagnify}\n          slot=\"prefix\"\n          class=\"prefix\"\n        ></ha-svg-icon>\n        ${this.filter &&\n        html`\n          <mwc-icon-button\n            slot=\"suffix\"\n            class=\"suffix\"\n            @click=${this._clearSearch}\n            alt=\"Clear\"\n            title=\"Clear\"\n          >\n            <ha-svg-icon path=${mdiClose}></ha-svg-icon>\n          </mwc-icon-button>\n        `}\n      </paper-input>\n    `;\n  }\n\n  private async _filterChanged(value: string) {\n    fireEvent(this, \"value-changed\", { value: String(value) });\n  }\n\n  private async _filterInputChanged(e) {\n    this._filterChanged(e.target.value);\n  }\n\n  private async _clearSearch() {\n    this._filterChanged(\"\");\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      ha-svg-icon,\n      mwc-icon-button {\n        color: var(--primary-text-color);\n      }\n      mwc-icon-button {\n        --mdc-icon-button-size: 24px;\n      }\n      ha-svg-icon.prefix {\n        margin: 8px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"search-input\": SearchInput;\n  }\n}\n","import deepClone from \"deep-clone-simple\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  PropertyValues,\n  query,\n  TemplateResult,\n} from \"lit-element\";\nimport { classMap } from \"lit-html/directives/class-map\";\nimport { ifDefined } from \"lit-html/directives/if-defined\";\nimport { styleMap } from \"lit-html/directives/style-map\";\nimport { scroll } from \"lit-virtualizer\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport \"../../common/search/search-input\";\nimport { debounce } from \"../../common/util/debounce\";\nimport { nextRender } from \"../../common/util/render-status\";\nimport \"../ha-checkbox\";\nimport type { HaCheckbox } from \"../ha-checkbox\";\nimport \"../ha-icon\";\nimport { filterData, sortData } from \"./sort-filter\";\nimport memoizeOne from \"memoize-one\";\n\ndeclare global {\n  // for fire event\n  interface HASSDomEvents {\n    \"selection-changed\": SelectionChangedEvent;\n    \"row-click\": RowClickedEvent;\n    \"sorting-changed\": SortingChangedEvent;\n  }\n}\n\nexport interface RowClickedEvent {\n  id: string;\n}\n\nexport interface SelectionChangedEvent {\n  value: string[];\n}\n\nexport interface SortingChangedEvent {\n  column: string;\n  direction: SortingDirection;\n}\n\nexport type SortingDirection = \"desc\" | \"asc\" | null;\n\nexport interface DataTableColumnContainer {\n  [key: string]: DataTableColumnData;\n}\n\nexport interface DataTableSortColumnData {\n  sortable?: boolean;\n  filterable?: boolean;\n  filterKey?: string;\n  direction?: SortingDirection;\n}\n\nexport interface DataTableColumnData extends DataTableSortColumnData {\n  title: string;\n  type?: \"numeric\" | \"icon\" | \"icon-button\";\n  template?: <T>(data: any, row: T) => TemplateResult | string;\n  width?: string;\n  maxWidth?: string;\n  grows?: boolean;\n}\n\nexport interface DataTableRowData {\n  [key: string]: any;\n  selectable?: boolean;\n}\n\nexport interface SortableColumnContainer {\n  [key: string]: DataTableSortColumnData;\n}\n\n@customElement(\"ha-data-table\")\nexport class HaDataTable extends LitElement {\n  @property({ type: Object }) public columns: DataTableColumnContainer = {};\n\n  @property({ type: Array }) public data: DataTableRowData[] = [];\n\n  @property({ type: Boolean }) public selectable = false;\n\n  @property({ type: Boolean }) public hasFab = false;\n\n  @property({ type: Boolean, attribute: \"auto-height\" })\n  public autoHeight = false;\n\n  @property({ type: String }) public id = \"id\";\n\n  @property({ type: String }) public noDataText?: string;\n\n  @property({ type: String }) public filter = \"\";\n\n  @property({ type: Boolean }) private _filterable = false;\n\n  @property({ type: String }) private _filter = \"\";\n\n  @property({ type: String }) private _sortColumn?: string;\n\n  @property({ type: String }) private _sortDirection: SortingDirection = null;\n\n  @property({ type: Array }) private _filteredData: DataTableRowData[] = [];\n\n  @query(\"slot[name='header']\") private _header!: HTMLSlotElement;\n\n  @query(\".mdc-data-table__table\") private _table!: HTMLDivElement;\n\n  private _checkableRowsCount?: number;\n\n  private _checkedRows: string[] = [];\n\n  private _sortColumns: SortableColumnContainer = {};\n\n  private curRequest = 0;\n\n  private _debounceSearch = debounce(\n    (value: string) => {\n      this._filter = value;\n    },\n    100,\n    false\n  );\n\n  public clearSelection(): void {\n    this._checkedRows = [];\n    this._checkedRowsChanged();\n  }\n\n  public connectedCallback() {\n    super.connectedCallback();\n    if (this._filteredData.length) {\n      // Force update of location of rows\n      this._filteredData = [...this._filteredData];\n    }\n  }\n\n  protected updated(properties: PropertyValues) {\n    super.updated(properties);\n\n    if (properties.has(\"columns\")) {\n      this._filterable = Object.values(this.columns).some(\n        (column) => column.filterable\n      );\n\n      for (const columnId in this.columns) {\n        if (this.columns[columnId].direction) {\n          this._sortDirection = this.columns[columnId].direction!;\n          this._sortColumn = columnId;\n          break;\n        }\n      }\n\n      const clonedColumns: DataTableColumnContainer = deepClone(this.columns);\n      Object.values(clonedColumns).forEach((column: DataTableColumnData) => {\n        delete column.title;\n        delete column.type;\n        delete column.template;\n      });\n\n      this._sortColumns = clonedColumns;\n    }\n\n    if (properties.has(\"filter\")) {\n      this._debounceSearch(this.filter);\n    }\n\n    if (properties.has(\"data\")) {\n      this._checkableRowsCount = this.data.filter(\n        (row) => row.selectable !== false\n      ).length;\n    }\n\n    if (\n      properties.has(\"data\") ||\n      properties.has(\"columns\") ||\n      properties.has(\"_filter\") ||\n      properties.has(\"_sortColumn\") ||\n      properties.has(\"_sortDirection\")\n    ) {\n      this._sortFilterData();\n    }\n  }\n\n  protected render() {\n    return html`\n      <div class=\"mdc-data-table\">\n        <slot name=\"header\" @slotchange=${this._calcTableHeight}>\n          ${this._filterable\n            ? html`\n                <div class=\"table-header\">\n                  <search-input\n                    @value-changed=${this._handleSearchChange}\n                  ></search-input>\n                </div>\n              `\n            : \"\"}\n        </slot>\n        <div\n          class=\"mdc-data-table__table ${classMap({\n            \"auto-height\": this.autoHeight,\n          })}\"\n          style=${styleMap({\n            height: this.autoHeight\n              ? `${(this._filteredData.length || 1) * 53 + 57}px`\n              : `calc(100% - ${this._header?.clientHeight}px)`,\n          })}\n        >\n          <div class=\"mdc-data-table__header-row\">\n            ${this.selectable\n              ? html`\n                  <div\n                    class=\"mdc-data-table__header-cell mdc-data-table__header-cell--checkbox\"\n                    role=\"columnheader\"\n                    scope=\"col\"\n                  >\n                    <ha-checkbox\n                      class=\"mdc-data-table__row-checkbox\"\n                      @change=${this._handleHeaderRowCheckboxClick}\n                      .indeterminate=${this._checkedRows.length &&\n                      this._checkedRows.length !== this._checkableRowsCount}\n                      .checked=${this._checkedRows.length ===\n                      this._checkableRowsCount}\n                    >\n                    </ha-checkbox>\n                  </div>\n                `\n              : \"\"}\n            ${Object.entries(this.columns).map((columnEntry) => {\n              const [key, column] = columnEntry;\n              const sorted = key === this._sortColumn;\n              const classes = {\n                \"mdc-data-table__header-cell--numeric\": Boolean(\n                  column.type === \"numeric\"\n                ),\n                \"mdc-data-table__header-cell--icon\": Boolean(\n                  column.type === \"icon\"\n                ),\n                \"mdc-data-table__header-cell--icon-button\": Boolean(\n                  column.type === \"icon-button\"\n                ),\n                sortable: Boolean(column.sortable),\n                \"not-sorted\": Boolean(column.sortable && !sorted),\n                grows: Boolean(column.grows),\n              };\n              return html`\n                <div\n                  class=\"mdc-data-table__header-cell ${classMap(classes)}\"\n                  style=${column.width\n                    ? styleMap({\n                        [column.grows ? \"minWidth\" : \"width\"]: column.width,\n                        maxWidth: column.maxWidth || \"\",\n                      })\n                    : \"\"}\n                  role=\"columnheader\"\n                  scope=\"col\"\n                  @click=${this._handleHeaderClick}\n                  .columnId=${key}\n                >\n                  ${column.sortable\n                    ? html`\n                        <ha-icon\n                          .icon=${sorted && this._sortDirection === \"desc\"\n                            ? \"hass:arrow-down\"\n                            : \"hass:arrow-up\"}\n                        ></ha-icon>\n                      `\n                    : \"\"}\n                  <span>${column.title}</span>\n                </div>\n              `;\n            })}\n          </div>\n          ${!this._filteredData.length\n            ? html`\n                <div class=\"mdc-data-table__content\">\n                  <div class=\"mdc-data-table__row\">\n                    <div class=\"mdc-data-table__cell grows center\">\n                      ${this.noDataText || \"No data\"}\n                    </div>\n                  </div>\n                </div>\n              `\n            : html`\n                <div class=\"mdc-data-table__content scroller\">\n                  ${scroll({\n                    items: !this.hasFab\n                      ? this._filteredData\n                      : [...this._filteredData, ...[{ empty: true }]],\n                    renderItem: (row: DataTableRowData) => {\n                      if (row.empty) {\n                        return html` <div class=\"mdc-data-table__row\"></div> `;\n                      }\n                      return html`\n                        <div\n                          .rowId=\"${row[this.id]}\"\n                          @click=${this._handleRowClick}\n                          class=\"mdc-data-table__row ${classMap({\n                            \"mdc-data-table__row--selected\": this._checkedRows.includes(\n                              String(row[this.id])\n                            ),\n                          })}\"\n                          aria-selected=${ifDefined(\n                            this._checkedRows.includes(String(row[this.id]))\n                              ? true\n                              : undefined\n                          )}\n                          .selectable=${row.selectable !== false}\n                        >\n                          ${this.selectable\n                            ? html`\n                                <div\n                                  class=\"mdc-data-table__cell mdc-data-table__cell--checkbox\"\n                                >\n                                  <ha-checkbox\n                                    class=\"mdc-data-table__row-checkbox\"\n                                    @change=${this._handleRowCheckboxClick}\n                                    .disabled=${row.selectable === false}\n                                    .checked=${this._checkedRows.includes(\n                                      String(row[this.id])\n                                    )}\n                                  >\n                                  </ha-checkbox>\n                                </div>\n                              `\n                            : \"\"}\n                          ${Object.entries(this.columns).map((columnEntry) => {\n                            const [key, column] = columnEntry;\n                            return html`\n                              <div\n                                class=\"mdc-data-table__cell ${classMap({\n                                  \"mdc-data-table__cell--numeric\": Boolean(\n                                    column.type === \"numeric\"\n                                  ),\n                                  \"mdc-data-table__cell--icon\": Boolean(\n                                    column.type === \"icon\"\n                                  ),\n                                  \"mdc-data-table__cell--icon-button\": Boolean(\n                                    column.type === \"icon-button\"\n                                  ),\n                                  grows: Boolean(column.grows),\n                                })}\"\n                                style=${column.width\n                                  ? styleMap({\n                                      [column.grows\n                                        ? \"minWidth\"\n                                        : \"width\"]: column.width,\n                                      maxWidth: column.maxWidth\n                                        ? column.maxWidth\n                                        : \"\",\n                                    })\n                                  : \"\"}\n                              >\n                                ${column.template\n                                  ? column.template(row[key], row)\n                                  : row[key]}\n                              </div>\n                            `;\n                          })}\n                        </div>\n                      `;\n                    },\n                  })}\n                </div>\n              `}\n        </div>\n      </div>\n    `;\n  }\n\n  private async _sortFilterData() {\n    const startTime = new Date().getTime();\n    this.curRequest++;\n    const curRequest = this.curRequest;\n\n    let filteredData = this.data;\n    if (this._filter) {\n      filteredData = await this._memFilterData(\n        this.data,\n        this._sortColumns,\n        this._filter\n      );\n    }\n\n    const prom = this._sortColumn\n      ? sortData(\n          filteredData,\n          this._sortColumns,\n          this._sortDirection,\n          this._sortColumn\n        )\n      : filteredData;\n\n    const [data] = await Promise.all([prom, nextRender]);\n\n    const curTime = new Date().getTime();\n    const elapsed = curTime - startTime;\n\n    if (elapsed < 100) {\n      await new Promise((resolve) => setTimeout(resolve, 100 - elapsed));\n    }\n    if (this.curRequest !== curRequest) {\n      return;\n    }\n    this._filteredData = data;\n  }\n\n  private _memFilterData = memoizeOne(\n    async (\n      data: DataTableRowData[],\n      columns: SortableColumnContainer,\n      filter: string\n    ): Promise<DataTableRowData[]> => {\n      return filterData(data, columns, filter);\n    }\n  );\n\n  private _handleHeaderClick(ev: Event) {\n    const columnId = ((ev.target as HTMLElement).closest(\n      \".mdc-data-table__header-cell\"\n    ) as any).columnId;\n    if (!this.columns[columnId].sortable) {\n      return;\n    }\n    if (!this._sortDirection || this._sortColumn !== columnId) {\n      this._sortDirection = \"asc\";\n    } else if (this._sortDirection === \"asc\") {\n      this._sortDirection = \"desc\";\n    } else {\n      this._sortDirection = null;\n    }\n\n    this._sortColumn = this._sortDirection === null ? undefined : columnId;\n\n    fireEvent(this, \"sorting-changed\", {\n      column: columnId,\n      direction: this._sortDirection,\n    });\n  }\n\n  private _handleHeaderRowCheckboxClick(ev: Event) {\n    const checkbox = ev.target as HaCheckbox;\n    if (checkbox.checked) {\n      this._checkedRows = this._filteredData\n        .filter((data) => data.selectable !== false)\n        .map((data) => data[this.id]);\n      this._checkedRowsChanged();\n    } else {\n      this._checkedRows = [];\n      this._checkedRowsChanged();\n    }\n  }\n\n  private _handleRowCheckboxClick(ev: Event) {\n    const checkbox = ev.target as HaCheckbox;\n    const rowId = (checkbox.closest(\".mdc-data-table__row\") as any).rowId;\n\n    if (checkbox.checked) {\n      if (this._checkedRows.includes(rowId)) {\n        return;\n      }\n      this._checkedRows = [...this._checkedRows, rowId];\n    } else {\n      this._checkedRows = this._checkedRows.filter((row) => row !== rowId);\n    }\n    this._checkedRowsChanged();\n  }\n\n  private _handleRowClick(ev: Event) {\n    const target = ev.target as HTMLElement;\n    if (target.tagName === \"HA-CHECKBOX\") {\n      return;\n    }\n    const rowId = (target.closest(\".mdc-data-table__row\") as any).rowId;\n    fireEvent(this, \"row-click\", { id: rowId }, { bubbles: false });\n  }\n\n  private _checkedRowsChanged() {\n    // force scroller to update, change it's items\n    this._filteredData = [...this._filteredData];\n    fireEvent(this, \"selection-changed\", {\n      value: this._checkedRows,\n    });\n  }\n\n  private _handleSearchChange(ev: CustomEvent): void {\n    this._debounceSearch(ev.detail.value);\n  }\n\n  private async _calcTableHeight() {\n    if (this.autoHeight) {\n      return;\n    }\n    await this.updateComplete;\n    this._table.style.height = `calc(100% - ${this._header.clientHeight}px)`;\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      /* default mdc styles, colors changed, without checkbox styles */\n      :host {\n        height: 100%;\n      }\n      .mdc-data-table__content {\n        font-family: Roboto, sans-serif;\n        -moz-osx-font-smoothing: grayscale;\n        -webkit-font-smoothing: antialiased;\n        font-size: 0.875rem;\n        line-height: 1.25rem;\n        font-weight: 400;\n        letter-spacing: 0.0178571429em;\n        text-decoration: inherit;\n        text-transform: inherit;\n      }\n\n      .mdc-data-table {\n        background-color: var(--data-table-background-color);\n        border-radius: 4px;\n        border-width: 1px;\n        border-style: solid;\n        border-color: rgba(var(--rgb-primary-text-color), 0.12);\n        display: inline-flex;\n        flex-direction: column;\n        box-sizing: border-box;\n        overflow: hidden;\n      }\n\n      .mdc-data-table__row--selected {\n        background-color: rgba(var(--rgb-primary-color), 0.04);\n      }\n\n      .mdc-data-table__row {\n        display: flex;\n        width: 100%;\n        height: 52px;\n      }\n\n      .mdc-data-table__row ~ .mdc-data-table__row {\n        border-top: 1px solid rgba(var(--rgb-primary-text-color), 0.12);\n      }\n\n      .mdc-data-table__row:not(.mdc-data-table__row--selected):hover {\n        background-color: rgba(var(--rgb-primary-text-color), 0.04);\n      }\n\n      .mdc-data-table__header-cell {\n        color: var(--primary-text-color);\n      }\n\n      .mdc-data-table__cell {\n        color: var(--primary-text-color);\n      }\n\n      .mdc-data-table__header-row {\n        height: 56px;\n        display: flex;\n        width: 100%;\n        border-bottom: 1px solid rgba(var(--rgb-primary-text-color), 0.12);\n        overflow-x: auto;\n      }\n\n      .mdc-data-table__header-row::-webkit-scrollbar {\n        display: none;\n      }\n\n      .mdc-data-table__cell,\n      .mdc-data-table__header-cell {\n        padding-right: 16px;\n        padding-left: 16px;\n        align-self: center;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        flex-shrink: 0;\n        box-sizing: border-box;\n      }\n\n      .mdc-data-table__cell.mdc-data-table__cell--icon {\n        overflow: initial;\n      }\n\n      .mdc-data-table__header-cell--checkbox,\n      .mdc-data-table__cell--checkbox {\n        /* @noflip */\n        padding-left: 16px;\n        /* @noflip */\n        padding-right: 0;\n        width: 56px;\n      }\n      [dir=\"rtl\"] .mdc-data-table__header-cell--checkbox,\n      .mdc-data-table__header-cell--checkbox[dir=\"rtl\"],\n      [dir=\"rtl\"] .mdc-data-table__cell--checkbox,\n      .mdc-data-table__cell--checkbox[dir=\"rtl\"] {\n        /* @noflip */\n        padding-left: 0;\n        /* @noflip */\n        padding-right: 16px;\n      }\n\n      .mdc-data-table__table {\n        height: 100%;\n        width: 100%;\n        border: 0;\n        white-space: nowrap;\n      }\n\n      .mdc-data-table__cell {\n        font-family: Roboto, sans-serif;\n        -moz-osx-font-smoothing: grayscale;\n        -webkit-font-smoothing: antialiased;\n        font-size: 0.875rem;\n        line-height: 1.25rem;\n        font-weight: 400;\n        letter-spacing: 0.0178571429em;\n        text-decoration: inherit;\n        text-transform: inherit;\n      }\n\n      .mdc-data-table__cell a {\n        color: inherit;\n        text-decoration: none;\n      }\n\n      .mdc-data-table__cell--numeric {\n        text-align: right;\n      }\n      [dir=\"rtl\"] .mdc-data-table__cell--numeric,\n      .mdc-data-table__cell--numeric[dir=\"rtl\"] {\n        /* @noflip */\n        text-align: left;\n      }\n\n      .mdc-data-table__cell--icon {\n        color: var(--secondary-text-color);\n        text-align: center;\n      }\n\n      .mdc-data-table__header-cell--icon,\n      .mdc-data-table__cell--icon {\n        width: 54px;\n      }\n\n      .mdc-data-table__header-cell.mdc-data-table__header-cell--icon {\n        text-align: center;\n      }\n      .mdc-data-table__header-cell.sortable.mdc-data-table__header-cell--icon:hover,\n      .mdc-data-table__header-cell.sortable.mdc-data-table__header-cell--icon:not(.not-sorted) {\n        text-align: left;\n      }\n\n      .mdc-data-table__cell--icon:first-child ha-icon {\n        margin-left: 8px;\n      }\n\n      .mdc-data-table__cell--icon:first-child state-badge {\n        margin-right: -8px;\n      }\n\n      .mdc-data-table__header-cell--icon-button,\n      .mdc-data-table__cell--icon-button {\n        width: 56px;\n        padding: 8px;\n      }\n\n      .mdc-data-table__cell--icon-button {\n        color: var(--secondary-text-color);\n        text-overflow: clip;\n      }\n\n      .mdc-data-table__header-cell--icon-button:first-child,\n      .mdc-data-table__cell--icon-button:first-child {\n        width: 64px;\n        padding-left: 16px;\n      }\n\n      .mdc-data-table__header-cell--icon-button:last-child,\n      .mdc-data-table__cell--icon-button:last-child {\n        width: 64px;\n        padding-right: 16px;\n      }\n\n      .mdc-data-table__cell--icon-button a {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-data-table__header-cell {\n        font-family: Roboto, sans-serif;\n        -moz-osx-font-smoothing: grayscale;\n        -webkit-font-smoothing: antialiased;\n        font-size: 0.875rem;\n        line-height: 1.375rem;\n        font-weight: 500;\n        letter-spacing: 0.0071428571em;\n        text-decoration: inherit;\n        text-transform: inherit;\n        text-align: left;\n      }\n      [dir=\"rtl\"] .mdc-data-table__header-cell,\n      .mdc-data-table__header-cell[dir=\"rtl\"] {\n        /* @noflip */\n        text-align: right;\n      }\n\n      .mdc-data-table__header-cell--numeric {\n        text-align: right;\n      }\n      .mdc-data-table__header-cell--numeric.sortable:hover,\n      .mdc-data-table__header-cell--numeric.sortable:not(.not-sorted) {\n        text-align: left;\n      }\n      [dir=\"rtl\"] .mdc-data-table__header-cell--numeric,\n      .mdc-data-table__header-cell--numeric[dir=\"rtl\"] {\n        /* @noflip */\n        text-align: left;\n      }\n\n      /* custom from here */\n\n      :host {\n        display: block;\n      }\n\n      .mdc-data-table {\n        display: block;\n        border-width: var(--data-table-border-width, 1px);\n        height: 100%;\n      }\n      .mdc-data-table__header-cell {\n        overflow: hidden;\n        position: relative;\n      }\n      .mdc-data-table__header-cell span {\n        position: relative;\n        left: 0px;\n      }\n\n      .mdc-data-table__header-cell.sortable {\n        cursor: pointer;\n      }\n      .mdc-data-table__header-cell > * {\n        transition: left 0.2s ease;\n      }\n      .mdc-data-table__header-cell ha-icon {\n        top: -3px;\n        position: absolute;\n      }\n      .mdc-data-table__header-cell.not-sorted ha-icon {\n        left: -20px;\n      }\n      .mdc-data-table__header-cell.sortable:not(.not-sorted) span,\n      .mdc-data-table__header-cell.sortable.not-sorted:hover span {\n        left: 24px;\n      }\n      .mdc-data-table__header-cell.sortable:not(.not-sorted) ha-icon,\n      .mdc-data-table__header-cell.sortable:hover.not-sorted ha-icon {\n        left: 12px;\n      }\n      .table-header {\n        border-bottom: 1px solid rgba(var(--rgb-primary-text-color), 0.12);\n        padding: 0 16px;\n      }\n      search-input {\n        position: relative;\n        top: 2px;\n      }\n      slot[name=\"header\"] {\n        display: block;\n      }\n      .center {\n        text-align: center;\n      }\n      .secondary {\n        color: var(--secondary-text-color);\n      }\n      .scroller {\n        display: flex;\n        position: relative;\n        contain: strict;\n        height: calc(100% - 57px);\n      }\n      .mdc-data-table__table:not(.auto-height) .scroller {\n        overflow: auto;\n      }\n      .grows {\n        flex-grow: 1;\n        flex-shrink: 1;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-data-table\": HaDataTable;\n  }\n}\n","import {\n  customElement,\n  html,\n  LitElement,\n  property,\n  query,\n  TemplateResult,\n  css,\n  CSSResult,\n} from \"lit-element\";\nimport memoizeOne from \"memoize-one\";\nimport \"../../../../../components/data-table/ha-data-table\";\nimport type {\n  DataTableColumnContainer,\n  HaDataTable,\n  DataTableRowData,\n} from \"../../../../../components/data-table/ha-data-table\";\nimport \"../../../../../components/entity/ha-state-icon\";\nimport type {\n  ZHADeviceEndpoint,\n  ZHAEntityReference,\n} from \"../../../../../data/zha\";\nimport type { HomeAssistant } from \"../../../../../types\";\n\nexport interface DeviceEndpointRowData extends DataTableRowData {\n  id: string;\n  name: string;\n  model: string;\n  manufacturer: string;\n  endpoint_id: number;\n  entities: ZHAEntityReference[];\n}\n\n@customElement(\"zha-device-endpoint-data-table\")\nexport class ZHADeviceEndpointDataTable extends LitElement {\n  @property({ type: Object }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  @property({ type: Boolean }) public selectable = false;\n\n  @property({ type: Array }) public deviceEndpoints: ZHADeviceEndpoint[] = [];\n\n  @query(\"ha-data-table\") private _dataTable!: HaDataTable;\n\n  private _deviceEndpoints = memoizeOne(\n    (deviceEndpoints: ZHADeviceEndpoint[]) => {\n      const outputDevices: DeviceEndpointRowData[] = [];\n\n      deviceEndpoints.forEach((deviceEndpoint) => {\n        outputDevices.push({\n          name:\n            deviceEndpoint.device.user_given_name || deviceEndpoint.device.name,\n          model: deviceEndpoint.device.model,\n          manufacturer: deviceEndpoint.device.manufacturer,\n          id: deviceEndpoint.device.ieee + \"_\" + deviceEndpoint.endpoint_id,\n          ieee: deviceEndpoint.device.ieee,\n          endpoint_id: deviceEndpoint.endpoint_id,\n          entities: deviceEndpoint.entities,\n          dev_id: deviceEndpoint.device.device_reg_id,\n        });\n      });\n\n      return outputDevices;\n    }\n  );\n\n  private _columns = memoizeOne(\n    (narrow: boolean): DataTableColumnContainer =>\n      narrow\n        ? {\n            name: {\n              title: \"Devices\",\n              sortable: true,\n              filterable: true,\n              direction: \"asc\",\n              grows: true,\n              template: (name, device: any) => html`\n                <a href=\"${`/config/devices/device/${device.dev_id}`}\">\n                  ${name}\n                </a>\n              `,\n            },\n            endpoint_id: {\n              title: \"Endpoint\",\n              sortable: true,\n              filterable: true,\n            },\n          }\n        : {\n            name: {\n              title: \"Name\",\n              sortable: true,\n              filterable: true,\n              direction: \"asc\",\n              grows: true,\n              template: (name, device: any) => html`\n                <a href=\"${`/config/devices/device/${device.dev_id}`}\">\n                  ${name}\n                </a>\n              `,\n            },\n            endpoint_id: {\n              title: \"Endpoint\",\n              sortable: true,\n              filterable: true,\n            },\n            entities: {\n              title: \"Associated Entities\",\n              sortable: false,\n              filterable: false,\n              width: \"50%\",\n              template: (entities) => html`\n                ${entities.length\n                  ? entities.length > 3\n                    ? html`${entities.slice(0, 2).map(\n                          (entity) =>\n                            html`<div\n                              style=\"overflow: hidden; text-overflow: ellipsis;\"\n                            >\n                              ${entity.name || entity.original_name}\n                            </div>`\n                        )}\n                        <div>And ${entities.length - 2} more...</div>`\n                    : entities.map(\n                        (entity) =>\n                          html`<div\n                            style=\"overflow: hidden; text-overflow: ellipsis;\"\n                          >\n                            ${entity.name || entity.original_name}\n                          </div>`\n                      )\n                  : \"This endpoint has no associated entities\"}\n              `,\n            },\n          }\n  );\n\n  public clearSelection() {\n    this._dataTable.clearSelection();\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-data-table\n        .columns=${this._columns(this.narrow)}\n        .data=${this._deviceEndpoints(this.deviceEndpoints)}\n        .selectable=${this.selectable}\n        auto-height\n      ></ha-data-table>\n    `;\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      css`\n        .table-cell-text {\n          word-break: break-word;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"zha-device-endpoint-data-table\": ZHADeviceEndpointDataTable;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@polymer/paper-input/paper-input\";\nimport type { PaperInputElement } from \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-spinner/paper-spinner\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  PropertyValues,\n  query,\n} from \"lit-element\";\nimport type { HASSDomEvent } from \"../../../../../common/dom/fire_event\";\nimport { navigate } from \"../../../../../common/navigate\";\nimport type { SelectionChangedEvent } from \"../../../../../components/data-table/ha-data-table\";\nimport {\n  addGroup,\n  fetchGroupableDevices,\n  ZHAGroup,\n  ZHADeviceEndpoint,\n} from \"../../../../../data/zha\";\nimport \"../../../../../layouts/hass-error-screen\";\nimport \"../../../../../layouts/hass-subpage\";\nimport type { PolymerChangedEvent } from \"../../../../../polymer-types\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport \"../../../ha-config-section\";\nimport \"./zha-device-endpoint-data-table\";\nimport type { ZHADeviceEndpointDataTable } from \"./zha-device-endpoint-data-table\";\n\n@customElement(\"zha-add-group-page\")\nexport class ZHAAddGroupPage extends LitElement {\n  @property({ type: Object }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @property({ type: Array }) public deviceEndpoints: ZHADeviceEndpoint[] = [];\n\n  @property() private _processingAdd = false;\n\n  @property() private _groupName = \"\";\n\n  @query(\"zha-device-endpoint-data-table\")\n  private _zhaDevicesDataTable!: ZHADeviceEndpointDataTable;\n\n  private _firstUpdatedCalled = false;\n\n  private _selectedDevicesToAdd: string[] = [];\n\n  public connectedCallback(): void {\n    super.connectedCallback();\n    if (this.hass && this._firstUpdatedCalled) {\n      this._fetchData();\n    }\n  }\n\n  protected firstUpdated(changedProperties: PropertyValues): void {\n    super.firstUpdated(changedProperties);\n    if (this.hass) {\n      this._fetchData();\n    }\n    this._firstUpdatedCalled = true;\n  }\n\n  protected render() {\n    return html`\n      <hass-subpage\n        .header=${this.hass.localize(\"ui.panel.config.zha.groups.create_group\")}\n      >\n        <ha-config-section .isWide=${!this.narrow}>\n          <p slot=\"introduction\">\n            ${this.hass.localize(\n              \"ui.panel.config.zha.groups.create_group_details\"\n            )}\n          </p>\n          <paper-input\n            type=\"string\"\n            .value=\"${this._groupName}\"\n            @value-changed=${this._handleNameChange}\n            placeholder=\"${this.hass!.localize(\n              \"ui.panel.config.zha.groups.group_name_placeholder\"\n            )}\"\n          ></paper-input>\n\n          <div class=\"header\">\n            ${this.hass.localize(\"ui.panel.config.zha.groups.add_members\")}\n          </div>\n\n          <zha-device-endpoint-data-table\n            .hass=${this.hass}\n            .deviceEndpoints=${this.deviceEndpoints}\n            .narrow=${this.narrow}\n            selectable\n            @selection-changed=${this._handleAddSelectionChanged}\n          >\n          </zha-device-endpoint-data-table>\n\n          <div class=\"paper-dialog-buttons\">\n            <mwc-button\n              .disabled=\"${!this._groupName ||\n              this._groupName === \"\" ||\n              this._processingAdd}\"\n              @click=\"${this._createGroup}\"\n              class=\"button\"\n            >\n              <paper-spinner\n                ?active=\"${this._processingAdd}\"\n                alt=\"${this.hass!.localize(\n                  \"ui.panel.config.zha.groups.creating_group\"\n                )}\"\n              ></paper-spinner>\n              ${this.hass!.localize(\n                \"ui.panel.config.zha.groups.create\"\n              )}</mwc-button\n            >\n          </div>\n        </ha-config-section>\n      </hass-subpage>\n    `;\n  }\n\n  private async _fetchData() {\n    this.deviceEndpoints = await fetchGroupableDevices(this.hass!);\n  }\n\n  private _handleAddSelectionChanged(\n    ev: HASSDomEvent<SelectionChangedEvent>\n  ): void {\n    this._selectedDevicesToAdd = ev.detail.value;\n  }\n\n  private async _createGroup(): Promise<void> {\n    this._processingAdd = true;\n    const members = this._selectedDevicesToAdd.map((member) => {\n      const memberParts = member.split(\"_\");\n      return { ieee: memberParts[0], endpoint_id: memberParts[1] };\n    });\n    const group: ZHAGroup = await addGroup(this.hass, this._groupName, members);\n    this._selectedDevicesToAdd = [];\n    this._processingAdd = false;\n    this._groupName = \"\";\n    this._zhaDevicesDataTable.clearSelection();\n    navigate(this, `/config/zha/group/${group.group_id}`, true);\n  }\n\n  private _handleNameChange(ev: PolymerChangedEvent<string>) {\n    const target = ev.currentTarget as PaperInputElement;\n    this._groupName = target.value || \"\";\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      css`\n        .header {\n          font-family: var(--paper-font-display1_-_font-family);\n          -webkit-font-smoothing: var(\n            --paper-font-display1_-_-webkit-font-smoothing\n          );\n          font-size: var(--paper-font-display1_-_font-size);\n          font-weight: var(--paper-font-display1_-_font-weight);\n          letter-spacing: var(--paper-font-display1_-_letter-spacing);\n          line-height: var(--paper-font-display1_-_line-height);\n          opacity: var(--dark-primary-opacity);\n        }\n\n        .button {\n          float: right;\n        }\n\n        ha-config-section *:last-child {\n          padding-bottom: 24px;\n        }\n        mwc-button paper-spinner {\n          width: 14px;\n          height: 14px;\n          margin-right: 20px;\n        }\n        paper-spinner {\n          display: none;\n        }\n        paper-spinner[active] {\n          display: block;\n        }\n        .paper-dialog-buttons {\n          align-items: flex-end;\n          padding: 8px;\n        }\n        .paper-dialog-buttons .warning {\n          --mdc-theme-primary: var(--google-red-500);\n        }\n      `,\n    ];\n  }\n}\n"],"mappings":"AASA;ACiDA;AACA;AAPA;;;;AAnBA;;ACvBA;;;;AAMA;;;;;;AAZA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;ACuCA;AACA;;AAEA;AACA;AACA;;;AAGA;;;;AAIA;;;;AAKA;;;;AAIA;;;;AAOA;;;;;;;;;;;AAvDA;;AC+KA;AACA;;;AAIA;;;AAIA;;;AAGA;AAGA;;;AAOA;;;;;;;;AASA;AACA;AAEA;;;;AAMA;AACA;;AAmBA;AACA;;;AAQA;AACA;;AAEA;;AAGA;;AAKA;AACA;;;;AAKA;;AAYA;;AAUA;AACA;AACA;AAKA;AAKA;;AAEA;;;;;;AAOA;AACA;AACA;;;;AAOA;AACA;;AAIA;AAYA;;AAWA;;;;;;AA/EA;;;;AAIA;;;;;;;AA1MA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;ACFA;AACA;;AAIA;AAcA;AACA;;AAIA;AAWA;;;AAOA;;AAGA;;;AAMA;AAGA;AAlGA;;AA+GA;AACA;AACA;;;AAjHA;;;;AAAA;;ACkCA;;AAEA;;AAEA;;;;AAMA;AACA;AACA;;;;AAMA;;;;AAIA;AACA;AACA;;AAEA;;;;;;AAMA;AAGA;;;;AAIA;AACA;;AAIA;;;;;AAhFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA","sourceRoot":""}