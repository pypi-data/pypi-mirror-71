{"version":3,"file":"chunk.239860f8dcdc7fb7f45d.js","sources":["webpack:///src/mwc-fab-base.ts","webpack:///./src/panels/lovelace/components/hui-card-options.ts"],"sourcesContent":["/**\n@license\nCopyright 2018 Google Inc. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport {ripple} from '@material/mwc-ripple/ripple-directive.js';\nimport {html, LitElement, property, TemplateResult} from 'lit-element';\nimport {classMap} from 'lit-html/directives/class-map.js';\n\nexport class FabBase extends LitElement {\n  @property({type: Boolean}) mini = false;\n\n  @property({type: Boolean}) exited = false;\n\n  @property({type: Boolean}) disabled = false;\n\n  @property({type: Boolean}) extended = false;\n\n  @property({type: Boolean}) showIconAtEnd = false;\n\n  @property() icon = '';\n\n  @property() label = '';\n\n  protected createRenderRoot() {\n    return this.attachShadow({mode: 'open', delegatesFocus: true});\n  }\n\n  protected render() {\n    const classes = {\n      'mdc-fab--mini': this.mini,\n      'mdc-fab--exited': this.exited,\n      'mdc-fab--extended': this.extended,\n      'icon-end': this.showIconAtEnd,\n    };\n    const showLabel = this.label !== '' && this.extended;\n\n    let iconTemplate: TemplateResult|string = '';\n\n    if (this.icon) {\n      iconTemplate = html`\n        <span class=\"material-icons mdc-fab__icon\">${this.icon}</span>`;\n    }\n\n    let label = html``;\n\n    if (showLabel) {\n      label = html`<span class=\"mdc-fab__label\">${this.label}</span>`;\n    }\n\n    return html`\n      <button\n          class=\"mdc-fab ${classMap(classes)}\"\n          ?disabled=\"${this.disabled}\"\n          aria-label=\"${this.label || this.icon}\"\n          .ripple=\"${ripple()}\">\n        <div class=\"mdc-fab__ripple\"></div>\n        ${this.showIconAtEnd ? label : ''}\n        <slot name=\"icon\">\n          ${iconTemplate}\n        </slot>\n        ${!this.showIconAtEnd ? label : ''}\n      </button>`;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport \"@material/mwc-icon-button\";\nimport \"../../../components/ha-button-menu\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  TemplateResult,\n  queryAssignedNodes,\n} from \"lit-element\";\nimport { HomeAssistant } from \"../../../types\";\nimport { showEditCardDialog } from \"../editor/card-editor/show-edit-card-dialog\";\nimport { showMoveCardViewDialog } from \"../editor/card-editor/show-move-card-view-dialog\";\nimport { swapCard } from \"../editor/config-util\";\nimport { confDeleteCard } from \"../editor/delete-card\";\nimport { Lovelace, LovelaceCard } from \"../types\";\nimport { computeCardSize } from \"../common/compute-card-size\";\nimport { mdiDotsVertical, mdiArrowDown, mdiArrowUp } from \"@mdi/js\";\n\n@customElement(\"hui-card-options\")\nexport class HuiCardOptions extends LitElement {\n  @property() public hass?: HomeAssistant;\n\n  @property() public lovelace?: Lovelace;\n\n  @property() public path?: [number, number];\n\n  @queryAssignedNodes() private _assignedNodes?: NodeListOf<LovelaceCard>;\n\n  public getCardSize() {\n    return this._assignedNodes ? computeCardSize(this._assignedNodes[0]) : 1;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <slot></slot>\n      <ha-card>\n        <div class=\"options\">\n          <div class=\"primary-actions\">\n            <mwc-button @click=${this._editCard}\n              >${this.hass!.localize(\n                \"ui.panel.lovelace.editor.edit_card.edit\"\n              )}</mwc-button\n            >\n          </div>\n          <div class=\"secondary-actions\">\n            <mwc-icon-button\n              title=\"Move card down\"\n              class=\"move-arrow\"\n              @click=${this._cardDown}\n              ?disabled=${this.lovelace!.config.views[this.path![0]].cards!\n                .length ===\n              this.path![1] + 1}\n            >\n              <ha-svg-icon path=${mdiArrowDown}></ha-svg-icon>\n            </mwc-icon-button>\n            <mwc-icon-button\n              title=\"Move card up\"\n              class=\"move-arrow\"\n              @click=${this._cardUp}\n              ?disabled=${this.path![1] === 0}\n              ><ha-svg-icon path=${mdiArrowUp}></ha-svg-icon\n            ></mwc-icon-button>\n            <ha-button-menu corner=\"BOTTOM_START\">\n              <mwc-icon-button\n                slot=\"trigger\"\n                aria-label=${this.hass!.localize(\n                  \"ui.panel.lovelace.editor.edit_card.options\"\n                )}\n                title=\"${this.hass!.localize(\n                  \"ui.panel.lovelace.editor.edit_card.options\"\n                )}\"\n              >\n                <ha-svg-icon path=${mdiDotsVertical}></ha-svg-icon>\n              </mwc-icon-button>\n\n              <mwc-list-item @tap=${this._moveCard}>\n                ${this.hass!.localize(\n                  \"ui.panel.lovelace.editor.edit_card.move\"\n                )}</mwc-list-item\n              >\n              <mwc-list-item @tap=${this._duplicateCard}\n                >${this.hass!.localize(\n                  \"ui.panel.lovelace.editor.edit_card.duplicate\"\n                )}</mwc-list-item\n              >\n              <mwc-list-item class=\"delete-item\" @tap=${this._deleteCard}>\n                ${this.hass!.localize(\n                  \"ui.panel.lovelace.editor.edit_card.delete\"\n                )}</mwc-list-item\n              >\n            </ha-button-menu>\n          </div>\n        </div>\n      </ha-card>\n    `;\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      :host(:hover) {\n        outline: 2px solid var(--primary-color);\n      }\n\n      ha-card {\n        border-top-right-radius: 0;\n        border-top-left-radius: 0;\n      }\n\n      div.options {\n        border-top: 1px solid #e8e8e8;\n        padding: 5px 8px;\n        display: flex;\n        margin-top: -1px;\n      }\n\n      div.options .primary-actions {\n        flex: 1;\n        margin: auto;\n      }\n\n      div.options .secondary-actions {\n        flex: 4;\n        text-align: right;\n      }\n\n      mwc-icon-button {\n        color: var(--primary-text-color);\n      }\n\n      mwc-icon-button.move-arrow[disabled] {\n        color: var(--disabled-text-color);\n      }\n\n      paper-item.header {\n        color: var(--primary-text-color);\n        text-transform: uppercase;\n        font-weight: 500;\n        font-size: 14px;\n      }\n\n      paper-item {\n        cursor: pointer;\n        white-space: nowrap;\n      }\n\n      paper-item.delete-item {\n        color: var(--error-color);\n      }\n    `;\n  }\n\n  private _duplicateCard(): void {\n    const path = this.path!;\n    const cardConfig = this.lovelace!.config.views[path[0]].cards![path[1]];\n    showEditCardDialog(this, {\n      lovelaceConfig: this.lovelace!.config,\n      cardConfig,\n      saveConfig: this.lovelace!.saveConfig,\n      path: [path[0]],\n    });\n  }\n\n  private _editCard(): void {\n    showEditCardDialog(this, {\n      lovelaceConfig: this.lovelace!.config,\n      saveConfig: this.lovelace!.saveConfig,\n      path: this.path!,\n    });\n  }\n\n  private _cardUp(): void {\n    const lovelace = this.lovelace!;\n    const path = this.path!;\n    lovelace.saveConfig(\n      swapCard(lovelace.config, path, [path[0], path[1] - 1])\n    );\n  }\n\n  private _cardDown(): void {\n    const lovelace = this.lovelace!;\n    const path = this.path!;\n    lovelace.saveConfig(\n      swapCard(lovelace.config, path, [path[0], path[1] + 1])\n    );\n  }\n\n  private _moveCard(): void {\n    showMoveCardViewDialog(this, {\n      path: this.path!,\n      lovelace: this.lovelace!,\n    });\n  }\n\n  private _deleteCard(): void {\n    confDeleteCard(this, this.hass!, this.lovelace!, this.path!);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-card-options\": HuiCardOptions;\n  }\n}\n"],"mappings":";AAoBA;AAgCA;;AAWA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AAnDA;;;;;ACsBA;AACA;;;;;;;AASA;AACA;;AAIA;;;;;AAKA;AACA;AACA;;;;;AAKA;AAGA;;AAIA;;;AAGA;AACA;;AAIA;AACA;;AAIA;AACA;;;;;;AAnEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA","sourceRoot":""}