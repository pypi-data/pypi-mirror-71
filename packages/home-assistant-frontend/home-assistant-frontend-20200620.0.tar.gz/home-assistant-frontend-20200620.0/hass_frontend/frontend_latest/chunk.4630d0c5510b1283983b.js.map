{"version":3,"file":"chunk.4630d0c5510b1283983b.js","sources":["webpack:///./node_modules/@polymer/paper-radio-button/paper-radio-button.js","webpack:///./node_modules/@polymer/paper-radio-group/paper-radio-group.js","webpack:///./src/panels/config/helpers/forms/ha-input_boolean-form.ts","webpack:///./src/panels/config/helpers/forms/ha-input_datetime-form.ts","webpack:///./src/panels/config/helpers/forms/ha-input_number-form.ts","webpack:///./src/panels/config/helpers/forms/ha-input_select-form.ts","webpack:///./src/panels/config/helpers/forms/ha-input_text-form.ts"],"sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/paper-styles/default-theme.js';\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\n\nimport {PaperCheckedElementBehavior} from '@polymer/paper-behaviors/paper-checked-element-behavior.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\nimport {afterNextRender} from '@polymer/polymer/lib/utils/render-status.js';\n\nconst template = html`\n<style>\n  :host {\n    display: inline-block;\n    line-height: 0;\n    white-space: nowrap;\n    cursor: pointer;\n    @apply --paper-font-common-base;\n    --calculated-paper-radio-button-size: var(--paper-radio-button-size, 16px);\n    /* -1px is a sentinel for the default and is replace in \\`attached\\`. */\n    --calculated-paper-radio-button-ink-size: var(--paper-radio-button-ink-size, -1px);\n  }\n\n  :host(:focus) {\n    outline: none;\n  }\n\n  #radioContainer {\n    @apply --layout-inline;\n    @apply --layout-center-center;\n    position: relative;\n    width: var(--calculated-paper-radio-button-size);\n    height: var(--calculated-paper-radio-button-size);\n    vertical-align: middle;\n\n    @apply --paper-radio-button-radio-container;\n  }\n\n  #ink {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    right: auto;\n    width: var(--calculated-paper-radio-button-ink-size);\n    height: var(--calculated-paper-radio-button-ink-size);\n    color: var(--paper-radio-button-unchecked-ink-color, var(--primary-text-color));\n    opacity: 0.6;\n    pointer-events: none;\n    -webkit-transform: translate(-50%, -50%);\n    transform: translate(-50%, -50%);\n  }\n\n  #ink[checked] {\n    color: var(--paper-radio-button-checked-ink-color, var(--primary-color));\n  }\n\n  #offRadio, #onRadio {\n    position: absolute;\n    box-sizing: border-box;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    border-radius: 50%;\n  }\n\n  #offRadio {\n    border: 2px solid var(--paper-radio-button-unchecked-color, var(--primary-text-color));\n    background-color: var(--paper-radio-button-unchecked-background-color, transparent);\n    transition: border-color 0.28s;\n  }\n\n  #onRadio {\n    background-color: var(--paper-radio-button-checked-color, var(--primary-color));\n    -webkit-transform: scale(0);\n    transform: scale(0);\n    transition: -webkit-transform ease 0.28s;\n    transition: transform ease 0.28s;\n    will-change: transform;\n  }\n\n  :host([checked]) #offRadio {\n    border-color: var(--paper-radio-button-checked-color, var(--primary-color));\n  }\n\n  :host([checked]) #onRadio {\n    -webkit-transform: scale(0.5);\n    transform: scale(0.5);\n  }\n\n  #radioLabel {\n    line-height: normal;\n    position: relative;\n    display: inline-block;\n    vertical-align: middle;\n    margin-left: var(--paper-radio-button-label-spacing, 10px);\n    white-space: normal;\n    color: var(--paper-radio-button-label-color, var(--primary-text-color));\n\n    @apply --paper-radio-button-label;\n  }\n\n  :host([checked]) #radioLabel {\n    @apply --paper-radio-button-label-checked;\n  }\n\n  #radioLabel:dir(rtl) {\n    margin-left: 0;\n    margin-right: var(--paper-radio-button-label-spacing, 10px);\n  }\n\n  #radioLabel[hidden] {\n    display: none;\n  }\n\n  /* disabled state */\n\n  :host([disabled]) #offRadio {\n    border-color: var(--paper-radio-button-unchecked-color, var(--primary-text-color));\n    opacity: 0.5;\n  }\n\n  :host([disabled][checked]) #onRadio {\n    background-color: var(--paper-radio-button-unchecked-color, var(--primary-text-color));\n    opacity: 0.5;\n  }\n\n  :host([disabled]) #radioLabel {\n    /* slightly darker than the button, so that it's readable */\n    opacity: 0.65;\n  }\n</style>\n\n<div id=\"radioContainer\">\n  <div id=\"offRadio\"></div>\n  <div id=\"onRadio\"></div>\n</div>\n\n<div id=\"radioLabel\"><slot></slot></div>`;\ntemplate.setAttribute('strip-whitespace', '');\n\n/**\nMaterial design: [Radio button](https://www.google.com/design/spec/components/selection-controls.html#selection-controls-radio-button)\n\n`paper-radio-button` is a button that can be either checked or unchecked. The\nuser can tap the radio button to check or uncheck it.\n\nUse a `<paper-radio-group>` to group a set of radio buttons. When radio buttons\nare inside a radio group, exactly one radio button in the group can be checked\nat any time.\n\nExample:\n\n    <paper-radio-button></paper-radio-button>\n    <paper-radio-button>Item label</paper-radio-button>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-radio-button-unchecked-background-color` | Radio button background color when the input is not checked | `transparent`\n`--paper-radio-button-unchecked-color` | Radio button color when the input is not checked | `--primary-text-color`\n`--paper-radio-button-unchecked-ink-color` | Selected/focus ripple color when the input is not checked | `--primary-text-color`\n`--paper-radio-button-checked-color` | Radio button color when the input is checked | `--primary-color`\n`--paper-radio-button-checked-ink-color` | Selected/focus ripple color when the input is checked | `--primary-color`\n`--paper-radio-button-size` | Size of the radio button | `16px`\n`--paper-radio-button-ink-size` | Size of the ripple | `48px`\n`--paper-radio-button-label-color` | Label color | `--primary-text-color`\n`--paper-radio-button-label-spacing` | Spacing between the label and the button | `10px`\n`--paper-radio-button-radio-container` | A mixin applied to the internal radio container | `{}`\n`--paper-radio-button-label` | A mixin applied to the internal label | `{}`\n`--paper-radio-button-label-checked` | A mixin applied to the internal label when the radio button is checked | `{}`\n\nThis element applies the mixin `--paper-font-common-base` but does not import\n`paper-styles/typography.html`. In order to apply the `Roboto` font to this\nelement, make sure you've imported `paper-styles/typography.html`.\n\n@group Paper Elements\n@element paper-radio-button\n@demo demo/index.html\n*/\nPolymer({\n  _template: template,\n\n  is: 'paper-radio-button',\n\n  behaviors: [PaperCheckedElementBehavior],\n\n  hostAttributes: {role: 'radio', 'aria-checked': false, tabindex: 0},\n\n  properties: {\n    /**\n     * Fired when the checked state changes due to user interaction.\n     *\n     * @event change\n     */\n\n    /**\n     * Fired when the checked state changes.\n     *\n     * @event iron-change\n     */\n\n    ariaActiveAttribute: {type: String, value: 'aria-checked'}\n  },\n\n  ready: function() {\n    this._rippleContainer = this.$.radioContainer;\n  },\n\n  attached: function() {\n    // Wait until styles have resolved to check for the default sentinel.\n    // See polymer#4009 for more details.\n    afterNextRender(this, function() {\n      var inkSize =\n          this.getComputedStyleValue('--calculated-paper-radio-button-ink-size')\n              .trim();\n      // If unset, compute and set the default `--paper-radio-button-ink-size`.\n      if (inkSize === '-1px') {\n        var size = parseFloat(\n            this.getComputedStyleValue('--calculated-paper-radio-button-size')\n                .trim());\n        var defaultInkSize = Math.floor(3 * size);\n\n        // The button and ripple need to have the same parity so that their\n        // centers align.\n        if (defaultInkSize % 2 !== size % 2) {\n          defaultInkSize++;\n        }\n\n        this.updateStyles({\n          '--paper-radio-button-ink-size': defaultInkSize + 'px',\n        });\n      }\n    });\n  },\n})\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/iron-a11y-keys-behavior/iron-a11y-keys-behavior.js';\nimport '@polymer/paper-radio-button/paper-radio-button.js';\n\nimport {IronMenubarBehavior, IronMenubarBehaviorImpl} from '@polymer/iron-menu-behavior/iron-menubar-behavior.js';\nimport {IronSelectableBehavior} from '@polymer/iron-selector/iron-selectable.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/**\nMaterial design: [Radio\nbutton](https://www.google.com/design/spec/components/selection-controls.html#selection-controls-radio-button)\n\n`paper-radio-group` allows user to select at most one radio button from a set.\nChecking one radio button that belongs to a radio group unchecks any\npreviously checked radio button within the same group. Use\n`selected` to get or set the selected radio button.\n\nThe <paper-radio-buttons> inside the group must have the `name` attribute\nset.\n\nExample:\n\n    <paper-radio-group selected=\"small\">\n      <paper-radio-button name=\"small\">Small</paper-radio-button>\n      <paper-radio-button name=\"medium\">Medium</paper-radio-button>\n      <paper-radio-button name=\"large\">Large</paper-radio-button>\n    </paper-radio-group>\n\nRadio-button-groups can be made optional, and allow zero buttons to be selected:\n\n    <paper-radio-group selected=\"small\" allow-empty-selection>\n      <paper-radio-button name=\"small\">Small</paper-radio-button>\n      <paper-radio-button name=\"medium\">Medium</paper-radio-button>\n      <paper-radio-button name=\"large\">Large</paper-radio-button>\n    </paper-radio-group>\n\nSee <a href=\"paper-radio-button\">paper-radio-button</a> for more\ninformation about `paper-radio-button`.\n\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-radio-group-item-padding` | The padding of the item | `12px`\n\n@group Paper Elements\n@element paper-radio-group\n@demo demo/index.html\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        display: inline-block;\n      }\n\n      :host ::slotted(*) {\n        padding: var(--paper-radio-group-item-padding, 12px);\n      }\n    </style>\n\n    <slot></slot>\n`,\n\n  is: 'paper-radio-group',\n  behaviors: [IronMenubarBehavior],\n\n  /** @private */\n  hostAttributes: {\n    role: 'radiogroup',\n  },\n\n  properties: {\n    /**\n     * Fired when the radio group selection changes.\n     *\n     * @event paper-radio-group-changed\n     */\n\n    /**\n     * Overriden from Polymer.IronSelectableBehavior\n     */\n    attrForSelected: {type: String, value: 'name'},\n\n    /**\n     * Overriden from Polymer.IronSelectableBehavior\n     */\n    selectedAttribute: {type: String, value: 'checked'},\n\n    /**\n     * Overriden from Polymer.IronSelectableBehavior\n     */\n    selectable: {type: String, value: 'paper-radio-button'},\n\n    /**\n     * If true, radio-buttons can be deselected\n     */\n    allowEmptySelection: {type: Boolean, value: false}\n  },\n\n  /**\n   * Selects the given value.\n   */\n  select: function(value) {\n    var newItem = this._valueToItem(value);\n    if (newItem && newItem.hasAttribute('disabled')) {\n      return;\n    }\n\n    if (this.selected) {\n      var oldItem = this._valueToItem(this.selected);\n\n      if (this.selected == value) {\n        // If deselecting is allowed we'll have to apply an empty selection.\n        // Otherwise, we should force the selection to stay and make this\n        // action a no-op.\n        if (this.allowEmptySelection) {\n          value = '';\n        } else {\n          if (oldItem)\n            oldItem.checked = true;\n          return;\n        }\n      }\n\n      if (oldItem)\n        oldItem.checked = false;\n    }\n\n    IronSelectableBehavior.select.apply(this, [value]);\n    this.fire('paper-radio-group-changed');\n  },\n\n  _activateFocusedItem: function() {\n    this._itemActivate(this._valueForItem(this.focusedItem), this.focusedItem);\n  },\n\n  _onUpKey: function(event) {\n    this._focusPrevious();\n    event.preventDefault();\n    this._activateFocusedItem();\n  },\n\n  _onDownKey: function(event) {\n    this._focusNext();\n    event.preventDefault();\n    this._activateFocusedItem();\n  },\n\n  _onLeftKey: function(event) {\n    IronMenubarBehaviorImpl._onLeftKey.apply(this, arguments);\n    this._activateFocusedItem();\n  },\n\n  _onRightKey: function(event) {\n    IronMenubarBehaviorImpl._onRightKey.apply(this, arguments);\n    this._activateFocusedItem();\n  }\n});\n","import \"@polymer/paper-input/paper-input\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  TemplateResult,\n} from \"lit-element\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-icon-input\";\nimport { InputBoolean } from \"../../../../data/input_boolean\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\n\n@customElement(\"ha-input_boolean-form\")\nclass HaInputBooleanForm extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public new?: boolean;\n\n  private _item?: InputBoolean;\n\n  @property() private _name!: string;\n\n  @property() private _icon!: string;\n\n  set item(item: InputBoolean) {\n    this._item = item;\n    if (item) {\n      this._name = item.name || \"\";\n      this._icon = item.icon || \"\";\n    } else {\n      this._name = \"\";\n      this._icon = \"\";\n    }\n  }\n\n  public focus() {\n    this.updateComplete.then(() =>\n      (this.shadowRoot?.querySelector(\n        \"[dialogInitialFocus]\"\n      ) as HTMLElement)?.focus()\n    );\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass) {\n      return html``;\n    }\n    const nameInvalid = !this._name || this._name.trim() === \"\";\n\n    return html`\n      <div class=\"form\">\n        <paper-input\n          .value=${this._name}\n          .configValue=${\"name\"}\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.name\"\n          )}\n          .errorMessage=\"${this.hass!.localize(\n            \"ui.dialogs.helper_settings.required_error_msg\"\n          )}\"\n          .invalid=${nameInvalid}\n          dialogInitialFocus\n        ></paper-input>\n        <ha-icon-input\n          .value=${this._icon}\n          .configValue=${\"icon\"}\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.icon\"\n          )}\n        ></ha-icon-input>\n      </div>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    if (!this.new && !this._item) {\n      return;\n    }\n    ev.stopPropagation();\n    const configValue = (ev.target as any).configValue;\n    const value = ev.detail.value;\n    if (this[`_${configValue}`] === value) {\n      return;\n    }\n    const newValue = { ...this._item };\n    if (!value) {\n      delete newValue[configValue];\n    } else {\n      newValue[configValue] = ev.detail.value;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: newValue,\n    });\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      haStyle,\n      css`\n        .form {\n          color: var(--primary-text-color);\n        }\n        .row {\n          padding: 16px 0;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-input_boolean-form\": HaInputBooleanForm;\n  }\n}\n","import \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-radio-button/paper-radio-button\";\nimport \"@polymer/paper-radio-group/paper-radio-group\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  TemplateResult,\n} from \"lit-element\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-icon-input\";\nimport { InputDateTime } from \"../../../../data/input_datetime\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\n\n@customElement(\"ha-input_datetime-form\")\nclass HaInputDateTimeForm extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public new?: boolean;\n\n  private _item?: InputDateTime;\n\n  @property() private _name!: string;\n\n  @property() private _icon!: string;\n\n  @property() private _mode!: \"date\" | \"time\" | \"datetime\";\n\n  set item(item: InputDateTime) {\n    this._item = item;\n    if (item) {\n      this._name = item.name || \"\";\n      this._icon = item.icon || \"\";\n      this._mode =\n        item.has_time && item.has_date\n          ? \"datetime\"\n          : item.has_time\n          ? \"time\"\n          : \"date\";\n    } else {\n      this._name = \"\";\n      this._icon = \"\";\n      this._mode = \"date\";\n    }\n  }\n\n  public focus() {\n    this.updateComplete.then(() =>\n      (this.shadowRoot?.querySelector(\n        \"[dialogInitialFocus]\"\n      ) as HTMLElement)?.focus()\n    );\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass) {\n      return html``;\n    }\n    const nameInvalid = !this._name || this._name.trim() === \"\";\n\n    return html`\n      <div class=\"form\">\n        <paper-input\n          .value=${this._name}\n          .configValue=${\"name\"}\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.name\"\n          )}\n          .errorMessage=\"${this.hass!.localize(\n            \"ui.dialogs.helper_settings.required_error_msg\"\n          )}\"\n          .invalid=${nameInvalid}\n          dialogInitialFocus\n        ></paper-input>\n        <ha-icon-input\n          .value=${this._icon}\n          .configValue=${\"icon\"}\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.icon\"\n          )}\n        ></ha-icon-input>\n        <br />\n        ${this.hass.localize(\"ui.dialogs.helper_settings.input_datetime.mode\")}:\n        <br />\n        <paper-radio-group\n          .selected=${this._mode}\n          @selected-changed=${this._modeChanged}\n        >\n          <paper-radio-button name=\"date\">\n            ${this.hass.localize(\n              \"ui.dialogs.helper_settings.input_datetime.date\"\n            )}\n          </paper-radio-button>\n          <paper-radio-button name=\"time\">\n            ${this.hass.localize(\n              \"ui.dialogs.helper_settings.input_datetime.time\"\n            )}\n          </paper-radio-button>\n          <paper-radio-button name=\"datetime\">\n            ${this.hass.localize(\n              \"ui.dialogs.helper_settings.input_datetime.datetime\"\n            )}\n          </paper-radio-button>\n        </paper-radio-group>\n      </div>\n    `;\n  }\n\n  private _modeChanged(ev: CustomEvent) {\n    const mode = ev.detail.value;\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this._item,\n        has_time: [\"time\", \"datetime\"].includes(mode),\n        has_date: [\"date\", \"datetime\"].includes(mode),\n      },\n    });\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    if (!this.new && !this._item) {\n      return;\n    }\n    ev.stopPropagation();\n    const configValue = (ev.target as any).configValue;\n    const value = ev.detail.value;\n    if (this[`_${configValue}`] === value) {\n      return;\n    }\n    const newValue = { ...this._item };\n    if (!value) {\n      delete newValue[configValue];\n    } else {\n      newValue[configValue] = ev.detail.value;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: newValue,\n    });\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      haStyle,\n      css`\n        .form {\n          color: var(--primary-text-color);\n        }\n        .row {\n          padding: 16px 0;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-input_datetime-form\": HaInputDateTimeForm;\n  }\n}\n","import \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-radio-button/paper-radio-button\";\nimport \"@polymer/paper-radio-group/paper-radio-group\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  TemplateResult,\n} from \"lit-element\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-icon-input\";\nimport { InputNumber } from \"../../../../data/input_number\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\n\n@customElement(\"ha-input_number-form\")\nclass HaInputNumberForm extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public new?: boolean;\n\n  private _item?: Partial<InputNumber>;\n\n  @property() private _name!: string;\n\n  @property() private _icon!: string;\n\n  @property() private _max?: number;\n\n  @property() private _min?: number;\n\n  @property() private _mode?: string;\n\n  @property() private _step?: number;\n\n  // eslint-disable-next-line: variable-name\n  @property() private _unit_of_measurement?: string;\n\n  set item(item: InputNumber) {\n    this._item = item;\n    if (item) {\n      this._name = item.name || \"\";\n      this._icon = item.icon || \"\";\n      this._max = item.max ?? 100;\n      this._min = item.min ?? 0;\n      this._mode = item.mode || \"slider\";\n      this._step = item.step || 1;\n      this._unit_of_measurement = item.unit_of_measurement;\n    } else {\n      this._item = {\n        min: 0,\n        max: 0,\n      };\n      this._name = \"\";\n      this._icon = \"\";\n      this._max = 100;\n      this._min = 0;\n      this._mode = \"slider\";\n      this._step = 1;\n    }\n  }\n\n  public focus() {\n    this.updateComplete.then(() =>\n      (this.shadowRoot?.querySelector(\n        \"[dialogInitialFocus]\"\n      ) as HTMLElement)?.focus()\n    );\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass) {\n      return html``;\n    }\n    const nameInvalid = !this._name || this._name.trim() === \"\";\n\n    return html`\n      <div class=\"form\">\n        <paper-input\n          .value=${this._name}\n          .configValue=${\"name\"}\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.name\"\n          )}\n          .errorMessage=\"${this.hass!.localize(\n            \"ui.dialogs.helper_settings.required_error_msg\"\n          )}\"\n          .invalid=${nameInvalid}\n          dialogInitialFocus\n        ></paper-input>\n        <ha-icon-input\n          .value=${this._icon}\n          .configValue=${\"icon\"}\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.icon\"\n          )}\n        ></ha-icon-input>\n        <paper-input\n          .value=${this._min}\n          .configValue=${\"min\"}\n          type=\"number\"\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.input_number.min\"\n          )}\n        ></paper-input>\n        <paper-input\n          .value=${this._max}\n          .configValue=${\"max\"}\n          type=\"number\"\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.input_number.max\"\n          )}\n        ></paper-input>\n        ${this.hass.userData?.showAdvanced\n          ? html`\n              <div class=\"layout horizontal center justified\">\n                ${this.hass.localize(\n                  \"ui.dialogs.helper_settings.input_number.mode\"\n                )}\n                <paper-radio-group\n                  .selected=${this._mode}\n                  @selected-changed=${this._modeChanged}\n                >\n                  <paper-radio-button name=\"slider\">\n                    ${this.hass.localize(\n                      \"ui.dialogs.helper_settings.input_number.slider\"\n                    )}\n                  </paper-radio-button>\n                  <paper-radio-button name=\"box\">\n                    ${this.hass.localize(\n                      \"ui.dialogs.helper_settings.input_number.box\"\n                    )}\n                  </paper-radio-button>\n                </paper-radio-group>\n              </div>\n              <paper-input\n                .value=${this._step}\n                .configValue=${\"step\"}\n                type=\"number\"\n                @value-changed=${this._valueChanged}\n                .label=${this.hass!.localize(\n                  \"ui.dialogs.helper_settings.input_number.step\"\n                )}\n              ></paper-input>\n\n              <paper-input\n                .value=${this._unit_of_measurement}\n                .configValue=${\"unit_of_measurement\"}\n                @value-changed=${this._valueChanged}\n                .label=${this.hass!.localize(\n                  \"ui.dialogs.helper_settings.input_number.unit_of_measurement\"\n                )}\n              ></paper-input>\n            `\n          : \"\"}\n      </div>\n    `;\n  }\n\n  private _modeChanged(ev: CustomEvent) {\n    fireEvent(this, \"value-changed\", {\n      value: { ...this._item, mode: ev.detail.value },\n    });\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    if (!this.new && !this._item) {\n      return;\n    }\n    ev.stopPropagation();\n    const configValue = (ev.target as any).configValue;\n    const value = ev.detail.value;\n    if (this[`_${configValue}`] === value) {\n      return;\n    }\n    const newValue = { ...this._item };\n    if (value === undefined || value === \"\") {\n      delete newValue[configValue];\n    } else {\n      newValue[configValue] = ev.detail.value;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: newValue,\n    });\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      haStyle,\n      css`\n        .form {\n          color: var(--primary-text-color);\n        }\n        ha-paper-dropdown-menu {\n          display: block;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-input_number-form\": HaInputNumberForm;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport \"../../../../components/ha-icon-button\";\nimport \"@polymer/paper-input/paper-input\";\nimport type { PaperInputElement } from \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-item/paper-item-body\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  query,\n  TemplateResult,\n} from \"lit-element\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-icon-input\";\nimport type { InputSelect } from \"../../../../data/input_select\";\nimport { showConfirmationDialog } from \"../../../../dialogs/generic/show-dialog-box\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../../types\";\n\n@customElement(\"ha-input_select-form\")\nclass HaInputSelectForm extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public new?: boolean;\n\n  private _item?: InputSelect;\n\n  @property() private _name!: string;\n\n  @property() private _icon!: string;\n\n  @property() private _options: string[] = [];\n\n  @query(\"#option_input\") private _optionInput?: PaperInputElement;\n\n  set item(item: InputSelect) {\n    this._item = item;\n    if (item) {\n      this._name = item.name || \"\";\n      this._icon = item.icon || \"\";\n      this._options = item.options || [];\n    } else {\n      this._name = \"\";\n      this._icon = \"\";\n      this._options = [];\n    }\n  }\n\n  public focus() {\n    this.updateComplete.then(() =>\n      (this.shadowRoot?.querySelector(\n        \"[dialogInitialFocus]\"\n      ) as HTMLElement)?.focus()\n    );\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass) {\n      return html``;\n    }\n    const nameInvalid = !this._name || this._name.trim() === \"\";\n\n    return html`\n      <div class=\"form\">\n        <paper-input\n          .value=${this._name}\n          .configValue=${\"name\"}\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.name\"\n          )}\n          .errorMessage=\"${this.hass!.localize(\n            \"ui.dialogs.helper_settings.required_error_msg\"\n          )}\"\n          .invalid=${nameInvalid}\n          dialogInitialFocus\n        ></paper-input>\n        <ha-icon-input\n          .value=${this._icon}\n          .configValue=${\"icon\"}\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.icon\"\n          )}\n        ></ha-icon-input>\n        ${this.hass!.localize(\n          \"ui.dialogs.helper_settings.input_select.options\"\n        )}:\n        ${this._options.length\n          ? this._options.map((option, index) => {\n              return html`\n                <paper-item class=\"option\">\n                  <paper-item-body> ${option} </paper-item-body>\n                  <ha-icon-button\n                    .index=${index}\n                    .title=${this.hass.localize(\n                      \"ui.dialogs.helper_settings.input_select.remove_option\"\n                    )}\n                    @click=${this._removeOption}\n                    icon=\"hass:delete\"\n                  ></ha-icon-button>\n                </paper-item>\n              `;\n            })\n          : html`\n              <paper-item>\n                ${this.hass!.localize(\n                  \"ui.dialogs.helper_settings.input_select.no_options\"\n                )}\n              </paper-item>\n            `}\n        <div class=\"layout horizontal bottom\">\n          <paper-input\n            class=\"flex-auto\"\n            id=\"option_input\"\n            .label=${this.hass!.localize(\n              \"ui.dialogs.helper_settings.input_select.add_option\"\n            )}\n            @keydown=${this._handleKeyAdd}\n          ></paper-input>\n          <mwc-button @click=${this._addOption}\n            >${this.hass!.localize(\n              \"ui.dialogs.helper_settings.input_select.add\"\n            )}</mwc-button\n          >\n        </div>\n      </div>\n    `;\n  }\n\n  private _handleKeyAdd(ev: KeyboardEvent) {\n    ev.stopPropagation();\n    if (ev.keyCode !== 13) {\n      return;\n    }\n    this._addOption();\n  }\n\n  private _addOption() {\n    const input = this._optionInput;\n    if (!input || !input.value) {\n      return;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: { ...this._item, options: [...this._options, input.value] },\n    });\n    input.value = \"\";\n  }\n\n  private async _removeOption(ev: Event) {\n    const index = (ev.target as any).index;\n    if (\n      !(await showConfirmationDialog(this, {\n        title: \"Delete this item?\",\n        text: \"Are you sure you want to delete this item?\",\n      }))\n    ) {\n      return;\n    }\n    const options = [...this._options];\n    options.splice(index, 1);\n    fireEvent(this, \"value-changed\", {\n      value: { ...this._item, options },\n    });\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    if (!this.new && !this._item) {\n      return;\n    }\n    ev.stopPropagation();\n    const configValue = (ev.target as any).configValue;\n    const value = ev.detail.value;\n    if (this[`_${configValue}`] === value) {\n      return;\n    }\n    const newValue = { ...this._item };\n    if (!value) {\n      delete newValue[configValue];\n    } else {\n      newValue[configValue] = ev.detail.value;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: newValue,\n    });\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      haStyle,\n      css`\n        .form {\n          color: var(--primary-text-color);\n        }\n        .option {\n          border: 1px solid var(--divider-color);\n          border-radius: 4px;\n          margin-top: 4px;\n        }\n        mwc-button {\n          margin-left: 8px;\n        }\n        ha-paper-dropdown-menu {\n          display: block;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-input_select-form\": HaInputSelectForm;\n  }\n}\n","import \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-radio-button/paper-radio-button\";\nimport \"@polymer/paper-radio-group/paper-radio-group\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  TemplateResult,\n} from \"lit-element\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-icon-input\";\nimport { InputText } from \"../../../../data/input_text\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\n\n@customElement(\"ha-input_text-form\")\nclass HaInputTextForm extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public new?: boolean;\n\n  private _item?: InputText;\n\n  @property() private _name!: string;\n\n  @property() private _icon!: string;\n\n  @property() private _max?: number;\n\n  @property() private _min?: number;\n\n  @property() private _mode?: string;\n\n  @property() private _pattern?: string;\n\n  set item(item: InputText) {\n    this._item = item;\n    if (item) {\n      this._name = item.name || \"\";\n      this._icon = item.icon || \"\";\n      this._max = item.max || 100;\n      this._min = item.min || 0;\n      this._mode = item.mode || \"text\";\n      this._pattern = item.pattern;\n    } else {\n      this._name = \"\";\n      this._icon = \"\";\n      this._max = 100;\n      this._min = 0;\n      this._mode = \"text\";\n    }\n  }\n\n  public focus() {\n    this.updateComplete.then(() =>\n      (this.shadowRoot?.querySelector(\n        \"[dialogInitialFocus]\"\n      ) as HTMLElement)?.focus()\n    );\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass) {\n      return html``;\n    }\n    const nameInvalid = !this._name || this._name.trim() === \"\";\n\n    return html`\n      <div class=\"form\">\n        <paper-input\n          .value=${this._name}\n          .configValue=${\"name\"}\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.name\"\n          )}\n          .errorMessage=\"${this.hass!.localize(\n            \"ui.dialogs.helper_settings.required_error_msg\"\n          )}\"\n          .invalid=${nameInvalid}\n          dialogInitialFocus\n        ></paper-input>\n        <ha-icon-input\n          .value=${this._icon}\n          .configValue=${\"icon\"}\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.icon\"\n          )}\n        ></ha-icon-input>\n        ${this.hass.userData?.showAdvanced\n          ? html`\n              <paper-input\n                .value=${this._min}\n                .configValue=${\"min\"}\n                type=\"number\"\n                min=\"0\"\n                max=\"255\"\n                @value-changed=${this._valueChanged}\n                .label=${this.hass!.localize(\n                  \"ui.dialogs.helper_settings.input_text.min\"\n                )}\n              ></paper-input>\n              <paper-input\n                .value=${this._max}\n                .configValue=${\"max\"}\n                min=\"0\"\n                max=\"255\"\n                type=\"number\"\n                @value-changed=${this._valueChanged}\n                .label=${this.hass!.localize(\n                  \"ui.dialogs.helper_settings.input_text.max\"\n                )}\n              ></paper-input>\n              <div class=\"layout horizontal center justified\">\n                ${this.hass.localize(\n                  \"ui.dialogs.helper_settings.input_text.mode\"\n                )}\n                <paper-radio-group\n                  .selected=${this._mode}\n                  @selected-changed=${this._modeChanged}\n                >\n                  <paper-radio-button name=\"text\">\n                    ${this.hass.localize(\n                      \"ui.dialogs.helper_settings.input_text.text\"\n                    )}\n                  </paper-radio-button>\n                  <paper-radio-button name=\"password\">\n                    ${this.hass.localize(\n                      \"ui.dialogs.helper_settings.input_text.password\"\n                    )}\n                  </paper-radio-button>\n                </paper-radio-group>\n              </div>\n              <paper-input\n                .value=${this._pattern}\n                .configValue=${\"pattern\"}\n                @value-changed=${this._valueChanged}\n                .label=${this.hass!.localize(\n                  \"ui.dialogs.helper_settings.input_text.pattern\"\n                )}\n              ></paper-input>\n            `\n          : \"\"}\n      </div>\n    `;\n  }\n\n  private _modeChanged(ev: CustomEvent) {\n    fireEvent(this, \"value-changed\", {\n      value: { ...this._item, mode: ev.detail.value },\n    });\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    if (!this.new && !this._item) {\n      return;\n    }\n    ev.stopPropagation();\n    const configValue = (ev.target as any).configValue;\n    const value = ev.detail.value;\n    if (this[`_${configValue}`] === value) {\n      return;\n    }\n    const newValue = { ...this._item };\n    if (!value) {\n      delete newValue[configValue];\n    } else {\n      newValue[configValue] = ev.detail.value;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: newValue,\n    });\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      haStyle,\n      css`\n        .form {\n          color: var(--primary-text-color);\n        }\n        .row {\n          padding: 16px 0;\n        }\n        ha-paper-dropdown-menu {\n          display: block;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-input_text-form\": HaInputTextForm;\n  }\n}\n"],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmJA;;;;;;;;;;;;ACzEA;;;AClBA;AACA;AACA;AACA;AAGA;AAGA;;;;AAIA;AACA;AACA;AACA;;;AAQA;;;;;;;AA/DA;;;ACkDA;AACA;AACA;AACA;AAGA;AAGA;;;;AAIA;AACA;AACA;AACA;;;AAKA;;;AAGA;AACA;;;AAGA;;;AAKA;;;AAKA;;;;AASA;;;;;;;AA/FA;;;AC+DA;AACA;AACA;AACA;AAGA;AAGA;;;;AAIA;AACA;AACA;AACA;;;AAKA;AACA;;AAEA;AACA;;;AAKA;AACA;;AAEA;AACA;;AAIA;;AAGA;;AAIA;AACA;;;AAGA;;;AAKA;;;;;AAOA;AACA;;AAEA;AACA;;;;AAMA;AACA;AACA;AACA;;AAKA;;AAKA;;;;;;;AAnJA;;;ACkDA;AACA;AACA;AACA;AAGA;AAGA;;;;AAIA;AACA;AACA;AACA;;AAIA;AAGA;;AAIA;;AAEA;AACA;AAGA;;;;AAMA;;AAEA;;;;;;;AASA;AAGA;;AAEA;AACA;;;;AASA;;;;;;;;;;;;;;;AA9GA;;;ACiDA;AACA;AACA;AACA;AAGA;AAGA;;;;AAIA;AACA;AACA;AACA;;AAIA;;AAGA;AACA;;;;AAIA;AACA;;;AAKA;AACA;;;;AAIA;AACA;;;AAKA;;AAIA;AACA;;;AAGA;;;AAKA;;;;;AAOA;AACA;AACA;AACA;;AAKA;;AAKA;;;;;;;;;;AApIA","sourceRoot":""}