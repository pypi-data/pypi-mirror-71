{"version":3,"file":"chunk.d4cde5b42fd173924e11.js","sources":["webpack:///./src/components/ha-icon-button.ts","webpack:///./src/components/ha-switch.ts","webpack:///./src/components/ha-formfield.ts","webpack:///./src/components/ha-dialog.ts","webpack:///./src/panels/config/users/dialog-add-user.ts"],"sourcesContent":["import \"@material/mwc-icon-button\";\nimport {\n  customElement,\n  html,\n  TemplateResult,\n  property,\n  LitElement,\n  CSSResult,\n  css,\n} from \"lit-element\";\nimport \"./ha-icon\";\n\n@customElement(\"ha-icon-button\")\nexport class HaIconButton extends LitElement {\n  @property({ type: Boolean, reflect: true }) disabled = false;\n\n  @property({ type: String }) icon = \"\";\n\n  @property({ type: String }) label = \"\";\n\n  protected createRenderRoot() {\n    return this.attachShadow({ mode: \"open\", delegatesFocus: true });\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <mwc-icon-button .label=${this.label} .disabled=${this.disabled}>\n        <ha-icon .icon=${this.icon}></ha-icon>\n      </mwc-icon-button>\n    `;\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      :host {\n        display: inline-block;\n        outline: none;\n      }\n      :host([disabled]) {\n        pointer-events: none;\n      }\n      mwc-icon-button {\n        --mdc-theme-on-primary: currentColor;\n        --mdc-theme-text-disabled-on-light: var(--disabled-text-color);\n      }\n      ha-icon {\n        --ha-icon-display: inline;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-icon-button\": HaIconButton;\n  }\n}\n","import \"@material/mwc-switch\";\nimport type { Switch } from \"@material/mwc-switch\";\nimport { style } from \"@material/mwc-switch/mwc-switch-css\";\nimport { css, CSSResult, customElement, property } from \"lit-element\";\nimport { forwardHaptic } from \"../data/haptics\";\nimport { Constructor } from \"../types\";\n\nconst MwcSwitch = customElements.get(\"mwc-switch\") as Constructor<Switch>;\n\n@customElement(\"ha-switch\")\nexport class HaSwitch extends MwcSwitch {\n  // Generate a haptic vibration.\n  // Only set to true if the new value of the switch is applied right away when toggling.\n  // Do not add haptic when a user is required to press save.\n  @property({ type: Boolean }) public haptic = false;\n\n  protected firstUpdated() {\n    super.firstUpdated();\n    this.style.setProperty(\n      \"--mdc-theme-secondary\",\n      \"var(--switch-checked-color)\"\n    );\n    this.addEventListener(\"change\", () => {\n      if (this.haptic) {\n        forwardHaptic(\"light\");\n      }\n    });\n  }\n\n  protected static get styles(): CSSResult[] {\n    return [\n      style,\n      css`\n        .mdc-switch.mdc-switch--checked .mdc-switch__thumb {\n          background-color: var(--switch-checked-button-color);\n          border-color: var(--switch-checked-button-color);\n        }\n        .mdc-switch.mdc-switch--checked .mdc-switch__track {\n          background-color: var(--switch-checked-track-color);\n          border-color: var(--switch-checked-track-color);\n        }\n        .mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb {\n          background-color: var(--switch-unchecked-button-color);\n          border-color: var(--switch-unchecked-button-color);\n        }\n        .mdc-switch:not(.mdc-switch--checked) .mdc-switch__track {\n          background-color: var(--switch-unchecked-track-color);\n          border-color: var(--switch-unchecked-track-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-switch\": HaSwitch;\n  }\n}\n","import \"@material/mwc-formfield\";\nimport type { Formfield } from \"@material/mwc-formfield\";\nimport { style } from \"@material/mwc-formfield/mwc-formfield-css\";\nimport { css, CSSResult, customElement } from \"lit-element\";\nimport { Constructor } from \"../types\";\n\nconst MwcFormfield = customElements.get(\"mwc-formfield\") as Constructor<\n  Formfield\n>;\n\n@customElement(\"ha-formfield\")\nexport class HaFormfield extends MwcFormfield {\n  protected static get styles(): CSSResult[] {\n    return [\n      style,\n      css`\n        ::slotted(ha-switch) {\n          margin-right: 10px;\n        }\n        [dir=\"rtl\"] ::slotted(ha-switch),\n        ::slotted(ha-switch)[dir=\"rtl\"] {\n          margin-left: 10px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-formfield\": HaFormfield;\n  }\n}\n","import \"@material/mwc-dialog\";\nimport type { Dialog } from \"@material/mwc-dialog\";\nimport { style } from \"@material/mwc-dialog/mwc-dialog-css\";\nimport \"./ha-icon-button\";\nimport { css, CSSResult, customElement, html } from \"lit-element\";\nimport type { Constructor, HomeAssistant } from \"../types\";\nimport { mdiClose } from \"@mdi/js\";\n\nconst MwcDialog = customElements.get(\"mwc-dialog\") as Constructor<Dialog>;\n\nexport const createCloseHeading = (hass: HomeAssistant, title: string) => html`\n  ${title}\n  <mwc-icon-button\n    aria-label=${hass.localize(\"ui.dialogs.generic.close\")}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  >\n    <ha-svg-icon path=${mdiClose}></ha-svg-icon>\n  </mwc-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends MwcDialog {\n  protected static get styles(): CSSResult[] {\n    return [\n      style,\n      css`\n        .mdc-dialog {\n          z-index: var(--dialog-z-index, 7);\n        }\n        .mdc-dialog__actions {\n          justify-content: var(--justify-action-buttons, flex-end);\n        }\n        .mdc-dialog__container {\n          align-items: var(--vertial-align-dialog, center);\n        }\n        .mdc-dialog__title::before {\n          display: block;\n          height: 20px;\n        }\n        .mdc-dialog__content {\n          padding: var(--dialog-content-padding, 20px 24px);\n        }\n        .header_button {\n          position: absolute;\n          right: 16px;\n          top: 12px;\n          text-decoration: none;\n          color: inherit;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-spinner/paper-spinner\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  PropertyValues,\n  TemplateResult,\n} from \"lit-element\";\nimport \"../../../components/ha-dialog\";\nimport \"../../../components/ha-switch\";\nimport \"../../../components/ha-formfield\";\nimport { createAuthForUser } from \"../../../data/auth\";\nimport {\n  createUser,\n  deleteUser,\n  SYSTEM_GROUP_ID_ADMIN,\n  SYSTEM_GROUP_ID_USER,\n  User,\n} from \"../../../data/user\";\nimport { PolymerChangedEvent } from \"../../../polymer-types\";\nimport { haStyleDialog } from \"../../../resources/styles\";\nimport { HomeAssistant } from \"../../../types\";\nimport { AddUserDialogParams } from \"./show-dialog-add-user\";\n\n@customElement(\"dialog-add-user\")\nexport class DialogAddUser extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() private _loading = false;\n\n  // Error message when can't talk to server etc\n  @property() private _error?: string;\n\n  @property() private _params?: AddUserDialogParams;\n\n  @property() private _name?: string;\n\n  @property() private _username?: string;\n\n  @property() private _password?: string;\n\n  @property() private _isAdmin?: boolean;\n\n  public showDialog(params: AddUserDialogParams) {\n    this._params = params;\n    this._name = \"\";\n    this._username = \"\";\n    this._password = \"\";\n    this._isAdmin = false;\n    this._error = undefined;\n    this._loading = false;\n  }\n\n  protected firstUpdated(changedProperties: PropertyValues) {\n    super.firstUpdated(changedProperties);\n    this.addEventListener(\"keypress\", (ev) => {\n      if (ev.keyCode === 13) {\n        this._createUser(ev);\n      }\n    });\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n    return html`\n      <ha-dialog\n        open\n        @closing=${this._close}\n        scrimClickAction\n        escapeKeyAction\n        .heading=${this.hass.localize(\"ui.panel.config.users.add_user.caption\")}\n      >\n        <div>\n          ${this._error ? html` <div class=\"error\">${this._error}</div> ` : \"\"}\n          <paper-input\n            class=\"name\"\n            .label=${this.hass.localize(\"ui.panel.config.users.add_user.name\")}\n            .value=${this._name}\n            required\n            auto-validate\n            autocapitalize=\"on\"\n            .errorMessage=${this.hass.localize(\"ui.common.error_required\")}\n            @value-changed=${this._nameChanged}\n            @blur=${this._maybePopulateUsername}\n          ></paper-input>\n          <paper-input\n            class=\"username\"\n            .label=${this.hass.localize(\n              \"ui.panel.config.users.add_user.username\"\n            )}\n            .value=${this._username}\n            required\n            auto-validate\n            autocapitalize=\"none\"\n            @value-changed=${this._usernameChanged}\n            .errorMessage=${this.hass.localize(\"ui.common.error_required\")}\n          ></paper-input>\n          <paper-input\n            .label=${this.hass.localize(\n              \"ui.panel.config.users.add_user.password\"\n            )}\n            type=\"password\"\n            .value=${this._password}\n            required\n            auto-validate\n            @value-changed=${this._passwordChanged}\n            .errorMessage=${this.hass.localize(\"ui.common.error_required\")}\n          ></paper-input>\n          <ha-formfield\n            .label=${this.hass.localize(\"ui.panel.config.users.editor.admin\")}\n          >\n            <ha-switch .checked=${this._isAdmin} @change=${this._adminChanged}>\n            </ha-switch>\n          </ha-formfield>\n          ${!this._isAdmin\n            ? html`\n                <br />\n                ${this.hass.localize(\n                  \"ui.panel.config.users.users_privileges_note\"\n                )}\n              `\n            : \"\"}\n        </div>\n        <mwc-button\n          slot=\"secondaryAction\"\n          @click=\"${this._close}\"\n          .disabled=${this._loading}\n        >\n          ${this.hass!.localize(\"ui.common.cancel\")}\n        </mwc-button>\n        ${this._loading\n          ? html`\n              <div slot=\"primaryAction\" class=\"submit-spinner\">\n                <paper-spinner active></paper-spinner>\n              </div>\n            `\n          : html`\n              <mwc-button\n                slot=\"primaryAction\"\n                .disabled=${!this._name || !this._username || !this._password}\n                @click=${this._createUser}\n              >\n                ${this.hass.localize(\"ui.panel.config.users.add_user.create\")}\n              </mwc-button>\n            `}\n      </ha-dialog>\n    `;\n  }\n\n  private _close() {\n    this._params = undefined;\n  }\n\n  private _maybePopulateUsername() {\n    if (this._username || !this._name) {\n      return;\n    }\n\n    const parts = this._name.split(\" \");\n\n    if (parts.length) {\n      this._username = parts[0].toLowerCase();\n    }\n  }\n\n  private _nameChanged(ev: PolymerChangedEvent<string>) {\n    this._error = undefined;\n    this._name = ev.detail.value;\n  }\n\n  private _usernameChanged(ev: PolymerChangedEvent<string>) {\n    this._error = undefined;\n    this._username = ev.detail.value;\n  }\n\n  private _passwordChanged(ev: PolymerChangedEvent<string>) {\n    this._error = undefined;\n    this._password = ev.detail.value;\n  }\n\n  private async _adminChanged(ev): Promise<void> {\n    this._isAdmin = ev.target.checked;\n  }\n\n  private async _createUser(ev) {\n    ev.preventDefault();\n    if (!this._name || !this._username || !this._password) {\n      return;\n    }\n\n    this._loading = true;\n    this._error = \"\";\n\n    let user: User;\n    try {\n      const userResponse = await createUser(this.hass, this._name, [\n        this._isAdmin ? SYSTEM_GROUP_ID_ADMIN : SYSTEM_GROUP_ID_USER,\n      ]);\n      user = userResponse.user;\n    } catch (err) {\n      this._loading = false;\n      this._error = err.code;\n      return;\n    }\n\n    try {\n      await createAuthForUser(\n        this.hass,\n        user.id,\n        this._username,\n        this._password\n      );\n    } catch (err) {\n      await deleteUser(this.hass, user.id);\n      this._loading = false;\n      this._error = err.code;\n      return;\n    }\n\n    this._params!.userAddedCallback(user);\n    this._close();\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      haStyleDialog,\n      css`\n        ha-dialog {\n          --mdc-dialog-max-width: 500px;\n        }\n        ha-switch {\n          margin-top: 8px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-add-user\": DialogAddUser;\n  }\n}\n"],"mappings":"AAaA;AAaA;AACA;;AAdA;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;ACHA;;;;;;;;ACCA;ACAA;;AAEA;;;;AAIA;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;ACoDA;;;AAGA;;;AAGA;;;AAGA;AACA;;;;AAIA;AACA;AACA;;;;AAIA;AAGA;;;;AAIA;AACA;;;AAGA;;AAIA;;;AAGA;AACA;;;AAGA;;AAEA;;;AAGA;;AAGA;;;;;AAQA;AACA;;AAEA;;AAEA;;;;AAMA;;;AAGA;AACA;;AAEA;;;;AAhFA;;;;;;;AAvCA","sourceRoot":""}