{"version":3,"file":"chunk.8fbabddbd290feeaaf06.js","sources":["webpack:///./src/dialogs/generic/show-dialog-box.ts","webpack:///./src/panels/config/devices/device-detail/integration-elements/mqtt/ha-device-actions-mqtt.ts"],"sourcesContent":["import { TemplateResult } from \"lit-html\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\n\ninterface BaseDialogParams {\n  confirmText?: string;\n  text?: string | TemplateResult;\n  title?: string;\n}\n\nexport interface AlertDialogParams extends BaseDialogParams {\n  confirm?: () => void;\n}\n\nexport interface ConfirmationDialogParams extends BaseDialogParams {\n  dismissText?: string;\n  confirm?: () => void;\n  cancel?: () => void;\n}\n\nexport interface PromptDialogParams extends BaseDialogParams {\n  inputLabel?: string;\n  inputType?: string;\n  defaultValue?: string;\n  confirm?: (out?: string) => void;\n}\n\nexport interface DialogParams\n  extends ConfirmationDialogParams,\n    PromptDialogParams {\n  confirm?: (out?: string) => void;\n  confirmation?: boolean;\n  prompt?: boolean;\n}\n\nexport const loadGenericDialog = () =>\n  import(/* webpackChunkName: \"confirmation\" */ \"./dialog-box\");\n\nconst showDialogHelper = (\n  element: HTMLElement,\n  dialogParams: DialogParams,\n  extra?: {\n    confirmation?: DialogParams[\"confirmation\"];\n    prompt?: DialogParams[\"prompt\"];\n  }\n) =>\n  new Promise((resolve) => {\n    const origCancel = dialogParams.cancel;\n    const origConfirm = dialogParams.confirm;\n\n    fireEvent(element, \"show-dialog\", {\n      dialogTag: \"dialog-box\",\n      dialogImport: loadGenericDialog,\n      dialogParams: {\n        ...dialogParams,\n        ...extra,\n        cancel: () => {\n          resolve(extra?.prompt ? null : false);\n          if (origCancel) {\n            origCancel();\n          }\n        },\n        confirm: (out) => {\n          resolve(extra?.prompt ? out : true);\n          if (origConfirm) {\n            origConfirm(out);\n          }\n        },\n      },\n    });\n  });\n\nexport const showAlertDialog = (\n  element: HTMLElement,\n  dialogParams: AlertDialogParams\n) => showDialogHelper(element, dialogParams);\n\nexport const showConfirmationDialog = (\n  element: HTMLElement,\n  dialogParams: ConfirmationDialogParams\n) =>\n  showDialogHelper(element, dialogParams, { confirmation: true }) as Promise<\n    boolean\n  >;\n\nexport const showPromptDialog = (\n  element: HTMLElement,\n  dialogParams: PromptDialogParams\n) =>\n  showDialogHelper(element, dialogParams, { prompt: true }) as Promise<\n    null | string\n  >;\n","import {\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  TemplateResult,\n  css,\n} from \"lit-element\";\nimport { DeviceRegistryEntry } from \"../../../../../../data/device_registry\";\nimport { removeMQTTDeviceEntry } from \"../../../../../../data/mqtt\";\nimport { showConfirmationDialog } from \"../../../../../../dialogs/generic/show-dialog-box\";\nimport { showMQTTDeviceDebugInfoDialog } from \"./show-dialog-mqtt-device-debug-info\";\nimport { haStyle } from \"../../../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../../../types\";\n\n@customElement(\"ha-device-actions-mqtt\")\nexport class HaDeviceActionsMqtt extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public device!: DeviceRegistryEntry;\n\n  protected render(): TemplateResult {\n    return html`\n      <mwc-button @click=${this._showDebugInfo}>\n        MQTT Info\n      </mwc-button>\n      <mwc-button class=\"warning\" @click=\"${this._confirmDeleteEntry}\">\n        ${this.hass.localize(\"ui.panel.config.devices.delete\")}\n      </mwc-button>\n    `;\n  }\n\n  private async _confirmDeleteEntry(): Promise<void> {\n    const confirmed = await showConfirmationDialog(this, {\n      text: this.hass.localize(\"ui.panel.config.devices.confirm_delete\"),\n    });\n\n    if (!confirmed) {\n      return;\n    }\n\n    await removeMQTTDeviceEntry(this.hass!, this.device.id);\n  }\n\n  private async _showDebugInfo(): Promise<void> {\n    const device = this.device;\n    await showMQTTDeviceDebugInfoDialog(this, { device });\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      haStyle,\n      css`\n        :host {\n          display: flex;\n          justify-content: space-between;\n        }\n      `,\n    ];\n  }\n}\n"],"mappings":"AACA;ACuBA;;;AAGA;AACA;;AAXA;;;;;AAAA","sourceRoot":""}