# coding: utf-8

"""
    Bleumi Pay REST API

    A simple and powerful REST API to integrate ERC-20, Ethereum, xDai, Algorand payments and/or payouts into your business or application  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: info@bleumi.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class PaymentOperationInputs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'addr': 'str',
        'amount': 'str',
        'token': 'str',
        'token_amount': 'str',
        'token_decimals': 'int'
    }

    attribute_map = {
        'addr': 'addr',
        'amount': 'amount',
        'token': 'token',
        'token_amount': 'token_amount',
        'token_decimals': 'token_decimals'
    }

    def __init__(self, addr=None, amount=None, token=None, token_amount=None, token_decimals=None):  # noqa: E501
        """PaymentOperationInputs - a model defined in Swagger"""  # noqa: E501
        self._addr = None
        self._amount = None
        self._token = None
        self._token_amount = None
        self._token_decimals = None
        self.discriminator = None
        self.addr = addr
        self.amount = amount
        self.token = token
        self.token_amount = token_amount
        self.token_decimals = token_decimals

    @property
    def addr(self):
        """Gets the addr of this PaymentOperationInputs.  # noqa: E501

        Address of the wallet  # noqa: E501

        :return: The addr of this PaymentOperationInputs.  # noqa: E501
        :rtype: str
        """
        return self._addr

    @addr.setter
    def addr(self, addr):
        """Sets the addr of this PaymentOperationInputs.

        Address of the wallet  # noqa: E501

        :param addr: The addr of this PaymentOperationInputs.  # noqa: E501
        :type: str
        """
        if addr is None:
            raise ValueError("Invalid value for `addr`, must not be `None`")  # noqa: E501

        self._addr = addr

    @property
    def amount(self):
        """Gets the amount of this PaymentOperationInputs.  # noqa: E501

        Amount (Only for settle operation)  # noqa: E501

        :return: The amount of this PaymentOperationInputs.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PaymentOperationInputs.

        Amount (Only for settle operation)  # noqa: E501

        :param amount: The amount of this PaymentOperationInputs.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def token(self):
        """Gets the token of this PaymentOperationInputs.  # noqa: E501

        ETH - for Ethereum ; XDAI - for xDai ; XDAIT - for xDai Testnet ; ALGO - Algo; <asset id> - for Algorand Standard Asset; <contract address of ERC-20 token> - for ERC-20 Tokens;  # noqa: E501

        :return: The token of this PaymentOperationInputs.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this PaymentOperationInputs.

        ETH - for Ethereum ; XDAI - for xDai ; XDAIT - for xDai Testnet ; ALGO - Algo; <asset id> - for Algorand Standard Asset; <contract address of ERC-20 token> - for ERC-20 Tokens;  # noqa: E501

        :param token: The token of this PaymentOperationInputs.  # noqa: E501
        :type: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")  # noqa: E501

        self._token = token

    @property
    def token_amount(self):
        """Gets the token_amount of this PaymentOperationInputs.  # noqa: E501

        Token amount to be settled in network format (Only for settle operation)  # noqa: E501

        :return: The token_amount of this PaymentOperationInputs.  # noqa: E501
        :rtype: str
        """
        return self._token_amount

    @token_amount.setter
    def token_amount(self, token_amount):
        """Sets the token_amount of this PaymentOperationInputs.

        Token amount to be settled in network format (Only for settle operation)  # noqa: E501

        :param token_amount: The token_amount of this PaymentOperationInputs.  # noqa: E501
        :type: str
        """

        self._token_amount = token_amount

    @property
    def token_decimals(self):
        """Gets the token_decimals of this PaymentOperationInputs.  # noqa: E501

        Token decimal places (Only for settle operation)  # noqa: E501

        :return: The token_decimals of this PaymentOperationInputs.  # noqa: E501
        :rtype: int
        """
        return self._token_decimals

    @token_decimals.setter
    def token_decimals(self, token_decimals):
        """Sets the token_decimals of this PaymentOperationInputs.

        Token decimal places (Only for settle operation)  # noqa: E501

        :param token_decimals: The token_decimals of this PaymentOperationInputs.  # noqa: E501
        :type: int
        """

        self._token_decimals = token_decimals

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentOperationInputs, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentOperationInputs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
