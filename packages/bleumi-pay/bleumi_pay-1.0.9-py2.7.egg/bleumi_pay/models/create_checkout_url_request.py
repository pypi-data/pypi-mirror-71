# coding: utf-8

"""
    Bleumi Pay REST API

    A simple and powerful REST API to integrate ERC-20, Ethereum, xDai, Algorand payments and/or payouts into your business or application  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: info@bleumi.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CreateCheckoutUrlRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'currency': 'str',
        'amount': 'str',
        'cancel_url': 'str',
        'success_url': 'str',
        'transfer_address': 'str',
        'chain': 'str',
        'token': 'str',
        'base64_transform': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'currency': 'currency',
        'amount': 'amount',
        'cancel_url': 'cancelUrl',
        'success_url': 'successUrl',
        'transfer_address': 'transferAddress',
        'chain': 'chain',
        'token': 'token',
        'base64_transform': 'base64Transform'
    }

    def __init__(self, id=None, currency=None, amount=None, cancel_url=None, success_url=None, transfer_address=None, chain=None, token=None, base64_transform=None):  # noqa: E501
        """CreateCheckoutUrlRequest - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._currency = None
        self._amount = None
        self._cancel_url = None
        self._success_url = None
        self._transfer_address = None
        self._chain = None
        self._token = None
        self._base64_transform = None
        self.discriminator = None
        self.id = id
        self.currency = currency
        self.amount = amount
        self.cancel_url = cancel_url
        self.success_url = success_url
        if transfer_address is not None:
            self.transfer_address = transfer_address
        if chain is not None:
            self.chain = chain
        if token is not None:
            self.token = token
        if base64_transform is not None:
            self.base64_transform = base64_transform

    @property
    def id(self):
        """Gets the id of this CreateCheckoutUrlRequest.  # noqa: E501

        Unique identifier for this payment.  # noqa: E501

        :return: The id of this CreateCheckoutUrlRequest.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CreateCheckoutUrlRequest.

        Unique identifier for this payment.  # noqa: E501

        :param id: The id of this CreateCheckoutUrlRequest.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def currency(self):
        """Gets the currency of this CreateCheckoutUrlRequest.  # noqa: E501

        Currency Code  # noqa: E501

        :return: The currency of this CreateCheckoutUrlRequest.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CreateCheckoutUrlRequest.

        Currency Code  # noqa: E501

        :param currency: The currency of this CreateCheckoutUrlRequest.  # noqa: E501
        :type: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def amount(self):
        """Gets the amount of this CreateCheckoutUrlRequest.  # noqa: E501

        Set the token which must be used by the buyer for this payment.  # noqa: E501

        :return: The amount of this CreateCheckoutUrlRequest.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CreateCheckoutUrlRequest.

        Set the token which must be used by the buyer for this payment.  # noqa: E501

        :param amount: The amount of this CreateCheckoutUrlRequest.  # noqa: E501
        :type: str
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def cancel_url(self):
        """Gets the cancel_url of this CreateCheckoutUrlRequest.  # noqa: E501

        Buyer will be redirected to this URL upon canceling the payment.  # noqa: E501

        :return: The cancel_url of this CreateCheckoutUrlRequest.  # noqa: E501
        :rtype: str
        """
        return self._cancel_url

    @cancel_url.setter
    def cancel_url(self, cancel_url):
        """Sets the cancel_url of this CreateCheckoutUrlRequest.

        Buyer will be redirected to this URL upon canceling the payment.  # noqa: E501

        :param cancel_url: The cancel_url of this CreateCheckoutUrlRequest.  # noqa: E501
        :type: str
        """
        if cancel_url is None:
            raise ValueError("Invalid value for `cancel_url`, must not be `None`")  # noqa: E501

        self._cancel_url = cancel_url

    @property
    def success_url(self):
        """Gets the success_url of this CreateCheckoutUrlRequest.  # noqa: E501

        Buyer will be redirected to this URL upon successfully completing the payment.  # noqa: E501

        :return: The success_url of this CreateCheckoutUrlRequest.  # noqa: E501
        :rtype: str
        """
        return self._success_url

    @success_url.setter
    def success_url(self, success_url):
        """Sets the success_url of this CreateCheckoutUrlRequest.

        Buyer will be redirected to this URL upon successfully completing the payment.  # noqa: E501

        :param success_url: The success_url of this CreateCheckoutUrlRequest.  # noqa: E501
        :type: str
        """
        if success_url is None:
            raise ValueError("Invalid value for `success_url`, must not be `None`")  # noqa: E501

        self._success_url = success_url

    @property
    def transfer_address(self):
        """Gets the transfer_address of this CreateCheckoutUrlRequest.  # noqa: E501

        Payment transfer address (only used in case of Marketplace payments). Use this field to override the token's settlement address specified in the Bleumi Pay Dashboard for the payment.  # noqa: E501

        :return: The transfer_address of this CreateCheckoutUrlRequest.  # noqa: E501
        :rtype: str
        """
        return self._transfer_address

    @transfer_address.setter
    def transfer_address(self, transfer_address):
        """Sets the transfer_address of this CreateCheckoutUrlRequest.

        Payment transfer address (only used in case of Marketplace payments). Use this field to override the token's settlement address specified in the Bleumi Pay Dashboard for the payment.  # noqa: E501

        :param transfer_address: The transfer_address of this CreateCheckoutUrlRequest.  # noqa: E501
        :type: str
        """

        self._transfer_address = transfer_address

    @property
    def chain(self):
        """Gets the chain of this CreateCheckoutUrlRequest.  # noqa: E501

        (Required if specifying 'token') Network in which the hosted checkout is to be created. Please refer to the Supported Networks.  # noqa: E501

        :return: The chain of this CreateCheckoutUrlRequest.  # noqa: E501
        :rtype: str
        """
        return self._chain

    @chain.setter
    def chain(self, chain):
        """Sets the chain of this CreateCheckoutUrlRequest.

        (Required if specifying 'token') Network in which the hosted checkout is to be created. Please refer to the Supported Networks.  # noqa: E501

        :param chain: The chain of this CreateCheckoutUrlRequest.  # noqa: E501
        :type: str
        """

        self._chain = chain

    @property
    def token(self):
        """Gets the token of this CreateCheckoutUrlRequest.  # noqa: E501

        ETH - for Ethereum ; XDAI - for xDai ; XDAIT - for xDai Testnet ; ALGO - Algo; <asset id> - for Algorand Standard Asset; <contract address of ERC-20 token> - for ERC-20 Tokens;  # noqa: E501

        :return: The token of this CreateCheckoutUrlRequest.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this CreateCheckoutUrlRequest.

        ETH - for Ethereum ; XDAI - for xDai ; XDAIT - for xDai Testnet ; ALGO - Algo; <asset id> - for Algorand Standard Asset; <contract address of ERC-20 token> - for ERC-20 Tokens;  # noqa: E501

        :param token: The token of this CreateCheckoutUrlRequest.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def base64_transform(self):
        """Gets the base64_transform of this CreateCheckoutUrlRequest.  # noqa: E501

        Base64 encode hmac_input GET parameter passed to the successUrl  # noqa: E501

        :return: The base64_transform of this CreateCheckoutUrlRequest.  # noqa: E501
        :rtype: bool
        """
        return self._base64_transform

    @base64_transform.setter
    def base64_transform(self, base64_transform):
        """Sets the base64_transform of this CreateCheckoutUrlRequest.

        Base64 encode hmac_input GET parameter passed to the successUrl  # noqa: E501

        :param base64_transform: The base64_transform of this CreateCheckoutUrlRequest.  # noqa: E501
        :type: bool
        """

        self._base64_transform = base64_transform

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateCheckoutUrlRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateCheckoutUrlRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
