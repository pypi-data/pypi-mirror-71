# coding: utf-8

"""
    Bleumi Pay REST API

    A simple and powerful REST API to integrate ERC-20, Ethereum, xDai, Algorand payments and/or payouts into your business or application  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: info@bleumi.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from bleumi_pay.models.wallet_balance import WalletBalance  # noqa: F401,E501


class EthereumBalance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mainnet': 'dict(str, WalletBalance)',
        'goerli': 'dict(str, WalletBalance)',
        'xdai': 'dict(str, WalletBalance)',
        'xdai_testnet': 'dict(str, WalletBalance)'
    }

    attribute_map = {
        'mainnet': 'mainnet',
        'goerli': 'goerli',
        'xdai': 'xdai',
        'xdai_testnet': 'xdai_testnet'
    }

    def __init__(self, mainnet=None, goerli=None, xdai=None, xdai_testnet=None):  # noqa: E501
        """EthereumBalance - a model defined in Swagger"""  # noqa: E501
        self._mainnet = None
        self._goerli = None
        self._xdai = None
        self._xdai_testnet = None
        self.discriminator = None
        if mainnet is not None:
            self.mainnet = mainnet
        if goerli is not None:
            self.goerli = goerli
        if xdai is not None:
            self.xdai = xdai
        if xdai_testnet is not None:
            self.xdai_testnet = xdai_testnet

    @property
    def mainnet(self):
        """Gets the mainnet of this EthereumBalance.  # noqa: E501


        :return: The mainnet of this EthereumBalance.  # noqa: E501
        :rtype: dict(str, WalletBalance)
        """
        return self._mainnet

    @mainnet.setter
    def mainnet(self, mainnet):
        """Sets the mainnet of this EthereumBalance.


        :param mainnet: The mainnet of this EthereumBalance.  # noqa: E501
        :type: dict(str, WalletBalance)
        """

        self._mainnet = mainnet

    @property
    def goerli(self):
        """Gets the goerli of this EthereumBalance.  # noqa: E501


        :return: The goerli of this EthereumBalance.  # noqa: E501
        :rtype: dict(str, WalletBalance)
        """
        return self._goerli

    @goerli.setter
    def goerli(self, goerli):
        """Sets the goerli of this EthereumBalance.


        :param goerli: The goerli of this EthereumBalance.  # noqa: E501
        :type: dict(str, WalletBalance)
        """

        self._goerli = goerli

    @property
    def xdai(self):
        """Gets the xdai of this EthereumBalance.  # noqa: E501


        :return: The xdai of this EthereumBalance.  # noqa: E501
        :rtype: dict(str, WalletBalance)
        """
        return self._xdai

    @xdai.setter
    def xdai(self, xdai):
        """Sets the xdai of this EthereumBalance.


        :param xdai: The xdai of this EthereumBalance.  # noqa: E501
        :type: dict(str, WalletBalance)
        """

        self._xdai = xdai

    @property
    def xdai_testnet(self):
        """Gets the xdai_testnet of this EthereumBalance.  # noqa: E501


        :return: The xdai_testnet of this EthereumBalance.  # noqa: E501
        :rtype: dict(str, WalletBalance)
        """
        return self._xdai_testnet

    @xdai_testnet.setter
    def xdai_testnet(self, xdai_testnet):
        """Sets the xdai_testnet of this EthereumBalance.


        :param xdai_testnet: The xdai_testnet of this EthereumBalance.  # noqa: E501
        :type: dict(str, WalletBalance)
        """

        self._xdai_testnet = xdai_testnet

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EthereumBalance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EthereumBalance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
