# coding: utf-8

"""
    Bleumi Pay REST API

    A simple and powerful REST API to integrate ERC-20, Ethereum, xDai, Algorand payments and/or payouts into your business or application  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: info@bleumi.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class WalletBalance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'balance': 'str',
        'token_balance': 'str',
        'token_decimals': 'int',
        'block_num': 'str',
        'safety': 'str'
    }

    attribute_map = {
        'balance': 'balance',
        'token_balance': 'token_balance',
        'token_decimals': 'token_decimals',
        'block_num': 'blockNum',
        'safety': 'safety'
    }

    def __init__(self, balance=None, token_balance=None, token_decimals=None, block_num=None, safety=None):  # noqa: E501
        """WalletBalance - a model defined in Swagger"""  # noqa: E501
        self._balance = None
        self._token_balance = None
        self._token_decimals = None
        self._block_num = None
        self._safety = None
        self.discriminator = None
        self.balance = balance
        self.token_balance = token_balance
        self.token_decimals = token_decimals
        self.block_num = block_num
        self.safety = safety

    @property
    def balance(self):
        """Gets the balance of this WalletBalance.  # noqa: E501

        Token balance for the wallet  # noqa: E501

        :return: The balance of this WalletBalance.  # noqa: E501
        :rtype: str
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this WalletBalance.

        Token balance for the wallet  # noqa: E501

        :param balance: The balance of this WalletBalance.  # noqa: E501
        :type: str
        """
        if balance is None:
            raise ValueError("Invalid value for `balance`, must not be `None`")  # noqa: E501

        self._balance = balance

    @property
    def token_balance(self):
        """Gets the token_balance of this WalletBalance.  # noqa: E501

        Token balance for the wallet in Ethereum format  # noqa: E501

        :return: The token_balance of this WalletBalance.  # noqa: E501
        :rtype: str
        """
        return self._token_balance

    @token_balance.setter
    def token_balance(self, token_balance):
        """Sets the token_balance of this WalletBalance.

        Token balance for the wallet in Ethereum format  # noqa: E501

        :param token_balance: The token_balance of this WalletBalance.  # noqa: E501
        :type: str
        """
        if token_balance is None:
            raise ValueError("Invalid value for `token_balance`, must not be `None`")  # noqa: E501

        self._token_balance = token_balance

    @property
    def token_decimals(self):
        """Gets the token_decimals of this WalletBalance.  # noqa: E501

        Token decimal places  # noqa: E501

        :return: The token_decimals of this WalletBalance.  # noqa: E501
        :rtype: int
        """
        return self._token_decimals

    @token_decimals.setter
    def token_decimals(self, token_decimals):
        """Sets the token_decimals of this WalletBalance.

        Token decimal places  # noqa: E501

        :param token_decimals: The token_decimals of this WalletBalance.  # noqa: E501
        :type: int
        """
        if token_decimals is None:
            raise ValueError("Invalid value for `token_decimals`, must not be `None`")  # noqa: E501

        self._token_decimals = token_decimals

    @property
    def block_num(self):
        """Gets the block_num of this WalletBalance.  # noqa: E501

        Block in which the balance was last updated  # noqa: E501

        :return: The block_num of this WalletBalance.  # noqa: E501
        :rtype: str
        """
        return self._block_num

    @block_num.setter
    def block_num(self, block_num):
        """Sets the block_num of this WalletBalance.

        Block in which the balance was last updated  # noqa: E501

        :param block_num: The block_num of this WalletBalance.  # noqa: E501
        :type: str
        """
        if block_num is None:
            raise ValueError("Invalid value for `block_num`, must not be `None`")  # noqa: E501

        self._block_num = block_num

    @property
    def safety(self):
        """Gets the safety of this WalletBalance.  # noqa: E501

        Safety level indicator  # noqa: E501

        :return: The safety of this WalletBalance.  # noqa: E501
        :rtype: str
        """
        return self._safety

    @safety.setter
    def safety(self, safety):
        """Sets the safety of this WalletBalance.

        Safety level indicator  # noqa: E501

        :param safety: The safety of this WalletBalance.  # noqa: E501
        :type: str
        """
        if safety is None:
            raise ValueError("Invalid value for `safety`, must not be `None`")  # noqa: E501

        self._safety = safety

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WalletBalance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WalletBalance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
