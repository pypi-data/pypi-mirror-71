# coding: utf-8

"""
    Bleumi Pay REST API

    A simple and powerful REST API to integrate ERC-20, Ethereum, xDai, Algorand payments and/or payouts into your business or application  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: info@bleumi.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from bleumi_pay.models.wallet_balance import WalletBalance  # noqa: F401,E501


class RskBalance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rsk': 'dict(str, WalletBalance)',
        'rsk_testnet': 'dict(str, WalletBalance)'
    }

    attribute_map = {
        'rsk': 'rsk',
        'rsk_testnet': 'rsk_testnet'
    }

    def __init__(self, rsk=None, rsk_testnet=None):  # noqa: E501
        """RskBalance - a model defined in Swagger"""  # noqa: E501
        self._rsk = None
        self._rsk_testnet = None
        self.discriminator = None
        if rsk is not None:
            self.rsk = rsk
        if rsk_testnet is not None:
            self.rsk_testnet = rsk_testnet

    @property
    def rsk(self):
        """Gets the rsk of this RskBalance.  # noqa: E501


        :return: The rsk of this RskBalance.  # noqa: E501
        :rtype: dict(str, WalletBalance)
        """
        return self._rsk

    @rsk.setter
    def rsk(self, rsk):
        """Sets the rsk of this RskBalance.


        :param rsk: The rsk of this RskBalance.  # noqa: E501
        :type: dict(str, WalletBalance)
        """

        self._rsk = rsk

    @property
    def rsk_testnet(self):
        """Gets the rsk_testnet of this RskBalance.  # noqa: E501


        :return: The rsk_testnet of this RskBalance.  # noqa: E501
        :rtype: dict(str, WalletBalance)
        """
        return self._rsk_testnet

    @rsk_testnet.setter
    def rsk_testnet(self, rsk_testnet):
        """Sets the rsk_testnet of this RskBalance.


        :param rsk_testnet: The rsk_testnet of this RskBalance.  # noqa: E501
        :type: dict(str, WalletBalance)
        """

        self._rsk_testnet = rsk_testnet

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RskBalance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RskBalance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
