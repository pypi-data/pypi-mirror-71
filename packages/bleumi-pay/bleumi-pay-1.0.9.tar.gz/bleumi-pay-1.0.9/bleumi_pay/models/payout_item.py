# coding: utf-8

"""
    Bleumi Pay REST API

    A simple and powerful REST API to integrate ERC-20, Ethereum, xDai, Algorand payments and/or payouts into your business or application  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: info@bleumi.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from bleumi_pay.models.payout_item_inputs import PayoutItemInputs  # noqa: F401,E501


class PayoutItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'txid': 'str',
        'status': 'bool',
        'hash': 'str',
        'created_at': 'int',
        'updated_at': 'int',
        'inputs': 'PayoutItemInputs'
    }

    attribute_map = {
        'txid': 'txid',
        'status': 'status',
        'hash': 'hash',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'inputs': 'inputs'
    }

    def __init__(self, txid=None, status=None, hash=None, created_at=None, updated_at=None, inputs=None):  # noqa: E501
        """PayoutItem - a model defined in Swagger"""  # noqa: E501
        self._txid = None
        self._status = None
        self._hash = None
        self._created_at = None
        self._updated_at = None
        self._inputs = None
        self.discriminator = None
        self.txid = txid
        self.status = status
        self.hash = hash
        self.created_at = created_at
        self.updated_at = updated_at
        self.inputs = inputs

    @property
    def txid(self):
        """Gets the txid of this PayoutItem.  # noqa: E501

        Unique identifier for this payout  # noqa: E501

        :return: The txid of this PayoutItem.  # noqa: E501
        :rtype: str
        """
        return self._txid

    @txid.setter
    def txid(self, txid):
        """Sets the txid of this PayoutItem.

        Unique identifier for this payout  # noqa: E501

        :param txid: The txid of this PayoutItem.  # noqa: E501
        :type: str
        """
        if txid is None:
            raise ValueError("Invalid value for `txid`, must not be `None`")  # noqa: E501

        self._txid = txid

    @property
    def status(self):
        """Gets the status of this PayoutItem.  # noqa: E501

        null- Operation in progress ; true - Operation confirmed by network; false - Operation rejected by network;  # noqa: E501

        :return: The status of this PayoutItem.  # noqa: E501
        :rtype: bool
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PayoutItem.

        null- Operation in progress ; true - Operation confirmed by network; false - Operation rejected by network;  # noqa: E501

        :param status: The status of this PayoutItem.  # noqa: E501
        :type: bool
        """
        self._status = status

    @property
    def hash(self):
        """Gets the hash of this PayoutItem.  # noqa: E501

        Transaction hash of the operation submitted to the network. This field is blank when the operation is in progress.  # noqa: E501

        :return: The hash of this PayoutItem.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this PayoutItem.

        Transaction hash of the operation submitted to the network. This field is blank when the operation is in progress.  # noqa: E501

        :param hash: The hash of this PayoutItem.  # noqa: E501
        :type: str
        """
        self._hash = hash

    @property
    def created_at(self):
        """Gets the created_at of this PayoutItem.  # noqa: E501

        UNIX timestamp when the payout was created  # noqa: E501

        :return: The created_at of this PayoutItem.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PayoutItem.

        UNIX timestamp when the payout was created  # noqa: E501

        :param created_at: The created_at of this PayoutItem.  # noqa: E501
        :type: int
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this PayoutItem.  # noqa: E501

        UNIX timestamp when the lastest operation was performed  # noqa: E501

        :return: The updated_at of this PayoutItem.  # noqa: E501
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this PayoutItem.

        UNIX timestamp when the lastest operation was performed  # noqa: E501

        :param updated_at: The updated_at of this PayoutItem.  # noqa: E501
        :type: int
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def inputs(self):
        """Gets the inputs of this PayoutItem.  # noqa: E501


        :return: The inputs of this PayoutItem.  # noqa: E501
        :rtype: PayoutItemInputs
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """Sets the inputs of this PayoutItem.


        :param inputs: The inputs of this PayoutItem.  # noqa: E501
        :type: PayoutItemInputs
        """
        if inputs is None:
            raise ValueError("Invalid value for `inputs`, must not be `None`")  # noqa: E501

        self._inputs = inputs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PayoutItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PayoutItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
