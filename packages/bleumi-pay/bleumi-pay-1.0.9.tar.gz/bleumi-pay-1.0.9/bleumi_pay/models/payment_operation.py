# coding: utf-8

"""
    Bleumi Pay REST API

    A simple and powerful REST API to integrate ERC-20, Ethereum, xDai, Algorand payments and/or payouts into your business or application  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: info@bleumi.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from bleumi_pay.models.payment_operation_inputs import PaymentOperationInputs  # noqa: F401,E501


class PaymentOperation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'txid': 'str',
        'chain': 'str',
        'func_name': 'str',
        'status': 'bool',
        'inputs': 'PaymentOperationInputs',
        'hash': 'str'
    }

    attribute_map = {
        'txid': 'txid',
        'chain': 'chain',
        'func_name': 'funcName',
        'status': 'status',
        'inputs': 'inputs',
        'hash': 'hash'
    }

    def __init__(self, txid=None, chain=None, func_name=None, status=None, inputs=None, hash=None):  # noqa: E501
        """PaymentOperation - a model defined in Swagger"""  # noqa: E501
        self._txid = None
        self._chain = None
        self._func_name = None
        self._status = None
        self._inputs = None
        self._hash = None
        self.discriminator = None
        if txid is not None:
            self.txid = txid
        self.chain = chain
        self.func_name = func_name
        self.status = status
        self.inputs = inputs
        self.hash = hash

    @property
    def txid(self):
        """Gets the txid of this PaymentOperation.  # noqa: E501

        Transaction ID of the operation  # noqa: E501

        :return: The txid of this PaymentOperation.  # noqa: E501
        :rtype: str
        """
        return self._txid

    @txid.setter
    def txid(self, txid):
        """Sets the txid of this PaymentOperation.

        Transaction ID of the operation  # noqa: E501

        :param txid: The txid of this PaymentOperation.  # noqa: E501
        :type: str
        """

        self._txid = txid

    @property
    def chain(self):
        """Gets the chain of this PaymentOperation.  # noqa: E501

        Network in which the operation was carried out  # noqa: E501

        :return: The chain of this PaymentOperation.  # noqa: E501
        :rtype: str
        """
        return self._chain

    @chain.setter
    def chain(self, chain):
        """Sets the chain of this PaymentOperation.

        Network in which the operation was carried out  # noqa: E501

        :param chain: The chain of this PaymentOperation.  # noqa: E501
        :type: str
        """
        if chain is None:
            raise ValueError("Invalid value for `chain`, must not be `None`")  # noqa: E501

        self._chain = chain

    @property
    def func_name(self):
        """Gets the func_name of this PaymentOperation.  # noqa: E501

        The name of the function invoked on the payment processor  # noqa: E501

        :return: The func_name of this PaymentOperation.  # noqa: E501
        :rtype: str
        """
        return self._func_name

    @func_name.setter
    def func_name(self, func_name):
        """Sets the func_name of this PaymentOperation.

        The name of the function invoked on the payment processor  # noqa: E501

        :param func_name: The func_name of this PaymentOperation.  # noqa: E501
        :type: str
        """
        if func_name is None:
            raise ValueError("Invalid value for `func_name`, must not be `None`")  # noqa: E501

        self._func_name = func_name

    @property
    def status(self):
        """Gets the status of this PaymentOperation.  # noqa: E501

        null - Operation in progress ; true - Operation completed successfuly ; false - Operation failed to process  # noqa: E501

        :return: The status of this PaymentOperation.  # noqa: E501
        :rtype: bool
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PaymentOperation.

        null - Operation in progress ; true - Operation completed successfuly ; false - Operation failed to process  # noqa: E501

        :param status: The status of this PaymentOperation.  # noqa: E501
        :type: bool
        """
        self._status = status

    @property
    def inputs(self):
        """Gets the inputs of this PaymentOperation.  # noqa: E501


        :return: The inputs of this PaymentOperation.  # noqa: E501
        :rtype: PaymentOperationInputs
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """Sets the inputs of this PaymentOperation.


        :param inputs: The inputs of this PaymentOperation.  # noqa: E501
        :type: PaymentOperationInputs
        """
        if inputs is None:
            raise ValueError("Invalid value for `inputs`, must not be `None`")  # noqa: E501

        self._inputs = inputs

    @property
    def hash(self):
        """Gets the hash of this PaymentOperation.  # noqa: E501

        Transaction hash of operation submitted to the network. This field is blank when operation is in progress.  # noqa: E501

        :return: The hash of this PaymentOperation.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this PaymentOperation.

        Transaction hash of operation submitted to the network. This field is blank when operation is in progress.  # noqa: E501

        :param hash: The hash of this PaymentOperation.  # noqa: E501
        :type: str
        """

        self._hash = hash

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentOperation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentOperation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
