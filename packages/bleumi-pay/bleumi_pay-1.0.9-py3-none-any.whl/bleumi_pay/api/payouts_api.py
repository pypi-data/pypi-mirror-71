# coding: utf-8

"""
    Bleumi Pay REST API

    A simple and powerful REST API to integrate ERC-20, Ethereum, xDai, Algorand payments and/or payouts into your business or application  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: info@bleumi.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from bleumi_pay.api_client import ApiClient
from bleumi_pay.api.request_validator import RequestValidator


class PayoutsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None, req_validator=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        if req_validator is None:
            req_validator = RequestValidator()
        self.req_validator = req_validator

    def create_payout(self, body, **kwargs):  # noqa: E501
        """Create a payout.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_payout(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreatePayoutRequest body: Request body - used to specify payout creation parameters. (required)
        :param Chain chain: Network in which payment is to be created. Please refer documentation for Supported Networks
        :return: CreatePayoutResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_payout_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_payout_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_payout_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a payout.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_payout_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreatePayoutRequest body: Request body - used to specify payout creation parameters. (required)
        :param Chain chain: Network in which payment is to be created. Please refer documentation for Supported Networks
        :return: CreatePayoutResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'chain']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_payout" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_payout`")  # noqa: E501

        # verify validity of value in request body 
        msg = self.req_validator.validate_create_payout_request(params['body'], params['chain'])
        if msg is not None:
            raise ValueError("%s when calling `create_payout`" % (msg))  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'chain' in params:
            query_params.append(('chain', params['chain']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/payout', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreatePayoutResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_payouts(self, **kwargs):  # noqa: E501
        """Returns a list of payouts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_payouts(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str next_token: Cursor to start results from
        :param str sort_by: Sort payments by
        :param str start_at: Get payouts from this timestamp (unix)
        :param str end_at: Get payouts till this timestamp (unix)
        :return: PaginatedPayoutItems
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_payouts_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_payouts_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_payouts_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a list of payouts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_payouts_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str next_token: Cursor to start results from
        :param str sort_by: Sort payments by
        :param str start_at: Get payouts from this timestamp (unix)
        :param str end_at: Get payouts till this timestamp (unix)
        :return: PaginatedPayoutItems
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['next_token', 'sort_by', 'start_at', 'end_at']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_payouts" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'next_token' in params:
            query_params.append(('nextToken', params['next_token']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sortBy', params['sort_by']))  # noqa: E501
        if 'start_at' in params:
            query_params.append(('startAt', params['start_at']))  # noqa: E501
        if 'end_at' in params:
            query_params.append(('endAt', params['end_at']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/payout', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginatedPayoutItems',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
