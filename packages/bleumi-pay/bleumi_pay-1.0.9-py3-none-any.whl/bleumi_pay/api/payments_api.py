# coding: utf-8

"""
    Bleumi Pay REST API

    A simple and powerful REST API to integrate ERC-20, Ethereum, xDai, Algorand payments and/or payouts into your business or application  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: info@bleumi.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from bleumi_pay.api_client import ApiClient
from bleumi_pay.api.request_validator import RequestValidator


class PaymentsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None, req_validator=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        if req_validator is None:
            req_validator = RequestValidator()
        self.req_validator = req_validator
    def get_payment(self, id, **kwargs):  # noqa: E501
        """Retrieve the wallet addresses & token balances for a given payment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payment(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique identifier of the payment (specified during createPayment) to retrieve (required)
        :return: Payment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_payment_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_payment_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_payment_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieve the wallet addresses & token balances for a given payment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payment_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique identifier of the payment (specified during createPayment) to retrieve (required)
        :return: Payment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_payment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_payment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/payment/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Payment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_payment_operation(self, id, txid, **kwargs):  # noqa: E501
        """Retrieve a payment operation for a specific payment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payment_operation(id, txid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique identifier of the payment (specified during [Create a Payment](#createPayment)) (required)
        :param str txid: ID of a specific operation of the payment (required)
        :return: PaymentOperation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_payment_operation_with_http_info(id, txid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_payment_operation_with_http_info(id, txid, **kwargs)  # noqa: E501
            return data

    def get_payment_operation_with_http_info(self, id, txid, **kwargs):  # noqa: E501
        """Retrieve a payment operation for a specific payment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payment_operation_with_http_info(id, txid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique identifier of the payment (specified during [Create a Payment](#createPayment)) (required)
        :param str txid: ID of a specific operation of the payment (required)
        :return: PaymentOperation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'txid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_payment_operation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_payment_operation`")  # noqa: E501
        # verify the required parameter 'txid' is set
        if ('txid' not in params or
                params['txid'] is None):
            raise ValueError("Missing the required parameter `txid` when calling `get_payment_operation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'txid' in params:
            path_params['txid'] = params['txid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/payment/{id}/operation/{txid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaymentOperation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_payment_operations(self, id, **kwargs):  # noqa: E501
        """Retrieve all payment operations for a specific payment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_payment_operations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique identifier of the payment (specified during [Create a Payment](#createPayment)) (required)
        :param str next_token: Cursor to start results from
        :return: PaginatedPaymentOperations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_payment_operations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_payment_operations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def list_payment_operations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieve all payment operations for a specific payment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_payment_operations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique identifier of the payment (specified during [Create a Payment](#createPayment)) (required)
        :param str next_token: Cursor to start results from
        :return: PaginatedPaymentOperations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'next_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_payment_operations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `list_payment_operations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'next_token' in params:
            query_params.append(('nextToken', params['next_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/payment/{id}/operation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginatedPaymentOperations',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_payments(self, **kwargs):  # noqa: E501
        """Retrieve all payments created.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_payments(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str next_token: Cursor to start results from
        :param str sort_by: Sort payments by
        :param str sort_order: Sort Order
        :param str start_at: Get payments from this timestamp (unix)
        :param str end_at: Get payments till this timestamp (unix)
        :return: PaginatedPayments
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_payments_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_payments_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_payments_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve all payments created.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_payments_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str next_token: Cursor to start results from
        :param str sort_by: Sort payments by
        :param str sort_order: Sort Order
        :param str start_at: Get payments from this timestamp (unix)
        :param str end_at: Get payments till this timestamp (unix)
        :return: PaginatedPayments
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['next_token', 'sort_by', 'sort_order', 'start_at', 'end_at']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_payments" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'next_token' in params:
            query_params.append(('nextToken', params['next_token']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sortBy', params['sort_by']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sortOrder', params['sort_order']))  # noqa: E501
        if 'start_at' in params:
            query_params.append(('startAt', params['start_at']))  # noqa: E501
        if 'end_at' in params:
            query_params.append(('endAt', params['end_at']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/payment', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginatedPayments',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def refund_payment(self, body, id, **kwargs):  # noqa: E501
        """Refund the balance of a token for a given payment to the buyerAddress  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.refund_payment(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PaymentRefundRequest body: Request body - used to specify the token to refund. (required)
        :param str id: Unique identifier of the payment (specified during createPayment) (required)
        :param Chain chain: Network in which payment is to be refunded.
        :return: PaymentOperationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.refund_payment_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.refund_payment_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def refund_payment_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Refund the balance of a token for a given payment to the buyerAddress  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.refund_payment_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PaymentRefundRequest body: Request body - used to specify the token to refund. (required)
        :param str id: Unique identifier of the payment (specified during createPayment) (required)
        :param Chain chain: Network in which payment is to be refunded.
        :return: PaymentOperationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'chain']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method refund_payment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `refund_payment`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `refund_payment`")  # noqa: E501
        # verify validity of value in request body 
        msg = self.req_validator.validate_refund_payment_request(params['body'], params['chain'])
        if msg is not None:
            raise ValueError("%s when calling `refund_payment`" % (msg))  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'chain' in params:
            query_params.append(('chain', params['chain']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/payment/{id}/refund', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaymentOperationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def settle_payment(self, body, id, **kwargs):  # noqa: E501
        """Settle a specific amount of a token for a given payment to the transferAddress and remaining balance (if any) will be refunded to the buyerAddress  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.settle_payment(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PaymentSettleRequest body: Request body - used to specify the amount to settle. (required)
        :param str id: Unique identifier of the payment (specified during createPayment) (required)
        :param Chain chain: Network in which payment is to be settled.
        :return: PaymentOperationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.settle_payment_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.settle_payment_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def settle_payment_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Settle a specific amount of a token for a given payment to the transferAddress and remaining balance (if any) will be refunded to the buyerAddress  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.settle_payment_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PaymentSettleRequest body: Request body - used to specify the amount to settle. (required)
        :param str id: Unique identifier of the payment (specified during createPayment) (required)
        :param Chain chain: Network in which payment is to be settled.
        :return: PaymentOperationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'chain']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method settle_payment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `settle_payment`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `settle_payment`")  # noqa: E501
        # verify validity of value in request body 
        msg = self.req_validator.validate_settle_payment_request(params['body'], params['chain'])
        if msg is not None:
            raise ValueError("%s when calling `settle_payment`" % (msg))  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'chain' in params:
            query_params.append(('chain', params['chain']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/payment/{id}/settle', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaymentOperationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
