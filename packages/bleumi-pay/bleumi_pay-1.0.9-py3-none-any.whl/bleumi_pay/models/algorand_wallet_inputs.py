# coding: utf-8

"""
    Bleumi Pay REST API

    A simple and powerful REST API to integrate ERC-20, Ethereum, xDai, Algorand payments and/or payouts into your business or application  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: info@bleumi.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AlgorandWalletInputs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'buyer': 'str',
        'merchant': 'str',
        'salt': 'str',
        'gas': 'str',
        'program_bytes': 'str'
    }

    attribute_map = {
        'buyer': 'buyer',
        'merchant': 'merchant',
        'salt': 'salt',
        'gas': 'gas',
        'program_bytes': 'programBytes'
    }

    def __init__(self, buyer=None, merchant=None, salt=None, gas=None, program_bytes=None):  # noqa: E501
        """AlgorandWalletInputs - a model defined in Swagger"""  # noqa: E501
        self._buyer = None
        self._merchant = None
        self._salt = None
        self._gas = None
        self._program_bytes = None
        self.discriminator = None
        if buyer is not None:
            self.buyer = buyer
        if merchant is not None:
            self.merchant = merchant
        if salt is not None:
            self.salt = salt
        if gas is not None:
            self.gas = gas
        if program_bytes is not None:
            self.program_bytes = program_bytes

    @property
    def buyer(self):
        """Gets the buyer of this AlgorandWalletInputs.  # noqa: E501

        Buyer Address  # noqa: E501

        :return: The buyer of this AlgorandWalletInputs.  # noqa: E501
        :rtype: str
        """
        return self._buyer

    @buyer.setter
    def buyer(self, buyer):
        """Sets the buyer of this AlgorandWalletInputs.

        Buyer Address  # noqa: E501

        :param buyer: The buyer of this AlgorandWalletInputs.  # noqa: E501
        :type: str
        """

        self._buyer = buyer

    @property
    def merchant(self):
        """Gets the merchant of this AlgorandWalletInputs.  # noqa: E501

        Merchant Address  # noqa: E501

        :return: The merchant of this AlgorandWalletInputs.  # noqa: E501
        :rtype: str
        """
        return self._merchant

    @merchant.setter
    def merchant(self, merchant):
        """Sets the merchant of this AlgorandWalletInputs.

        Merchant Address  # noqa: E501

        :param merchant: The merchant of this AlgorandWalletInputs.  # noqa: E501
        :type: str
        """

        self._merchant = merchant

    @property
    def salt(self):
        """Gets the salt of this AlgorandWalletInputs.  # noqa: E501

        Salt  # noqa: E501

        :return: The salt of this AlgorandWalletInputs.  # noqa: E501
        :rtype: str
        """
        return self._salt

    @salt.setter
    def salt(self, salt):
        """Sets the salt of this AlgorandWalletInputs.

        Salt  # noqa: E501

        :param salt: The salt of this AlgorandWalletInputs.  # noqa: E501
        :type: str
        """

        self._salt = salt

    @property
    def gas(self):
        """Gets the gas of this AlgorandWalletInputs.  # noqa: E501

        Gas account Address  # noqa: E501

        :return: The gas of this AlgorandWalletInputs.  # noqa: E501
        :rtype: str
        """
        return self._gas

    @gas.setter
    def gas(self, gas):
        """Sets the gas of this AlgorandWalletInputs.

        Gas account Address  # noqa: E501

        :param gas: The gas of this AlgorandWalletInputs.  # noqa: E501
        :type: str
        """

        self._gas = gas

    @property
    def program_bytes(self):
        """Gets the program_bytes of this AlgorandWalletInputs.  # noqa: E501

        Program Bytes  # noqa: E501

        :return: The program_bytes of this AlgorandWalletInputs.  # noqa: E501
        :rtype: str
        """
        return self._program_bytes

    @program_bytes.setter
    def program_bytes(self, program_bytes):
        """Sets the program_bytes of this AlgorandWalletInputs.

        Program Bytes  # noqa: E501

        :param program_bytes: The program_bytes of this AlgorandWalletInputs.  # noqa: E501
        :type: str
        """

        self._program_bytes = program_bytes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlgorandWalletInputs, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlgorandWalletInputs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
