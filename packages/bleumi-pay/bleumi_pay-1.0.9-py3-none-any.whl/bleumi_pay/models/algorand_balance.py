# coding: utf-8

"""
    Bleumi Pay REST API

    A simple and powerful REST API to integrate ERC-20, Ethereum, xDai, Algorand payments and/or payouts into your business or application  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: info@bleumi.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from bleumi_pay.models.wallet_balance import WalletBalance  # noqa: F401,E501


class AlgorandBalance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alg_mainnet': 'dict(str, WalletBalance)',
        'alg_testnet': 'dict(str, WalletBalance)'
    }

    attribute_map = {
        'alg_mainnet': 'alg_mainnet',
        'alg_testnet': 'alg_testnet'
    }

    def __init__(self, alg_mainnet=None, alg_testnet=None):  # noqa: E501
        """AlgorandBalance - a model defined in Swagger"""  # noqa: E501
        self._alg_mainnet = None
        self._alg_testnet = None
        self.discriminator = None
        if alg_mainnet is not None:
            self.alg_mainnet = alg_mainnet
        if alg_testnet is not None:
            self.alg_testnet = alg_testnet

    @property
    def alg_mainnet(self):
        """Gets the alg_mainnet of this AlgorandBalance.  # noqa: E501


        :return: The alg_mainnet of this AlgorandBalance.  # noqa: E501
        :rtype: dict(str, WalletBalance)
        """
        return self._alg_mainnet

    @alg_mainnet.setter
    def alg_mainnet(self, alg_mainnet):
        """Sets the alg_mainnet of this AlgorandBalance.


        :param alg_mainnet: The alg_mainnet of this AlgorandBalance.  # noqa: E501
        :type: dict(str, WalletBalance)
        """

        self._alg_mainnet = alg_mainnet

    @property
    def alg_testnet(self):
        """Gets the alg_testnet of this AlgorandBalance.  # noqa: E501


        :return: The alg_testnet of this AlgorandBalance.  # noqa: E501
        :rtype: dict(str, WalletBalance)
        """
        return self._alg_testnet

    @alg_testnet.setter
    def alg_testnet(self, alg_testnet):
        """Sets the alg_testnet of this AlgorandBalance.


        :param alg_testnet: The alg_testnet of this AlgorandBalance.  # noqa: E501
        :type: dict(str, WalletBalance)
        """

        self._alg_testnet = alg_testnet

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlgorandBalance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlgorandBalance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
