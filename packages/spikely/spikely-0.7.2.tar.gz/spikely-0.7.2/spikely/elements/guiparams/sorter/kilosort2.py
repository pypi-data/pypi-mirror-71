from spikesorters.kilosort2 import Kilosort2Sorter
class_default = Kilosort2Sorter._default_params

gui_params = [
    {
        "name": "output_folder",
        "type": "folder",
        "value": None,
        "default": None,
        "title": "Sorting output folder path.",
        "base_param": True,
    },
    {
        "name": "verbose",
        "type": "bool",
        "value": False,
        "default": False,
        "title": "If True, output from SpikeInterface element is verbose when run.",
        "base_param": True,
    },
    {
        "name": "grouping_property",
        "type": "str",
        "value": None,
        "default": None,
        "title": "Property name to be used for sorter output grouping.",
        "base_param": True,
    },
    {
        "name": "parallel",
        "type": "bool",
        "value": False,
        "default": False,
        "title": "If grouping property specifed, sort property groups in parallel if True.",
        "base_param": True,
    },
    {
        "name": "delete_output_folder",
        "type": "bool",
        "value": False,
        "default": False,
        "title": "Delete specified or default output folder on completion if True.",
        "base_param": True,
    },
    # kilosort2 specific parameters
    {
        "name": "detect_threshold",
        "type": "float",
        "value": class_default["detect_threshold"],
        "default": class_default["detect_threshold"],
        "title": "Relative detection threshold",
    },
    {
        "name": "projection_threshold",
        "type": "list of float",
        "value": class_default["projection_threshold"],
        "default": class_default["projection_threshold"],
        "title": "Threshold on projections",
    },
    {
        "name": "preclust_threshold",
        "type": "float",
        "value": class_default["preclust_threshold"],
        "default": class_default["preclust_threshold"],
        "title": "Threshold crossings for pre-clustering",
    },
    {
        "name": "car",
        "type": "bool",
        "value": class_default["car"],
        "default": class_default["car"],
        "title": "car"},
    {
        "name": "minFR",
        "type": "float",
        "value": class_default["minFR"],
        "default": class_default["minFR"],
        "title": "Minimum FR to keep templates",
    },
    {
        "name": "minfr_goodchannels",
        "type": "float",
        "value": class_default["minfr_goodchannels"],
        "default": class_default["minfr_goodchannels"],
        "title": "Minimum FR to consider " "a channel 'good'",
    },
    {
        "name": "freq_min",
        "type": "float",
        "value": class_default["freq_min"],
        "default": class_default["freq_min"],
        "title": "Low-pass frequency",
    },
    {
        "name": "sigmaMask",
        "type": "int",
        "value": class_default["sigmaMask"],
        "default": class_default["sigmaMask"],
        "title": "Sigma mask",
    },
    {
        "name": "nPCs",
        "type": "int",
        "value": class_default["nPCs"],
        "default": class_default["nPCs"],
        "title": "Number of principal components",
    },
    {
        "name": "ntbuff",
        "type": "int",
        "value": class_default["ntbuff"],
        "default": class_default["ntbuff"],
        "title": "Samples of symmetrical buffer for whitening and spike detection",
    },
    {
        "name": "nfilt_factor",
        "type": "int",
        "value": class_default["nfilt_factor"],
        "default": class_default["nfilt_factor"],
        "title": "Max number of clusters per good channel (even temporary ones)",
    },
    {
        "name": "NT",
        "type": "int",
        "value": class_default["NT"],
        "default": class_default["NT"],
        "title": "Batch size (try decreasing if out of memory) for GPU should be"
                 " multiple of 32 + ntbuff.",
    },
    {
        "name": "keep_good_only",
        "type": "bool",
        "value": class_default["keep_good_only"],
        "default": class_default["keep_good_only"],
        "title": "If true, will attempt to bad units.",
    },
]
