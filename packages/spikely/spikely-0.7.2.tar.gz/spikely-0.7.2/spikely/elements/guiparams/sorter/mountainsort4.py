from spikesorters.mountainsort4 import Mountainsort4Sorter
class_default = Mountainsort4Sorter._default_params

gui_params = [
    {
        "name": "output_folder",
        "type": "folder",
        "value": None,
        "default": None,
        "title": "Sorting output folder path.",
        "base_param": True,
    },
    {
        "name": "verbose",
        "type": "bool",
        "value": False,
        "default": False,
        "title": "If True, output from SpikeInterface element is verbose when run.",
        "base_param": True,
    },
    {
        "name": "grouping_property",
        "type": "str",
        "value": None,
        "default": None,
        "title": "Property name to be used for sorter output grouping.",
        "base_param": True,
    },
    {
        "name": "parallel",
        "type": "bool",
        "value": False,
        "default": False,
        "title": "If grouping property specifed, sort property groups in parallel if True.",
        "base_param": True,
    },
    {
        "name": "delete_output_folder",
        "type": "bool",
        "value": False,
        "default": False,
        "title": "Delete specified or default output folder on completion if True.",
        "base_param": True,
    },
    # Ms4 specific parameters
    {
        "name": "adjacency_radius",
        "type": "int",
        "value": class_default["adjacency_radius"],
        "default": class_default["adjacency_radius"],
        "title": "Use -1, 0, or 1, depending on the sign of the spikes in the recording",
    },
    {
        "name": "detect_sign",
        "type": "float",
        "value": class_default["detect_sign"],
        "default": class_default["detect_sign"],
        "title": "Use -1 to include all channels in every neighborhood",
    },
    {
        "name": "freq_min",
        "type": "float",
        "value": class_default["freq_min"],
        "default": class_default["freq_min"],
        "title": "High-pass frequency",
    },
    {
        "name": "freq_max",
        "type": "float",
        "value": class_default["freq_max"],
        "default": class_default["freq_max"],
        "title": "Low-pass frequency",
    },
    {
        "name": "filter",
        "type": "bool",
        "value": class_default["filter"],
        "default": class_default["filter"],
        "title": "Bandpass filters the recording if True",
    },
    {
        "name": "whiten",
        "type": "bool",
        "value": class_default["whiten"],
        "default": class_default["whiten"],
        "title": "Whitens the recording if True",
    },
    {
        "name": "curation",
        "type": "bool",
        "value": class_default["curation"],
        "default": class_default["curation"],
        "title": "Curates the output if True",
    },
    {
        "name": "num_workers",
        "type": "int",
        "value": class_default["num_workers"],
        "default": class_default["num_workers"],
        "title": "Number of parallel workers",
    },
    {
        "name": "clip_size",
        "type": "int",
        "value": class_default["clip_size"],
        "default": class_default["clip_size"],
        "title": "Clip size",
    },
    {
        "name": "detect_threshold",
        "type": "float",
        "value": class_default["detect_threshold"],
        "default": class_default["detect_threshold"],
        "title": "Threshold for detection",
    },
    {
        "name": "detect_interval",
        "type": "int",
        "value": class_default["detect_interval"],
        "default": class_default["detect_interval"],
        "title": "Minimum number of timepoints between events detected on the same channel",
    },
    {
        "name": "noise_overlap_threshold",
        "type": "float",
        "value": class_default["noise_overlap_threshold"],
        "default": class_default["noise_overlap_threshold"],
        "title": "Use None for no automated curation",
    },
]
