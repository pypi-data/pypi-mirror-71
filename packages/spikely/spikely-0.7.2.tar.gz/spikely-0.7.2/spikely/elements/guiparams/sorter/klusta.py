from spikesorters.klusta import KlustaSorter
class_default = KlustaSorter._default_params

gui_params = [
    {
        "name": "output_folder",
        "type": "folder",
        "value": None,
        "default": None,
        "title": "Sorting output folder path.",
        "base_param": True,
    },
    {
        "name": "verbose",
        "type": "bool",
        "value": False,
        "default": False,
        "title": "If True, output from SpikeInterface element is verbose when run.",
        "base_param": True,
    },
    {
        "name": "grouping_property",
        "type": "str",
        "value": None,
        "default": None,
        "title": "Property name to be used for sorter output grouping.",
        "base_param": True,
    },
    {
        "name": "parallel",
        "type": "bool",
        "value": False,
        "default": False,
        "title": "If grouping property specifed, sort property groups in parallel if True.",
        "base_param": True,
    },
    {
        "name": "delete_output_folder",
        "type": "bool",
        "value": False,
        "default": False,
        "title": "Delete specified or default output folder on completion if True.",
        "base_param": True,
    },
    # Klusta specific parameters
    {
        "name": "adjacency_radius",
        "type": "float",
        "value": class_default["adjacency_radius"],
        "default": class_default["adjacency_radius"],
        "title": "Adjacency radius (microns).",
    },
    {
        "name": "threshold_strong_std_factor",
        "type": "int",
        "value": class_default["threshold_strong_std_factor"],
        "default": class_default["threshold_strong_std_factor"],
        "title": "Threshold strong std factor.",
    },
    {
        "name": "threshold_weak_std_factor",
        "type": "int",
        "value": class_default["threshold_weak_std_factor"],
        "default": class_default["threshold_weak_std_factor"],
        "title": "Threshold weak std factor.",
    },
    {
        "name": "detect_sign",
        "type": "int",
        "value": class_default["detect_sign"],
        "default": class_default["detect_sign"],
        "title": "Use -1, 0, or 1, depending on the sign of the spikes in the recording.",
    },
    {
        "name": "extract_s_before",
        "type": "int",
        "value": class_default["extract_s_before"],
        "default": class_default["extract_s_before"],
        "title": "Frames to extract before.",
    },
    {
        "name": "extract_s_after",
        "type": "int",
        "value": class_default["extract_s_after"],
        "default": class_default["extract_s_after"],
        "title": "Frames to extract after.",
    },
    {
        "name": "n_features_per_channel",
        "type": "int",
        "value": class_default["n_features_per_channel"],
        "default": class_default["n_features_per_channel"],
        "title": "Number of features per channel.",
    },
    {
        "name": "pca_n_waveforms_max",
        "type": "int",
        "value": class_default["pca_n_waveforms_max"],
        "default": class_default["pca_n_waveforms_max"],
        "title": "Max number of waveforms for PCA.",
    },
    {
        "name": "num_starting_clusters",
        "type": "int",
        "value": class_default["num_starting_clusters"],
        "default": class_default["num_starting_clusters"],
        "title": "Starting number of clusters.",
    },
]
