from spikesorters.ironclust import IronClustSorter
class_default = IronClustSorter._default_params

gui_params = [
    {
        "name": "output_folder",
        "type": "folder",
        "value": None,
        "default": None,
        "title": "Sorting output folder path.",
        "base_param": True,
    },
    {
        "name": "verbose",
        "type": "bool",
        "value": False,
        "default": False,
        "title": "If True, output from SpikeInterface element is verbose when run.",
        "base_param": True,
    },
    {
        "name": "grouping_property",
        "type": "str",
        "value": None,
        "default": None,
        "title": "Property name to be used for sorter output grouping.",
        "base_param": True,
    },
    {
        "name": "parallel",
        "type": "bool",
        "value": False,
        "default": False,
        "title": "If grouping property specifed, sort property groups in parallel if True.",
        "base_param": True,
    },
    {
        "name": "delete_output_folder",
        "type": "bool",
        "value": False,
        "default": False,
        "title": "Delete specified or default output folder on completion if True.",
        "base_param": True,
    },
    # ironclust specific parameters
    {
        "name": "detect_sign",
        "type": "int",
        "value": class_default["detect_sign"],
        "default": class_default["detect_sign"],
        "title": "Use -1, 0, or 1, depending on the sign of the spikes in the recording",
    },
    {
        "name": "adjacency_radius",
        "type": "float",
        "value": class_default["adjacency_radius"],
        "default": class_default["adjacency_radius"],
        "title": "Use -1 to include all channels in every neighborhood",
    },
    {
        "name": "adjacency_radius_out",
        "type": "float",
        "value": class_default["adjacency_radius_out"],
        "default": class_default["adjacency_radius_out"],
        "title": "Use -1 to include all channels in every neighborhood",
    },
    {
        "name": "detect_threshold",
        "type": "float",
        "value": class_default["detect_threshold"],
        "default": class_default["detect_threshold"],
        "title": "Threshold for detection",
    },
    {
        "name": "freq_min",
        "type": "float",
        "value": class_default["freq_min"],
        "default": class_default["freq_min"],
        "title": "Low-pass frequency",
    },
    {
        "name": "freq_max",
        "type": "float",
        "value": class_default["freq_max"],
        "default": class_default["freq_max"],
        "title": "High-pass frequency",
    },
    {
        "name": "prm_template_name",
        "type": "str",
        "value": class_default["prm_template_name"],
        "default": class_default["prm_template_name"],
        "title": ".prm template file name",
    },
    {
        "name": "merge_thresh",
        "type": "float",
        "value": class_default["merge_thresh"],
        "default": class_default["merge_thresh"],
        "title": "Threshold for merging",
    },
    {
        "name": "pc_per_chan",
        "type": "int",
        "value": class_default["pc_per_chan"],
        "default": class_default["pc_per_chan"],
        "title": "Number of principal components per channel",
    },
    {
        "name": "whiten",
        "type": "bool",
        "value": class_default["whiten"],
        "default": class_default["whiten"],
        "title": "Whitens the recording if True",
    },
    {
        "name": "filter_type",
        "type": "str",
        "value": class_default["filter_type"],
        "default": class_default["filter_type"],
        "title": "none, bandpass, wiener, fftdiff, ndiff",
    },
    {
        "name": "filter_detect_type",
        "type": "str",
        "value": class_default["filter_detect_type"],
        "default": class_default["filter_detect_type"],
        "title": "none, bandpass, wiener, fftdiff, ndiff",
    },
    {
        "name": "common_ref_type",
        "type": "str",
        "value": class_default["common_ref_type"],
        "default": class_default["common_ref_type"],
        "title": "none, bandpass, wiener, fftdiff, ndiff",
    },
    {
        "name": "batch_sec_drift",
        "type": "int",
        "value": class_default["batch_sec_drift"],
        "default": class_default["batch_sec_drift"],
        "title": "batch duration in seconds. clustering time duration",
    },
    {
        "name": "step_sec_drift",
        "type": "int",
        "value": class_default["step_sec_drift"],
        "default": class_default["step_sec_drift"],
        "title": "compute anatomical similarity every n sec",
    },
    {
        "name": "knn",
        "type": "int",
        "value": class_default["knn"],
        "default": class_default["knn"],
        "title": "K nearest neighbors",
    },
    {
        "name": "min_count",
        "type": "int",
        "value": class_default["min_count"],
        "default": class_default["min_count"],
        "title": "Minimum cluster size",
    },
    {
        "name": "fGpu",
        "type": "bool",
        "value": class_default["fGpu"],
        "default": class_default["fGpu"],
        "title": "Use GPU if available",
    },
    {
        "name": "fft_thresh",
        "type": "float",
        "value": class_default["fft_thresh"],
        "default": class_default["fft_thresh"],
        "title": "FFT-based noise peak threshold",
    },
    {
        "name": "fft_thresh_low",
        "type": "float",
        "value": class_default["fft_thresh_low"],
        "default": class_default["fft_thresh_low"],
        "title": "FFT-based noise peak lower threshold (set to 0 to disable dual"
                 " thresholding scheme).",
    },
    {
        "name": "nSites_whiten",
        "type": "int",
        "value": class_default["nSites_whiten"],
        "default": class_default["nSites_whiten"],
        "title": "Number of adjacent channels to whiten",
    },
    {
        "name": "feature_type",
        "type": "str",
        "value": class_default["feature_type"],
        "default": class_default["feature_type"],
        "title": "gpca, pca, vpp, vmin, vminmax, cov, energy, xcov",
    },
    {
        "name": "delta_cut",
        "type": "int",
        "value": class_default["delta_cut"],
        "default": class_default["delta_cut"],
        "title": "Cluster detection threshold (delta-cutoff)",
    },
    {
        "name": "post_merge_mode",
        "type": "int",
        "value": class_default["post_merge_mode"],
        "default": class_default["post_merge_mode"],
        "title": "post merge mode",
    },
    {
        "name": "sort_mode",
        "type": "int",
        "value": class_default["sort_mode"],
        "default": class_default["sort_mode"],
        "title": "sort mode",
    },
    {
        "name": "filter",
        "type": "bool",
        "value": class_default["filter"],
        "default": class_default["filter"],
        "title": "filter on/off",
    },
    {
        "name": "clip_pre",
        "type": "float",
        "value": class_default["clip_pre"],
        "default": class_default["clip_pre"],
        "title": "pre-peak clip duration in ms",
    },
    {
        "name": "clip_post",
        "type": "float",
        "value": class_default["clip_post"],
        "default": class_default["clip_post"],
        "title": "post-peak clip duration in ms",
    },
    {
        "name": "merge_thresh_cc",
        "type": "float",
        "value": class_default["merge_thresh_cc"],
        "default": class_default["merge_thresh_cc"],
        "title": "cross-correlogram merging threshold, set to 1 to disable",
    },
    {
        "name": "nRepeat_merge",
        "type": "int",
        "value": class_default["nRepeat_merge"],
        "default": class_default["nRepeat_merge"],
        "title": "number of repeats for merge",
    },
    {
        "name": "merge_overlap_thresh",
        "type": "float",
        "value": class_default["merge_overlap_thresh"],
        "default": class_default["merge_overlap_thresh"],
        "title": "knn-overlap merge threshold",
    },
    {
        "name": "fParfor",
        "type": "bool",
        "value": class_default["fParfor"],
        "default": class_default["fParfor"],
        "title": "parfor loop.",
    },
]
