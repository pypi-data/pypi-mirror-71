## render a collection of changes that are all of the same type
#def render_by_class(changes, label)
#if changes

<div class="change-category">
<h2>$label</h2>

<%
chm = dict((ch.entry,ch) for ch in changes)
%>

#for entry in sorted(chm.keys())
$render_change(chm[entry])
#end for

</div>
#end if
#end def


## the overridden details block
#block details
<!-- begin jardiff_JarContentsReport.details -->
<div class="details">

<%
import javatools.jardiff
import javatools.change

## collect the changes into buckets by type
change = getattr(self, "change")
changemap = javatools.change.collect_by_type(change.collect())
changeorder = (
    javatools.jardiff.JarManifestChange,
    javatools.jardiff.JarSignatureFileAdded,
    javatools.jardiff.JarSignatureFileRemoved,
    javatools.jardiff.JarSignatureFileChange,
    javatools.jardiff.JarSignatureBlockFileAdded,
    javatools.jardiff.JarSignatureBlockFileRemoved,
    javatools.jardiff.JarSignatureBlockFileChange,
    javatools.jardiff.JarContentAdded,
    javatools.jardiff.JarContentRemoved,
    javatools.jardiff.JarContentChange,
    javatools.jardiff.JarClassAdded,
    javatools.jardiff.JarClassRemoved,
    javatools.jardiff.JarClassChange,
)

## gather SquashedChange instances under a more appropriate heading
for sq in changemap.pop(javatools.change.SquashedChange, ()):
    oc = sq.origclass
    if oc is javatools.jardiff.JarClassReport:
        oc = javatools.jardiff.JarClassChange
    sqm = changemap.setdefault(oc, [])
    sqm.append(sq)
%>

## print the above types gathered in order
#for ct in changeorder
$render_by_class(changemap.pop(ct, ()), ct.label)
#end for

## print the remaining types
#for ct,changes in changemap.items()
$render_by_class(changes, ct.label)
#end for

</div>
<!-- end jardiff_JarContentsReport.details -->
#end block


##
## The end.
