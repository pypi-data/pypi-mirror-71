#extends javatools.cheetah.report


## render a collection of changes that are all of the same type
#def render_by_class(changes, label)
#if changes

<div class="change-category">
<h2>$label</h2>

<%
chm = dict((ch.entry,ch) for ch in changes)
%>

#for entry in sorted(chm.keys())
$render_change(chm[entry])
#end for

</div>
#end if
#end def


## the overridden details block
#block details

#import javatools.distdiff
#import javatools.change

## collect the changes into buckets by type
<%
change = getattr(self, "change")
changemap = javatools.change.collect_by_type(change.collect())
changeorder = (
    javatools.distdiff.DistClassAdded,
    javatools.distdiff.DistClassRemoved,
    javatools.distdiff.DistClassChange,
    javatools.distdiff.DistJarAdded,
    javatools.distdiff.DistJarRemoved,
    javatools.distdiff.DistJarChange,
    javatools.distdiff.DistJarChange,
    javatools.distdiff.DistTextChange,
    javatools.distdiff.DistManifestChange,
    javatools.distdiff.DistContentAdded,
    javatools.distdiff.DistContentRemoved,
    javatools.distdiff.DistContentChange,
)

## gather SquashedChange instances under a more appropriate heading
for sq in changemap.pop(javatools.change.SquashedChange, ()):
    oc = sq.origclass
    if oc is javatools.distdiff.DistJarReport:
        oc = javatools.distdiff.DistJarChange
    elif oc is javatools.distdiff.DistClassReport:
        oc = javatools.distdiff.DistClassChange
    sqm = changemap.setdefault(oc, [])
    sqm.append(sq)
%>

## print the above types gathered in order
#for ct in changeorder
$render_by_class(changemap.pop(ct, tuple()), ct.label)
#end for

## print the remaining types
#for ct, changes in changemap.items()
$render_by_class(changes, ct.label)
#end for

#end block


##
## The end.
