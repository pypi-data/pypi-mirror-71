# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class GetCloudProviderSnapshotRestoreJobsResult:
    """
    A collection of values returned by getCloudProviderSnapshotRestoreJobs.
    """
    def __init__(__self__, cluster_name=None, id=None, project_id=None, results=None, total_count=None):
        if cluster_name and not isinstance(cluster_name, str):
            raise TypeError("Expected argument 'cluster_name' to be a str")
        __self__.cluster_name = cluster_name
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        __self__.project_id = project_id
        if results and not isinstance(results, list):
            raise TypeError("Expected argument 'results' to be a list")
        __self__.results = results
        """
        Includes cloudProviderSnapshotRestoreJob object for each item detailed in the results array section.
        """
        if total_count and not isinstance(total_count, float):
            raise TypeError("Expected argument 'total_count' to be a float")
        __self__.total_count = total_count
class AwaitableGetCloudProviderSnapshotRestoreJobsResult(GetCloudProviderSnapshotRestoreJobsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCloudProviderSnapshotRestoreJobsResult(
            cluster_name=self.cluster_name,
            id=self.id,
            project_id=self.project_id,
            results=self.results,
            total_count=self.total_count)

def get_cloud_provider_snapshot_restore_jobs(cluster_name=None,project_id=None,opts=None):
    """
    `.getCloudProviderSnapshotRestoreJobs` provides a Cloud Provider Snapshot Restore Jobs entry datasource. Gets all cloud provider snapshot restore jobs for the specified cluster.

    > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.

    ## Example Usage



    ```python
    import pulumi
    import pulumi_mongodbatlas as mongodbatlas

    test_cloud_provider_snapshot = mongodbatlas.CloudProviderSnapshot("testCloudProviderSnapshot",
        cluster_name="MyCluster",
        description="MyDescription",
        project_id="5cf5a45a9ccf6400e60981b6",
        retention_in_days=1)
    test_cloud_provider_snapshot_restore_job = mongodbatlas.CloudProviderSnapshotRestoreJob("testCloudProviderSnapshotRestoreJob",
        cluster_name="MyCluster",
        delivery_type={
            "automated": True,
            "target_cluster_name": "MyCluster",
            "target_project_id": "5cf5a45a9ccf6400e60981b6",
        },
        project_id="5cf5a45a9ccf6400e60981b6",
        snapshot_id=test_cloud_provider_snapshot.id)
    test_cloud_provider_snapshot_restore_jobs = pulumi.Output.all(test_cloud_provider_snapshot_restore_job.cluster_name, test_cloud_provider_snapshot_restore_job.project_id).apply(lambda cluster_name, project_id: mongodbatlas.get_cloud_provider_snapshot_restore_jobs(cluster_name=cluster_name,
        project_id=project_id))
    ```



    :param str cluster_name: The name of the Atlas cluster for which you want to retrieve restore jobs.
    :param str project_id: The unique identifier of the project for the Atlas cluster.
    """
    __args__ = dict()


    __args__['clusterName'] = cluster_name
    __args__['projectId'] = project_id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('mongodbatlas:index/getCloudProviderSnapshotRestoreJobs:getCloudProviderSnapshotRestoreJobs', __args__, opts=opts).value

    return AwaitableGetCloudProviderSnapshotRestoreJobsResult(
        cluster_name=__ret__.get('clusterName'),
        id=__ret__.get('id'),
        project_id=__ret__.get('projectId'),
        results=__ret__.get('results'),
        total_count=__ret__.get('totalCount'))
