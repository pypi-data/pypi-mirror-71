# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class Cluster(pulumi.CustomResource):
    advanced_configuration: pulumi.Output[dict]
    auto_scaling_disk_gb_enabled: pulumi.Output[bool]
    """
    Specifies whether disk auto-scaling is enabled. The default is true.
    - Set to `true` to enable disk auto-scaling.
    - Set to `false` to disable disk auto-scaling.
    """
    backing_provider_name: pulumi.Output[str]
    """
    Cloud service provider on which the server for a multi-tenant cluster is provisioned.
    """
    backup_enabled: pulumi.Output[bool]
    """
    Legacy Option - Set to true to enable Atlas continuous backups for the cluster.
    """
    bi_connector: pulumi.Output[dict]
    """
    Specifies BI Connector for Atlas configuration on this cluster. BI Connector for Atlas is only available for M10+ clusters. See BI Connector below for more details.

      * `enabled` (`str`) - Specifies whether or not BI Connector for Atlas is enabled on the cluster.
        - Set to `true` to enable BI Connector for Atlas.
        - Set to `false` to disable BI Connector for Atlas.
      * `read_preference` (`str`) - Specifies the read preference to be used by BI Connector for Atlas on the cluster. Each BI Connector for Atlas read preference contains a distinct combination of [readPreference](https://docs.mongodb.com/manual/core/read-preference/) and [readPreferenceTags](https://docs.mongodb.com/manual/core/read-preference/#tag-sets) options. For details on BI Connector for Atlas read preferences, refer to the [BI Connector Read Preferences Table](https://docs.atlas.mongodb.com/tutorial/create-global-writes-cluster/#bic-read-preferences).
    """
    cluster_id: pulumi.Output[str]
    """
    The cluster ID.
    """
    cluster_type: pulumi.Output[str]
    """
    Specifies the type of the cluster that you want to modify. You cannot convert a sharded cluster deployment to a replica set deployment.
    """
    connection_strings: pulumi.Output[dict]
    """
    Set of connection strings that your applications use to connect to this cluster. More info in [Connection-strings](https://docs.mongodb.com/manual/reference/connection-string/). Use the parameters in this object to connect your applications to this cluster. To learn more about the formats of connection strings, see [Connection String Options](https://docs.atlas.mongodb.com/reference/faq/connection-changes/). NOTE: Atlas returns the contents of this object after the cluster is operational, not while it builds the cluster.
    - `connection_strings.standard` -   Public mongodb:// connection string for this cluster.
    - `connection_strings.standard_srv` - Public mongodb+srv:// connection string for this cluster. The mongodb+srv protocol tells the driver to look up the seed list of hosts in DNS. Atlas synchronizes this list with the nodes in a cluster. If the connection string uses this URI format, you don’t need to append the seed list or change the URI if the nodes change. Use this URI format if your driver supports it. If it doesn’t, use connectionStrings.standard.
    - `connection_strings.aws_private_link` -  [Private-endpoint-aware](https://docs.atlas.mongodb.com/security-private-endpoint/#private-endpoint-connection-strings) mongodb://connection strings for each interface VPC endpoint you configured to connect to this cluster. Returned only if you created a AWS PrivateLink connection to this cluster.
    - `connection_strings.aws_private_link_srv` - [Private-endpoint-aware](https://docs.atlas.mongodb.com/security-private-endpoint/#private-endpoint-connection-strings) mongodb+srv://connection strings for each interface VPC endpoint you configured to connect to this cluster. Returned only if you created a AWS PrivateLink connection to this cluster. Use this URI format if your driver supports it. If it doesn’t, use connectionStrings.awsPrivateLink.
    - `connection_strings.private` -   [Network-peering-endpoint-aware](https://docs.atlas.mongodb.com/security-vpc-peering/#vpc-peering) mongodb://connection strings for each interface VPC endpoint you configured to connect to this cluster. Returned only if you created a network peering connection to this cluster.
    - `connection_strings.private_srv` -  [Network-peering-endpoint-aware](https://docs.atlas.mongodb.com/security-vpc-peering/#vpc-peering) mongodb+srv://connection strings for each interface VPC endpoint you configured to connect to this cluster. Returned only if you created a network peering connection to this cluster.

      * `awsPrivateLink` (`dict`)
      * `awsPrivateLinkSrv` (`dict`)
      * `private` (`str`)
      * `privateSrv` (`str`)
      * `standard` (`str`)
      * `standardSrv` (`str`)
    """
    disk_size_gb: pulumi.Output[float]
    """
    The size in gigabytes of the server’s root volume. You can add capacity by increasing this number, up to a maximum possible value of 4096 (i.e., 4 TB). This value must be a positive integer.
    """
    encryption_at_rest_provider: pulumi.Output[str]
    """
    Set the Encryption at Rest parameter.  Possible values are AWS, GCP, AZURE or NONE.  Requires M10 or greater and for backup_enabled to be false or omitted.
    """
    labels: pulumi.Output[list]
    """
    Array containing key-value pairs that tag and categorize the cluster. Each key and value has a maximum length of 255 characters. You cannot set the key `Infrastructure Tool`, it is used for internal purposes to track aggregate usage.

      * `key` (`str`) - The key that you want to write.
      * `value` (`str`) - The value that you want to write.
    """
    mongo_db_major_version: pulumi.Output[str]
    """
    Version of the cluster to deploy. Atlas supports the following MongoDB versions for M10+ clusters: `3.6`, `4.0`, or `4.2`. You must set this value to `4.2` if `provider_instance_size_name` is either M2 or M5.
    """
    mongo_db_version: pulumi.Output[str]
    """
    Version of MongoDB the cluster runs, in `major-version`.`minor-version` format.
    """
    mongo_uri: pulumi.Output[str]
    """
    Base connection string for the cluster. Atlas only displays this field after the cluster is operational, not while it builds the cluster.
    """
    mongo_uri_updated: pulumi.Output[str]
    """
    Lists when the connection string was last updated. The connection string changes, for example, if you change a replica set to a sharded cluster.
    """
    mongo_uri_with_options: pulumi.Output[str]
    """
    connection string for connecting to the Atlas cluster. Includes the replicaSet, ssl, and authSource query parameters in the connection string with values appropriate for the cluster.
    """
    name: pulumi.Output[str]
    """
    Name of the cluster as it appears in Atlas. Once the cluster is created, its name cannot be changed.
    """
    num_shards: pulumi.Output[float]
    """
    Number of shards to deploy in the specified zone.
    """
    paused: pulumi.Output[bool]
    """
    Flag that indicates whether the cluster is paused or not.
    """
    pit_enabled: pulumi.Output[bool]
    """
    - Flag that indicates if the cluster uses Point-in-Time backups. If set to true, provider_backup_enabled must also be set to true.
    """
    project_id: pulumi.Output[str]
    """
    The unique ID for the project to create the database user.
    """
    provider_backup_enabled: pulumi.Output[bool]
    """
    Flag indicating if the cluster uses Cloud Provider Snapshots for backups.
    """
    provider_disk_iops: pulumi.Output[float]
    """
    The maximum input/output operations per second (IOPS) the system can perform. The possible values depend on the selected providerSettings.instanceSizeName and diskSizeGB.
    """
    provider_disk_type_name: pulumi.Output[str]
    """
    Azure disk type of the server’s root volume. If omitted, Atlas uses the default disk type for the selected providerSettings.instanceSizeName.  Example disk types and associated storage sizes: P4 - 32GB, P6 - 64GB, P10 - 128GB, P20 - 512GB, P30 - 1024GB, P40 - 2048GB, P50 - 4095GB.  More information and the most update to date disk types/storage sizes can be located at https://docs.atlas.mongodb.com/reference/api/clusters-create-one/.
    """
    provider_encrypt_ebs_volume: pulumi.Output[bool]
    """
    If enabled, the Amazon EBS encryption feature encrypts the server’s root volume for both data at rest within the volume and for data moving between the volume and the instance.
    """
    provider_instance_size_name: pulumi.Output[str]
    """
    Atlas provides different instance sizes, each with a default storage capacity and RAM size. The instance size you select is used for all the data-bearing servers in your cluster. See [Create a Cluster](https://docs.atlas.mongodb.com/reference/api/clusters-create-one/) `providerSettings.instanceSizeName` for valid values and default resources.
    """
    provider_name: pulumi.Output[str]
    """
    Cloud service provider on which the servers are provisioned.
    """
    provider_region_name: pulumi.Output[str]
    """
    Physical location of your MongoDB cluster. The region you choose can affect network latency for clients accessing your databases.  Requires the Atlas Region name, see the reference list for [AWS](https://docs.atlas.mongodb.com/reference/amazon-aws/), [GCP](https://docs.atlas.mongodb.com/reference/google-gcp/), [Azure](https://docs.atlas.mongodb.com/reference/microsoft-azure/).
    Do not specify this field when creating a multi-region cluster using the replicationSpec document or a Global Cluster with the replicationSpecs array.
    """
    provider_volume_type: pulumi.Output[str]
    """
    The type of the volume. The possible values are: `STANDARD` and `PROVISIONED`.  `PROVISIONED` required if setting IOPS higher than the default instance IOPS.
    """
    replication_factor: pulumi.Output[float]
    """
    Number of replica set members. Each member keeps a copy of your databases, providing high availability and data redundancy. The possible values are 3, 5, or 7. The default value is 3.
    """
    replication_specs: pulumi.Output[list]
    """
    Configuration for cluster regions.  See Replication Spec below for more details.

      * `id` (`str`) - Unique identifer of the replication document for a zone in a Global Cluster.
      * `num_shards` (`float`) - Number of shards to deploy in the specified zone.
      * `regionsConfigs` (`list`) - Physical location of the region. Each regionsConfig document describes the region’s priority in elections and the number and type of MongoDB nodes Atlas deploys to the region. You must order each regionsConfigs document by regionsConfig.priority, descending. See Region Config below for more details.
        * `analyticsNodes` (`float`) - The number of analytics nodes for Atlas to deploy to the region. Analytics nodes are useful for handling analytic data such as reporting queries from BI Connector for Atlas. Analytics nodes are read-only, and can never become the primary.
        * `electableNodes` (`float`) - Number of electable nodes for Atlas to deploy to the region. Electable nodes can become the primary and can facilitate local reads.
        * `priority` (`float`) - Election priority of the region. For regions with only read-only nodes, set this value to 0.
        * `readOnlyNodes` (`float`) - Number of read-only nodes for Atlas to deploy to the region. Read-only nodes can never become the primary, but can facilitate local-reads. Specify 0 if you do not want any read-only nodes in the region.
        * `region_name` (`str`) - Name for the region specified.

      * `zoneName` (`str`) - Name for the zone in a Global Cluster.
    """
    snapshot_backup_policies: pulumi.Output[list]
    """
    current snapshot schedule and retention settings for the cluster.

      * `cluster_id` (`str`) - The cluster ID.
      * `cluster_name` (`str`)
      * `next_snapshot` (`str`)
      * `policies` (`list`)
        * `id` (`str`) - Unique identifer of the replication document for a zone in a Global Cluster.
        * `policyItems` (`list`)
          * `frequencyInterval` (`float`)
          * `frequencyType` (`str`)
          * `id` (`str`) - Unique identifer of the replication document for a zone in a Global Cluster.
          * `retentionUnit` (`str`)
          * `retentionValue` (`float`)

      * `reference_hour_of_day` (`float`)
      * `reference_minute_of_hour` (`float`)
      * `restore_window_days` (`float`)
      * `update_snapshots` (`bool`)
    """
    srv_address: pulumi.Output[str]
    """
    Connection string for connecting to the Atlas cluster. The +srv modifier forces the connection to use TLS/SSL. See the mongoURI for additional options.
    """
    state_name: pulumi.Output[str]
    """
    Current state of the cluster. The possible states are:
    - IDLE
    - CREATING
    - UPDATING
    - DELETING
    - DELETED
    - REPAIRING
    """
    def __init__(__self__, resource_name, opts=None, advanced_configuration=None, auto_scaling_disk_gb_enabled=None, backing_provider_name=None, backup_enabled=None, bi_connector=None, cluster_type=None, disk_size_gb=None, encryption_at_rest_provider=None, labels=None, mongo_db_major_version=None, name=None, num_shards=None, pit_enabled=None, project_id=None, provider_backup_enabled=None, provider_disk_iops=None, provider_disk_type_name=None, provider_encrypt_ebs_volume=None, provider_instance_size_name=None, provider_name=None, provider_region_name=None, provider_volume_type=None, replication_factor=None, replication_specs=None, __props__=None, __name__=None, __opts__=None):
        """
        `.Cluster` provides a Cluster resource. The resource lets you create, edit and delete clusters. The resource requires your Project ID.

        > **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.

        > **IMPORTANT:**
        <br> &#8226; Free tier cluster creation (M0) is not supported via API or by this Provider.
        <br> &#8226; Shared tier clusters (M2, M5) cannot be upgraded to higher tiers via API or by this Provider.
        <br> &#8226; Changes to cluster configurations can affect costs. Before making changes, please see [Billing](https://docs.atlas.mongodb.com/billing/).
        <br> &#8226; If your Atlas project contains a custom role that uses actions introduced in a specific MongoDB version, you cannot create a cluster with a MongoDB version less than that version unless you delete the custom role.

        ## Example Usage

        ### Example AWS cluster

        ```python
        import pulumi
        import pulumi_mongodbatlas as mongodbatlas

        cluster_test = mongodbatlas.Cluster("cluster-test",
            auto_scaling_disk_gb_enabled=True,
            disk_size_gb=100,
            mongo_db_major_version="4.0",
            num_shards=1,
            project_id="<YOUR-PROJECT-ID>",
            provider_backup_enabled=True,
            provider_disk_iops=300,
            provider_encrypt_ebs_volume=True,
            provider_instance_size_name="M40",
            provider_name="AWS",
            provider_region_name="US_EAST_1",
            provider_volume_type="STANDARD",
            replication_factor=3)
        ```

        ### Example Azure cluster.

        ```python
        import pulumi
        import pulumi_mongodbatlas as mongodbatlas

        test = mongodbatlas.Cluster("test",
            auto_scaling_disk_gb_enabled=True,
            mongo_db_major_version="4.0",
            num_shards=1,
            project_id="<YOUR-PROJECT-ID>",
            provider_backup_enabled=True,
            provider_disk_type_name="P6",
            provider_instance_size_name="M30",
            provider_name="AZURE",
            provider_region_name="US_EAST_2",
            replication_factor=3)
        ```

        ### Example GCP cluster

        ```python
        import pulumi
        import pulumi_mongodbatlas as mongodbatlas

        test = mongodbatlas.Cluster("test",
            auto_scaling_disk_gb_enabled=True,
            disk_size_gb=40,
            mongo_db_major_version="4.0",
            num_shards=1,
            project_id="<YOUR-PROJECT-ID>",
            provider_backup_enabled=True,
            provider_instance_size_name="M30",
            provider_name="GCP",
            provider_region_name="US_EAST_4",
            replication_factor=3)
        ```

        ### Example Multi Region cluster

        ```python
        import pulumi
        import pulumi_mongodbatlas as mongodbatlas

        cluster_test = mongodbatlas.Cluster("cluster-test",
            cluster_type="REPLICASET",
            disk_size_gb=100,
            num_shards=1,
            project_id="<YOUR-PROJECT-ID>",
            provider_backup_enabled=True,
            provider_disk_iops=300,
            provider_instance_size_name="M10",
            provider_name="AWS",
            provider_volume_type="STANDARD",
            replication_specs=[{
                "num_shards": 1,
                "regionsConfig": [
                    {
                        "electableNodes": 3,
                        "priority": 7,
                        "readOnlyNodes": 0,
                        "region_name": "US_EAST_1",
                    },
                    {
                        "electableNodes": 2,
                        "priority": 6,
                        "readOnlyNodes": 0,
                        "region_name": "US_EAST_2",
                    },
                    {
                        "electableNodes": 2,
                        "priority": 5,
                        "readOnlyNodes": 2,
                        "region_name": "US_WEST_1",
                    },
                ],
            }])
        ```

        ### Example Global cluster

        ```python
        import pulumi
        import pulumi_mongodbatlas as mongodbatlas

        cluster_test = mongodbatlas.Cluster("cluster-test",
            cluster_type="GEOSHARDED",
            disk_size_gb=80,
            num_shards=1,
            project_id="<YOUR-PROJECT-ID>",
            provider_backup_enabled=True,
            provider_disk_iops=240,
            provider_instance_size_name="M30",
            provider_name="AWS",
            provider_volume_type="STANDARD",
            replication_specs=[
                {
                    "num_shards": 2,
                    "regionsConfig": [{
                        "electableNodes": 3,
                        "priority": 7,
                        "readOnlyNodes": 0,
                        "region_name": "US_EAST_1",
                    }],
                    "zoneName": "Zone 1",
                },
                {
                    "num_shards": 2,
                    "regionsConfig": [{
                        "electableNodes": 3,
                        "priority": 7,
                        "readOnlyNodes": 0,
                        "region_name": "EU_CENTRAL_1",
                    }],
                    "zoneName": "Zone 2",
                },
            ])
        ```

        ### Example AWS Shared Tier cluster

        ```python
        import pulumi
        import pulumi_mongodbatlas as mongodbatlas

        cluster_test = mongodbatlas.Cluster("cluster-test",
            auto_scaling_disk_gb_enabled="false",
            backing_provider_name="AWS",
            disk_size_gb="2",
            mongo_db_major_version="4.2",
            project_id="<YOUR-PROJECT-ID>",
            provider_instance_size_name="M2",
            provider_name="TENANT",
            provider_region_name="US_EAST_1")
        ```


        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] auto_scaling_disk_gb_enabled: Specifies whether disk auto-scaling is enabled. The default is true.
               - Set to `true` to enable disk auto-scaling.
               - Set to `false` to disable disk auto-scaling.
        :param pulumi.Input[str] backing_provider_name: Cloud service provider on which the server for a multi-tenant cluster is provisioned.
        :param pulumi.Input[bool] backup_enabled: Legacy Option - Set to true to enable Atlas continuous backups for the cluster.
        :param pulumi.Input[dict] bi_connector: Specifies BI Connector for Atlas configuration on this cluster. BI Connector for Atlas is only available for M10+ clusters. See BI Connector below for more details.
        :param pulumi.Input[str] cluster_type: Specifies the type of the cluster that you want to modify. You cannot convert a sharded cluster deployment to a replica set deployment.
        :param pulumi.Input[float] disk_size_gb: The size in gigabytes of the server’s root volume. You can add capacity by increasing this number, up to a maximum possible value of 4096 (i.e., 4 TB). This value must be a positive integer.
        :param pulumi.Input[str] encryption_at_rest_provider: Set the Encryption at Rest parameter.  Possible values are AWS, GCP, AZURE or NONE.  Requires M10 or greater and for backup_enabled to be false or omitted.
        :param pulumi.Input[list] labels: Array containing key-value pairs that tag and categorize the cluster. Each key and value has a maximum length of 255 characters. You cannot set the key `Infrastructure Tool`, it is used for internal purposes to track aggregate usage.
        :param pulumi.Input[str] mongo_db_major_version: Version of the cluster to deploy. Atlas supports the following MongoDB versions for M10+ clusters: `3.6`, `4.0`, or `4.2`. You must set this value to `4.2` if `provider_instance_size_name` is either M2 or M5.
        :param pulumi.Input[str] name: Name of the cluster as it appears in Atlas. Once the cluster is created, its name cannot be changed.
        :param pulumi.Input[float] num_shards: Number of shards to deploy in the specified zone.
        :param pulumi.Input[bool] pit_enabled: - Flag that indicates if the cluster uses Point-in-Time backups. If set to true, provider_backup_enabled must also be set to true.
        :param pulumi.Input[str] project_id: The unique ID for the project to create the database user.
        :param pulumi.Input[bool] provider_backup_enabled: Flag indicating if the cluster uses Cloud Provider Snapshots for backups.
        :param pulumi.Input[float] provider_disk_iops: The maximum input/output operations per second (IOPS) the system can perform. The possible values depend on the selected providerSettings.instanceSizeName and diskSizeGB.
        :param pulumi.Input[str] provider_disk_type_name: Azure disk type of the server’s root volume. If omitted, Atlas uses the default disk type for the selected providerSettings.instanceSizeName.  Example disk types and associated storage sizes: P4 - 32GB, P6 - 64GB, P10 - 128GB, P20 - 512GB, P30 - 1024GB, P40 - 2048GB, P50 - 4095GB.  More information and the most update to date disk types/storage sizes can be located at https://docs.atlas.mongodb.com/reference/api/clusters-create-one/.
        :param pulumi.Input[bool] provider_encrypt_ebs_volume: If enabled, the Amazon EBS encryption feature encrypts the server’s root volume for both data at rest within the volume and for data moving between the volume and the instance.
        :param pulumi.Input[str] provider_instance_size_name: Atlas provides different instance sizes, each with a default storage capacity and RAM size. The instance size you select is used for all the data-bearing servers in your cluster. See [Create a Cluster](https://docs.atlas.mongodb.com/reference/api/clusters-create-one/) `providerSettings.instanceSizeName` for valid values and default resources.
        :param pulumi.Input[str] provider_name: Cloud service provider on which the servers are provisioned.
        :param pulumi.Input[str] provider_region_name: Physical location of your MongoDB cluster. The region you choose can affect network latency for clients accessing your databases.  Requires the Atlas Region name, see the reference list for [AWS](https://docs.atlas.mongodb.com/reference/amazon-aws/), [GCP](https://docs.atlas.mongodb.com/reference/google-gcp/), [Azure](https://docs.atlas.mongodb.com/reference/microsoft-azure/).
               Do not specify this field when creating a multi-region cluster using the replicationSpec document or a Global Cluster with the replicationSpecs array.
        :param pulumi.Input[str] provider_volume_type: The type of the volume. The possible values are: `STANDARD` and `PROVISIONED`.  `PROVISIONED` required if setting IOPS higher than the default instance IOPS.
        :param pulumi.Input[float] replication_factor: Number of replica set members. Each member keeps a copy of your databases, providing high availability and data redundancy. The possible values are 3, 5, or 7. The default value is 3.
        :param pulumi.Input[list] replication_specs: Configuration for cluster regions.  See Replication Spec below for more details.

        The **advanced_configuration** object supports the following:

          * `fail_index_key_too_long` (`pulumi.Input[bool]`) - When true, documents can only be updated or inserted if, for all indexed fields on the target collection, the corresponding index entries do not exceed 1024 bytes. When false, mongod writes documents that exceed the limit but does not index them.
          * `javascript_enabled` (`pulumi.Input[bool]`) - When true, the cluster allows execution of operations that perform server-side executions of JavaScript. When false, the cluster disables execution of those operations.
          * `minimum_enabled_tls_protocol` (`pulumi.Input[str]`) - Sets the minimum Transport Layer Security (TLS) version the cluster accepts for incoming connections.Valid values are:
          * `no_table_scan` (`pulumi.Input[bool]`) - When true, the cluster disables the execution of any query that requires a collection scan to return results. When false, the cluster allows the execution of those operations.
          * `oplog_size_mb` (`pulumi.Input[float]`) - The custom oplog size of the cluster. Without a value that indicates that the cluster uses the default oplog size calculated by Atlas.
          * `sample_refresh_interval_bi_connector` (`pulumi.Input[float]`) - Interval in seconds at which the mongosqld process re-samples data to create its relational schema. The default value is 300. The specified value must be a positive integer. Available only for Atlas deployments in which BI Connector for Atlas is enabled.
          * `sample_size_bi_connector` (`pulumi.Input[float]`) - Number of documents per database to sample when gathering schema information. Defaults to 100. Available only for Atlas deployments in which BI Connector for Atlas is enabled.

        The **bi_connector** object supports the following:

          * `enabled` (`pulumi.Input[str]`) - Specifies whether or not BI Connector for Atlas is enabled on the cluster.
            - Set to `true` to enable BI Connector for Atlas.
            - Set to `false` to disable BI Connector for Atlas.
          * `read_preference` (`pulumi.Input[str]`) - Specifies the read preference to be used by BI Connector for Atlas on the cluster. Each BI Connector for Atlas read preference contains a distinct combination of [readPreference](https://docs.mongodb.com/manual/core/read-preference/) and [readPreferenceTags](https://docs.mongodb.com/manual/core/read-preference/#tag-sets) options. For details on BI Connector for Atlas read preferences, refer to the [BI Connector Read Preferences Table](https://docs.atlas.mongodb.com/tutorial/create-global-writes-cluster/#bic-read-preferences).

        The **labels** object supports the following:

          * `key` (`pulumi.Input[str]`) - The key that you want to write.
          * `value` (`pulumi.Input[str]`) - The value that you want to write.

        The **replication_specs** object supports the following:

          * `id` (`pulumi.Input[str]`) - Unique identifer of the replication document for a zone in a Global Cluster.
          * `num_shards` (`pulumi.Input[float]`) - Number of shards to deploy in the specified zone.
          * `regionsConfigs` (`pulumi.Input[list]`) - Physical location of the region. Each regionsConfig document describes the region’s priority in elections and the number and type of MongoDB nodes Atlas deploys to the region. You must order each regionsConfigs document by regionsConfig.priority, descending. See Region Config below for more details.
            * `analyticsNodes` (`pulumi.Input[float]`) - The number of analytics nodes for Atlas to deploy to the region. Analytics nodes are useful for handling analytic data such as reporting queries from BI Connector for Atlas. Analytics nodes are read-only, and can never become the primary.
            * `electableNodes` (`pulumi.Input[float]`) - Number of electable nodes for Atlas to deploy to the region. Electable nodes can become the primary and can facilitate local reads.
            * `priority` (`pulumi.Input[float]`) - Election priority of the region. For regions with only read-only nodes, set this value to 0.
            * `readOnlyNodes` (`pulumi.Input[float]`) - Number of read-only nodes for Atlas to deploy to the region. Read-only nodes can never become the primary, but can facilitate local-reads. Specify 0 if you do not want any read-only nodes in the region.
            * `region_name` (`pulumi.Input[str]`) - Name for the region specified.

          * `zoneName` (`pulumi.Input[str]`) - Name for the zone in a Global Cluster.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['advanced_configuration'] = advanced_configuration
            __props__['auto_scaling_disk_gb_enabled'] = auto_scaling_disk_gb_enabled
            __props__['backing_provider_name'] = backing_provider_name
            __props__['backup_enabled'] = backup_enabled
            __props__['bi_connector'] = bi_connector
            __props__['cluster_type'] = cluster_type
            __props__['disk_size_gb'] = disk_size_gb
            __props__['encryption_at_rest_provider'] = encryption_at_rest_provider
            __props__['labels'] = labels
            __props__['mongo_db_major_version'] = mongo_db_major_version
            __props__['name'] = name
            __props__['num_shards'] = num_shards
            __props__['pit_enabled'] = pit_enabled
            if project_id is None:
                raise TypeError("Missing required property 'project_id'")
            __props__['project_id'] = project_id
            __props__['provider_backup_enabled'] = provider_backup_enabled
            __props__['provider_disk_iops'] = provider_disk_iops
            __props__['provider_disk_type_name'] = provider_disk_type_name
            __props__['provider_encrypt_ebs_volume'] = provider_encrypt_ebs_volume
            if provider_instance_size_name is None:
                raise TypeError("Missing required property 'provider_instance_size_name'")
            __props__['provider_instance_size_name'] = provider_instance_size_name
            if provider_name is None:
                raise TypeError("Missing required property 'provider_name'")
            __props__['provider_name'] = provider_name
            __props__['provider_region_name'] = provider_region_name
            __props__['provider_volume_type'] = provider_volume_type
            __props__['replication_factor'] = replication_factor
            __props__['replication_specs'] = replication_specs
            __props__['cluster_id'] = None
            __props__['connection_strings'] = None
            __props__['mongo_db_version'] = None
            __props__['mongo_uri'] = None
            __props__['mongo_uri_updated'] = None
            __props__['mongo_uri_with_options'] = None
            __props__['paused'] = None
            __props__['snapshot_backup_policies'] = None
            __props__['srv_address'] = None
            __props__['state_name'] = None
        super(Cluster, __self__).__init__(
            'mongodbatlas:index/cluster:Cluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, advanced_configuration=None, auto_scaling_disk_gb_enabled=None, backing_provider_name=None, backup_enabled=None, bi_connector=None, cluster_id=None, cluster_type=None, connection_strings=None, disk_size_gb=None, encryption_at_rest_provider=None, labels=None, mongo_db_major_version=None, mongo_db_version=None, mongo_uri=None, mongo_uri_updated=None, mongo_uri_with_options=None, name=None, num_shards=None, paused=None, pit_enabled=None, project_id=None, provider_backup_enabled=None, provider_disk_iops=None, provider_disk_type_name=None, provider_encrypt_ebs_volume=None, provider_instance_size_name=None, provider_name=None, provider_region_name=None, provider_volume_type=None, replication_factor=None, replication_specs=None, snapshot_backup_policies=None, srv_address=None, state_name=None):
        """
        Get an existing Cluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] auto_scaling_disk_gb_enabled: Specifies whether disk auto-scaling is enabled. The default is true.
               - Set to `true` to enable disk auto-scaling.
               - Set to `false` to disable disk auto-scaling.
        :param pulumi.Input[str] backing_provider_name: Cloud service provider on which the server for a multi-tenant cluster is provisioned.
        :param pulumi.Input[bool] backup_enabled: Legacy Option - Set to true to enable Atlas continuous backups for the cluster.
        :param pulumi.Input[dict] bi_connector: Specifies BI Connector for Atlas configuration on this cluster. BI Connector for Atlas is only available for M10+ clusters. See BI Connector below for more details.
        :param pulumi.Input[str] cluster_id: The cluster ID.
        :param pulumi.Input[str] cluster_type: Specifies the type of the cluster that you want to modify. You cannot convert a sharded cluster deployment to a replica set deployment.
        :param pulumi.Input[dict] connection_strings: Set of connection strings that your applications use to connect to this cluster. More info in [Connection-strings](https://docs.mongodb.com/manual/reference/connection-string/). Use the parameters in this object to connect your applications to this cluster. To learn more about the formats of connection strings, see [Connection String Options](https://docs.atlas.mongodb.com/reference/faq/connection-changes/). NOTE: Atlas returns the contents of this object after the cluster is operational, not while it builds the cluster.
               - `connection_strings.standard` -   Public mongodb:// connection string for this cluster.
               - `connection_strings.standard_srv` - Public mongodb+srv:// connection string for this cluster. The mongodb+srv protocol tells the driver to look up the seed list of hosts in DNS. Atlas synchronizes this list with the nodes in a cluster. If the connection string uses this URI format, you don’t need to append the seed list or change the URI if the nodes change. Use this URI format if your driver supports it. If it doesn’t, use connectionStrings.standard.
               - `connection_strings.aws_private_link` -  [Private-endpoint-aware](https://docs.atlas.mongodb.com/security-private-endpoint/#private-endpoint-connection-strings) mongodb://connection strings for each interface VPC endpoint you configured to connect to this cluster. Returned only if you created a AWS PrivateLink connection to this cluster.
               - `connection_strings.aws_private_link_srv` - [Private-endpoint-aware](https://docs.atlas.mongodb.com/security-private-endpoint/#private-endpoint-connection-strings) mongodb+srv://connection strings for each interface VPC endpoint you configured to connect to this cluster. Returned only if you created a AWS PrivateLink connection to this cluster. Use this URI format if your driver supports it. If it doesn’t, use connectionStrings.awsPrivateLink.
               - `connection_strings.private` -   [Network-peering-endpoint-aware](https://docs.atlas.mongodb.com/security-vpc-peering/#vpc-peering) mongodb://connection strings for each interface VPC endpoint you configured to connect to this cluster. Returned only if you created a network peering connection to this cluster.
               - `connection_strings.private_srv` -  [Network-peering-endpoint-aware](https://docs.atlas.mongodb.com/security-vpc-peering/#vpc-peering) mongodb+srv://connection strings for each interface VPC endpoint you configured to connect to this cluster. Returned only if you created a network peering connection to this cluster.
        :param pulumi.Input[float] disk_size_gb: The size in gigabytes of the server’s root volume. You can add capacity by increasing this number, up to a maximum possible value of 4096 (i.e., 4 TB). This value must be a positive integer.
        :param pulumi.Input[str] encryption_at_rest_provider: Set the Encryption at Rest parameter.  Possible values are AWS, GCP, AZURE or NONE.  Requires M10 or greater and for backup_enabled to be false or omitted.
        :param pulumi.Input[list] labels: Array containing key-value pairs that tag and categorize the cluster. Each key and value has a maximum length of 255 characters. You cannot set the key `Infrastructure Tool`, it is used for internal purposes to track aggregate usage.
        :param pulumi.Input[str] mongo_db_major_version: Version of the cluster to deploy. Atlas supports the following MongoDB versions for M10+ clusters: `3.6`, `4.0`, or `4.2`. You must set this value to `4.2` if `provider_instance_size_name` is either M2 or M5.
        :param pulumi.Input[str] mongo_db_version: Version of MongoDB the cluster runs, in `major-version`.`minor-version` format.
        :param pulumi.Input[str] mongo_uri: Base connection string for the cluster. Atlas only displays this field after the cluster is operational, not while it builds the cluster.
        :param pulumi.Input[str] mongo_uri_updated: Lists when the connection string was last updated. The connection string changes, for example, if you change a replica set to a sharded cluster.
        :param pulumi.Input[str] mongo_uri_with_options: connection string for connecting to the Atlas cluster. Includes the replicaSet, ssl, and authSource query parameters in the connection string with values appropriate for the cluster.
        :param pulumi.Input[str] name: Name of the cluster as it appears in Atlas. Once the cluster is created, its name cannot be changed.
        :param pulumi.Input[float] num_shards: Number of shards to deploy in the specified zone.
        :param pulumi.Input[bool] paused: Flag that indicates whether the cluster is paused or not.
        :param pulumi.Input[bool] pit_enabled: - Flag that indicates if the cluster uses Point-in-Time backups. If set to true, provider_backup_enabled must also be set to true.
        :param pulumi.Input[str] project_id: The unique ID for the project to create the database user.
        :param pulumi.Input[bool] provider_backup_enabled: Flag indicating if the cluster uses Cloud Provider Snapshots for backups.
        :param pulumi.Input[float] provider_disk_iops: The maximum input/output operations per second (IOPS) the system can perform. The possible values depend on the selected providerSettings.instanceSizeName and diskSizeGB.
        :param pulumi.Input[str] provider_disk_type_name: Azure disk type of the server’s root volume. If omitted, Atlas uses the default disk type for the selected providerSettings.instanceSizeName.  Example disk types and associated storage sizes: P4 - 32GB, P6 - 64GB, P10 - 128GB, P20 - 512GB, P30 - 1024GB, P40 - 2048GB, P50 - 4095GB.  More information and the most update to date disk types/storage sizes can be located at https://docs.atlas.mongodb.com/reference/api/clusters-create-one/.
        :param pulumi.Input[bool] provider_encrypt_ebs_volume: If enabled, the Amazon EBS encryption feature encrypts the server’s root volume for both data at rest within the volume and for data moving between the volume and the instance.
        :param pulumi.Input[str] provider_instance_size_name: Atlas provides different instance sizes, each with a default storage capacity and RAM size. The instance size you select is used for all the data-bearing servers in your cluster. See [Create a Cluster](https://docs.atlas.mongodb.com/reference/api/clusters-create-one/) `providerSettings.instanceSizeName` for valid values and default resources.
        :param pulumi.Input[str] provider_name: Cloud service provider on which the servers are provisioned.
        :param pulumi.Input[str] provider_region_name: Physical location of your MongoDB cluster. The region you choose can affect network latency for clients accessing your databases.  Requires the Atlas Region name, see the reference list for [AWS](https://docs.atlas.mongodb.com/reference/amazon-aws/), [GCP](https://docs.atlas.mongodb.com/reference/google-gcp/), [Azure](https://docs.atlas.mongodb.com/reference/microsoft-azure/).
               Do not specify this field when creating a multi-region cluster using the replicationSpec document or a Global Cluster with the replicationSpecs array.
        :param pulumi.Input[str] provider_volume_type: The type of the volume. The possible values are: `STANDARD` and `PROVISIONED`.  `PROVISIONED` required if setting IOPS higher than the default instance IOPS.
        :param pulumi.Input[float] replication_factor: Number of replica set members. Each member keeps a copy of your databases, providing high availability and data redundancy. The possible values are 3, 5, or 7. The default value is 3.
        :param pulumi.Input[list] replication_specs: Configuration for cluster regions.  See Replication Spec below for more details.
        :param pulumi.Input[list] snapshot_backup_policies: current snapshot schedule and retention settings for the cluster.
        :param pulumi.Input[str] srv_address: Connection string for connecting to the Atlas cluster. The +srv modifier forces the connection to use TLS/SSL. See the mongoURI for additional options.
        :param pulumi.Input[str] state_name: Current state of the cluster. The possible states are:
               - IDLE
               - CREATING
               - UPDATING
               - DELETING
               - DELETED
               - REPAIRING

        The **advanced_configuration** object supports the following:

          * `fail_index_key_too_long` (`pulumi.Input[bool]`) - When true, documents can only be updated or inserted if, for all indexed fields on the target collection, the corresponding index entries do not exceed 1024 bytes. When false, mongod writes documents that exceed the limit but does not index them.
          * `javascript_enabled` (`pulumi.Input[bool]`) - When true, the cluster allows execution of operations that perform server-side executions of JavaScript. When false, the cluster disables execution of those operations.
          * `minimum_enabled_tls_protocol` (`pulumi.Input[str]`) - Sets the minimum Transport Layer Security (TLS) version the cluster accepts for incoming connections.Valid values are:
          * `no_table_scan` (`pulumi.Input[bool]`) - When true, the cluster disables the execution of any query that requires a collection scan to return results. When false, the cluster allows the execution of those operations.
          * `oplog_size_mb` (`pulumi.Input[float]`) - The custom oplog size of the cluster. Without a value that indicates that the cluster uses the default oplog size calculated by Atlas.
          * `sample_refresh_interval_bi_connector` (`pulumi.Input[float]`) - Interval in seconds at which the mongosqld process re-samples data to create its relational schema. The default value is 300. The specified value must be a positive integer. Available only for Atlas deployments in which BI Connector for Atlas is enabled.
          * `sample_size_bi_connector` (`pulumi.Input[float]`) - Number of documents per database to sample when gathering schema information. Defaults to 100. Available only for Atlas deployments in which BI Connector for Atlas is enabled.

        The **bi_connector** object supports the following:

          * `enabled` (`pulumi.Input[str]`) - Specifies whether or not BI Connector for Atlas is enabled on the cluster.
            - Set to `true` to enable BI Connector for Atlas.
            - Set to `false` to disable BI Connector for Atlas.
          * `read_preference` (`pulumi.Input[str]`) - Specifies the read preference to be used by BI Connector for Atlas on the cluster. Each BI Connector for Atlas read preference contains a distinct combination of [readPreference](https://docs.mongodb.com/manual/core/read-preference/) and [readPreferenceTags](https://docs.mongodb.com/manual/core/read-preference/#tag-sets) options. For details on BI Connector for Atlas read preferences, refer to the [BI Connector Read Preferences Table](https://docs.atlas.mongodb.com/tutorial/create-global-writes-cluster/#bic-read-preferences).

        The **connection_strings** object supports the following:

          * `awsPrivateLink` (`pulumi.Input[dict]`)
          * `awsPrivateLinkSrv` (`pulumi.Input[dict]`)
          * `private` (`pulumi.Input[str]`)
          * `privateSrv` (`pulumi.Input[str]`)
          * `standard` (`pulumi.Input[str]`)
          * `standardSrv` (`pulumi.Input[str]`)

        The **labels** object supports the following:

          * `key` (`pulumi.Input[str]`) - The key that you want to write.
          * `value` (`pulumi.Input[str]`) - The value that you want to write.

        The **replication_specs** object supports the following:

          * `id` (`pulumi.Input[str]`) - Unique identifer of the replication document for a zone in a Global Cluster.
          * `num_shards` (`pulumi.Input[float]`) - Number of shards to deploy in the specified zone.
          * `regionsConfigs` (`pulumi.Input[list]`) - Physical location of the region. Each regionsConfig document describes the region’s priority in elections and the number and type of MongoDB nodes Atlas deploys to the region. You must order each regionsConfigs document by regionsConfig.priority, descending. See Region Config below for more details.
            * `analyticsNodes` (`pulumi.Input[float]`) - The number of analytics nodes for Atlas to deploy to the region. Analytics nodes are useful for handling analytic data such as reporting queries from BI Connector for Atlas. Analytics nodes are read-only, and can never become the primary.
            * `electableNodes` (`pulumi.Input[float]`) - Number of electable nodes for Atlas to deploy to the region. Electable nodes can become the primary and can facilitate local reads.
            * `priority` (`pulumi.Input[float]`) - Election priority of the region. For regions with only read-only nodes, set this value to 0.
            * `readOnlyNodes` (`pulumi.Input[float]`) - Number of read-only nodes for Atlas to deploy to the region. Read-only nodes can never become the primary, but can facilitate local-reads. Specify 0 if you do not want any read-only nodes in the region.
            * `region_name` (`pulumi.Input[str]`) - Name for the region specified.

          * `zoneName` (`pulumi.Input[str]`) - Name for the zone in a Global Cluster.

        The **snapshot_backup_policies** object supports the following:

          * `cluster_id` (`pulumi.Input[str]`) - The cluster ID.
          * `cluster_name` (`pulumi.Input[str]`)
          * `next_snapshot` (`pulumi.Input[str]`)
          * `policies` (`pulumi.Input[list]`)
            * `id` (`pulumi.Input[str]`) - Unique identifer of the replication document for a zone in a Global Cluster.
            * `policyItems` (`pulumi.Input[list]`)
              * `frequencyInterval` (`pulumi.Input[float]`)
              * `frequencyType` (`pulumi.Input[str]`)
              * `id` (`pulumi.Input[str]`) - Unique identifer of the replication document for a zone in a Global Cluster.
              * `retentionUnit` (`pulumi.Input[str]`)
              * `retentionValue` (`pulumi.Input[float]`)

          * `reference_hour_of_day` (`pulumi.Input[float]`)
          * `reference_minute_of_hour` (`pulumi.Input[float]`)
          * `restore_window_days` (`pulumi.Input[float]`)
          * `update_snapshots` (`pulumi.Input[bool]`)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["advanced_configuration"] = advanced_configuration
        __props__["auto_scaling_disk_gb_enabled"] = auto_scaling_disk_gb_enabled
        __props__["backing_provider_name"] = backing_provider_name
        __props__["backup_enabled"] = backup_enabled
        __props__["bi_connector"] = bi_connector
        __props__["cluster_id"] = cluster_id
        __props__["cluster_type"] = cluster_type
        __props__["connection_strings"] = connection_strings
        __props__["disk_size_gb"] = disk_size_gb
        __props__["encryption_at_rest_provider"] = encryption_at_rest_provider
        __props__["labels"] = labels
        __props__["mongo_db_major_version"] = mongo_db_major_version
        __props__["mongo_db_version"] = mongo_db_version
        __props__["mongo_uri"] = mongo_uri
        __props__["mongo_uri_updated"] = mongo_uri_updated
        __props__["mongo_uri_with_options"] = mongo_uri_with_options
        __props__["name"] = name
        __props__["num_shards"] = num_shards
        __props__["paused"] = paused
        __props__["pit_enabled"] = pit_enabled
        __props__["project_id"] = project_id
        __props__["provider_backup_enabled"] = provider_backup_enabled
        __props__["provider_disk_iops"] = provider_disk_iops
        __props__["provider_disk_type_name"] = provider_disk_type_name
        __props__["provider_encrypt_ebs_volume"] = provider_encrypt_ebs_volume
        __props__["provider_instance_size_name"] = provider_instance_size_name
        __props__["provider_name"] = provider_name
        __props__["provider_region_name"] = provider_region_name
        __props__["provider_volume_type"] = provider_volume_type
        __props__["replication_factor"] = replication_factor
        __props__["replication_specs"] = replication_specs
        __props__["snapshot_backup_policies"] = snapshot_backup_policies
        __props__["srv_address"] = srv_address
        __props__["state_name"] = state_name
        return Cluster(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

