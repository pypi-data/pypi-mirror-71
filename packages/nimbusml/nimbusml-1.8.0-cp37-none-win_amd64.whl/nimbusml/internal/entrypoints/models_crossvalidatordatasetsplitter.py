# - Generated by tools/entrypoint_compiler.py: do not edit by hand
"""
Models.CrossValidatorDatasetSplitter
"""

import numbers

from ..utils.entrypoints import EntryPoint
from ..utils.utils import try_set, unlist


def models_crossvalidatordatasetsplitter(
        data,
        train_data,
        test_data,
        num_folds=2,
        stratification_column=None,
        **params):
    """
    **Description**
        Split the dataset into the specified number of cross-validation folds
        (train and test sets)

    :param data: Input dataset (inputs).
    :param num_folds: Number of folds to split into (inputs).
    :param stratification_column: Stratification column (inputs).
    :param train_data: Training data (one dataset per fold)
        (outputs).
    :param test_data: Testing data (one dataset per fold) (outputs).
    """

    entrypoint_name = 'Models.CrossValidatorDatasetSplitter'
    inputs = {}
    outputs = {}

    if data is not None:
        inputs['Data'] = try_set(
            obj=data,
            none_acceptable=False,
            is_of_type=str)
    if num_folds is not None:
        inputs['NumFolds'] = try_set(
            obj=num_folds,
            none_acceptable=True,
            is_of_type=numbers.Real)
    if stratification_column is not None:
        inputs['StratificationColumn'] = try_set(
            obj=stratification_column,
            none_acceptable=True,
            is_of_type=str,
            is_column=True)
    if train_data is not None:
        outputs['TrainData'] = try_set(
            obj=train_data,
            none_acceptable=False,
            is_of_type=list)
    if test_data is not None:
        outputs['TestData'] = try_set(
            obj=test_data,
            none_acceptable=False,
            is_of_type=list)

    input_variables = {
        x for x in unlist(inputs.values())
        if isinstance(x, str) and x.startswith("$")}
    output_variables = {
        x for x in unlist(outputs.values())
        if isinstance(x, str) and x.startswith("$")}

    entrypoint = EntryPoint(
        name=entrypoint_name, inputs=inputs, outputs=outputs,
        input_variables=input_variables,
        output_variables=output_variables)
    return entrypoint
