# - Generated by tools/entrypoint_compiler.py: do not edit by hand
"""
Transforms.TreeLeafFeaturizer
"""

import numbers

from ..utils.entrypoints import EntryPoint
from ..utils.utils import try_set, unlist


def transforms_treeleaffeaturizer(
        data,
        predictor_model,
        output_data=None,
        model=None,
        suffix=None,
        label_permutation_seed=0,
        **params):
    """
    **Description**
        Trains a tree ensemble, or loads it from a file, then maps a numeric
        feature vector to three outputs: 1. A vector containing the
        individual tree outputs of the tree ensemble. 2. A vector
        indicating the leaves that the feature vector falls on in the
        tree ensemble. 3. A vector indicating the paths that the
        feature vector falls on in the tree ensemble. If a both a
        model file and a trainer are specified - will use the model
        file. If neither are specified, will train a default FastTree
        model. This can handle key labels by training a regression
        model towards their optionally permuted indices.

    :param data: Input dataset (inputs).
    :param predictor_model: Trainer to use (inputs).
    :param suffix: Output column: The suffix to append to the default
        column names (inputs).
    :param label_permutation_seed: If specified, determines the
        permutation seed for applying this featurizer to a multiclass
        problem. (inputs).
    :param output_data: Transformed dataset (outputs).
    :param model: Transform model (outputs).
    """

    entrypoint_name = 'Transforms.TreeLeafFeaturizer'
    inputs = {}
    outputs = {}

    if data is not None:
        inputs['Data'] = try_set(
            obj=data,
            none_acceptable=False,
            is_of_type=str)
    if predictor_model is not None:
        inputs['PredictorModel'] = try_set(
            obj=predictor_model,
            none_acceptable=False,
            is_of_type=str)
    if suffix is not None:
        inputs['Suffix'] = try_set(
            obj=suffix,
            none_acceptable=True,
            is_of_type=str)
    if label_permutation_seed is not None:
        inputs['LabelPermutationSeed'] = try_set(
            obj=label_permutation_seed,
            none_acceptable=True,
            is_of_type=numbers.Real)
    if output_data is not None:
        outputs['OutputData'] = try_set(
            obj=output_data,
            none_acceptable=False,
            is_of_type=str)
    if model is not None:
        outputs['Model'] = try_set(
            obj=model,
            none_acceptable=False,
            is_of_type=str)

    input_variables = {
        x for x in unlist(inputs.values())
        if isinstance(x, str) and x.startswith("$")}
    output_variables = {
        x for x in unlist(outputs.values())
        if isinstance(x, str) and x.startswith("$")}

    entrypoint = EntryPoint(
        name=entrypoint_name, inputs=inputs, outputs=outputs,
        input_variables=input_variables,
        output_variables=output_variables)
    return entrypoint
