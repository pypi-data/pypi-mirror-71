# - Generated by tools/entrypoint_compiler.py: do not edit by hand
"""
Models.ClassificationEvaluator
"""

import numbers

from ..utils.entrypoints import EntryPoint
from ..utils.utils import try_set, unlist


def models_classificationevaluator(
        data,
        warnings=None,
        overall_metrics=None,
        per_instance_metrics=None,
        confusion_matrix=None,
        name_column='Name',
        output_top_k_acc=None,
        num_top_classes_to_output=3,
        num_classes_confusion_matrix=10,
        output_per_class_statistics=False,
        label_column=None,
        weight_column=None,
        score_column=None,
        strat_column=None,
        **params):
    """
    **Description**
        Evaluates a multi class classification scored dataset.

    :param data: The data to be used for evaluation. (inputs).
    :param name_column: Name column name. (inputs).
    :param output_top_k_acc: Output top-K accuracy. (inputs).
    :param num_top_classes_to_output: Output top-K classes. (inputs).
    :param num_classes_confusion_matrix: Maximum number of classes in
        confusion matrix. (inputs).
    :param output_per_class_statistics: Output per class statistics
        and confusion matrix. (inputs).
    :param label_column: Column to use for labels. (inputs).
    :param weight_column: Weight column name. (inputs).
    :param score_column: Score column name. (inputs).
    :param strat_column: Stratification column name. (inputs).
    :param warnings: Warning dataset (outputs).
    :param overall_metrics: Overall metrics dataset (outputs).
    :param per_instance_metrics: Per instance metrics dataset
        (outputs).
    :param confusion_matrix: Confusion matrix dataset (outputs).
    """

    entrypoint_name = 'Models.ClassificationEvaluator'
    inputs = {}
    outputs = {}

    if data is not None:
        inputs['Data'] = try_set(
            obj=data,
            none_acceptable=False,
            is_of_type=str)
    if name_column is not None:
        inputs['NameColumn'] = try_set(
            obj=name_column,
            none_acceptable=True,
            is_of_type=str,
            is_column=True)
    if output_top_k_acc is not None:
        inputs['OutputTopKAcc'] = try_set(
            obj=output_top_k_acc,
            none_acceptable=True,
            is_of_type=numbers.Real)
    if num_top_classes_to_output is not None:
        inputs['NumTopClassesToOutput'] = try_set(
            obj=num_top_classes_to_output,
            none_acceptable=True,
            is_of_type=numbers.Real)
    if num_classes_confusion_matrix is not None:
        inputs['NumClassesConfusionMatrix'] = try_set(
            obj=num_classes_confusion_matrix,
            none_acceptable=True,
            is_of_type=numbers.Real)
    if output_per_class_statistics is not None:
        inputs['OutputPerClassStatistics'] = try_set(
            obj=output_per_class_statistics,
            none_acceptable=True,
            is_of_type=bool)
    if label_column is not None:
        inputs['LabelColumn'] = try_set(
            obj=label_column,
            none_acceptable=True,
            is_of_type=str,
            is_column=True)
    if weight_column is not None:
        inputs['WeightColumn'] = try_set(
            obj=weight_column,
            none_acceptable=True,
            is_of_type=str,
            is_column=True)
    if score_column is not None:
        inputs['ScoreColumn'] = try_set(
            obj=score_column,
            none_acceptable=True,
            is_of_type=str,
            is_column=True)
    if strat_column is not None:
        inputs['StratColumn'] = try_set(
            obj=strat_column,
            none_acceptable=True,
            is_of_type=list,
            is_column=True)
    if warnings is not None:
        outputs['Warnings'] = try_set(
            obj=warnings, none_acceptable=False, is_of_type=str)
    if overall_metrics is not None:
        outputs['OverallMetrics'] = try_set(
            obj=overall_metrics, none_acceptable=False, is_of_type=str)
    if per_instance_metrics is not None:
        outputs['PerInstanceMetrics'] = try_set(
            obj=per_instance_metrics, none_acceptable=False, is_of_type=str)
    if confusion_matrix is not None:
        outputs['ConfusionMatrix'] = try_set(
            obj=confusion_matrix, none_acceptable=False, is_of_type=str)

    input_variables = {
        x for x in unlist(inputs.values())
        if isinstance(x, str) and x.startswith("$")}
    output_variables = {
        x for x in unlist(outputs.values())
        if isinstance(x, str) and x.startswith("$")}

    entrypoint = EntryPoint(
        name=entrypoint_name, inputs=inputs, outputs=outputs,
        input_variables=input_variables,
        output_variables=output_variables)
    return entrypoint
