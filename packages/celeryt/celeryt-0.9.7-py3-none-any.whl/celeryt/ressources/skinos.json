{
  "dirs": [],
  "files": {
    "requirements/common.txt": "celery>=4.4.5,<5\nsentry_sdk>=0.14.4,<1.0.0\ncelery-skinos>=0.2.5",
    "{__app_name__celeryt__}/celery.py": "\"\"\"\n    Celery worker base\n\"\"\"\n\nimport sentry_sdk\nfrom celery import Celery\n\nfrom celery.result import AsyncResult\nfrom sentry_sdk.integrations.celery import CeleryIntegration\nfrom skinos.custom_consumer import CustomConsumer\n\nfrom {{__app_name__celeryt__}}.get_settings import get_settings\n\n# avoid memory leak from celery\ndelattr(AsyncResult, '__del__')\n\n# Get settings\nsettings = get_settings()\n\n# SENTRY INIT\nsentry_sdk.init(\n    dsn=settings.SENTRY_DSN,\n    release=settings.SENTRY_RELEASE,\n    environment=settings.SENTRY_ENV,\n    integrations=[CeleryIntegration()]\n)\n\n\n# CELERY CONF\nBROKER_TRANSPORT_OPTIONS = {'confirm_public': True}\nCELERY_BROKER = \"amqp://{user}:{password}@{host}:{port}{vhost}\".format(\n    user=settings.AMQP_USER,\n    password=settings.AMQP_PASSWORD,\n    host=settings.AMQP_HOST,\n    port=settings.AMQP_PORT,\n    vhost=settings.AMQP_VHOST\n)\n\n# CELERY INIT\napp = Celery(\n    settings.CELERY_APP_NAME,\n    backend=settings.CELERY_BACKEND,\n    broker=CELERY_BROKER,\n    include=[f'{settings.CELERY_APP_NAME}.tasks']\n)\napp.config_from_object(BROKER_TRANSPORT_OPTIONS)\napp.conf.timezone = settings.CELERY_TIMEZONE\n\n\n# SKINOS INIT\n# with sentry but no re-raise\nCustomConsumer.with_sentry(__with_sentry=True, _raises=False)\n# declare an exchange\nCustomConsumer.add_exchange(exchange_name='my_exchange', routing_key='my_exchange.*.*')\n\n\n# BASIC DEBUG TASK\n@app.task\ndef debug_task(msg: str) -> None:\n    print(\"this channel works. {msg}\".format(msg=msg))\n\n\n# BASIC DEBUG TASK WITH RETRY\n@app.task(\n    autoretry_for=(RuntimeError, NotImplementedError),\n    retry_backoff=settings.CELERY_RETRY_BACKOFF,\n    retry_kwargs={'max_retries': settings.CELERY_RETRY_MAX})\ndef debug_retry_task() -> None:\n    raise RuntimeError\n\n\n# BASIC SKINOS TASKS\n@CustomConsumer.consumer(\n    exchange_name='my_exchange',\n    queue_name='my_exchange.queue',\n    binding_key='my_exchange.queue.binding',\n)\ndef skinos_task(body, message):\n    print(f'body content {body}')\n    print(f'message celery object {message}')\n\n    # run a celery task through AMQP\n    debug_task.delay(msg='hello world!')\n    # run a celery task locally\n    debug_task.s()(msg='hello world!')"
  }
}