# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pyogmaneo
else:
    import _pyogmaneo

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyogmaneo.delete_SwigPyIterator

    def value(self):
        return _pyogmaneo.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _pyogmaneo.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _pyogmaneo.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _pyogmaneo.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _pyogmaneo.SwigPyIterator_equal(self, x)

    def copy(self):
        return _pyogmaneo.SwigPyIterator_copy(self)

    def next(self):
        return _pyogmaneo.SwigPyIterator_next(self)

    def __next__(self):
        return _pyogmaneo.SwigPyIterator___next__(self)

    def previous(self):
        return _pyogmaneo.SwigPyIterator_previous(self)

    def advance(self, n):
        return _pyogmaneo.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _pyogmaneo.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _pyogmaneo.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _pyogmaneo.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _pyogmaneo.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _pyogmaneo.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _pyogmaneo.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _pyogmaneo:
_pyogmaneo.SwigPyIterator_swigregister(SwigPyIterator)

class StdVeci(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyogmaneo.StdVeci_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyogmaneo.StdVeci___nonzero__(self)

    def __bool__(self):
        return _pyogmaneo.StdVeci___bool__(self)

    def __len__(self):
        return _pyogmaneo.StdVeci___len__(self)

    def __getslice__(self, i, j):
        return _pyogmaneo.StdVeci___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyogmaneo.StdVeci___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyogmaneo.StdVeci___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyogmaneo.StdVeci___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyogmaneo.StdVeci___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyogmaneo.StdVeci___setitem__(self, *args)

    def pop(self):
        return _pyogmaneo.StdVeci_pop(self)

    def append(self, x):
        return _pyogmaneo.StdVeci_append(self, x)

    def empty(self):
        return _pyogmaneo.StdVeci_empty(self)

    def size(self):
        return _pyogmaneo.StdVeci_size(self)

    def swap(self, v):
        return _pyogmaneo.StdVeci_swap(self, v)

    def begin(self):
        return _pyogmaneo.StdVeci_begin(self)

    def end(self):
        return _pyogmaneo.StdVeci_end(self)

    def rbegin(self):
        return _pyogmaneo.StdVeci_rbegin(self)

    def rend(self):
        return _pyogmaneo.StdVeci_rend(self)

    def clear(self):
        return _pyogmaneo.StdVeci_clear(self)

    def get_allocator(self):
        return _pyogmaneo.StdVeci_get_allocator(self)

    def pop_back(self):
        return _pyogmaneo.StdVeci_pop_back(self)

    def erase(self, *args):
        return _pyogmaneo.StdVeci_erase(self, *args)

    def __init__(self, *args):
        _pyogmaneo.StdVeci_swiginit(self, _pyogmaneo.new_StdVeci(*args))

    def push_back(self, x):
        return _pyogmaneo.StdVeci_push_back(self, x)

    def front(self):
        return _pyogmaneo.StdVeci_front(self)

    def back(self):
        return _pyogmaneo.StdVeci_back(self)

    def assign(self, n, x):
        return _pyogmaneo.StdVeci_assign(self, n, x)

    def resize(self, *args):
        return _pyogmaneo.StdVeci_resize(self, *args)

    def insert(self, *args):
        return _pyogmaneo.StdVeci_insert(self, *args)

    def reserve(self, n):
        return _pyogmaneo.StdVeci_reserve(self, n)

    def capacity(self):
        return _pyogmaneo.StdVeci_capacity(self)
    __swig_destroy__ = _pyogmaneo.delete_StdVeci

# Register StdVeci in _pyogmaneo:
_pyogmaneo.StdVeci_swigregister(StdVeci)

class StdVec2Di(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyogmaneo.StdVec2Di_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyogmaneo.StdVec2Di___nonzero__(self)

    def __bool__(self):
        return _pyogmaneo.StdVec2Di___bool__(self)

    def __len__(self):
        return _pyogmaneo.StdVec2Di___len__(self)

    def __getslice__(self, i, j):
        return _pyogmaneo.StdVec2Di___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyogmaneo.StdVec2Di___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyogmaneo.StdVec2Di___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyogmaneo.StdVec2Di___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyogmaneo.StdVec2Di___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyogmaneo.StdVec2Di___setitem__(self, *args)

    def pop(self):
        return _pyogmaneo.StdVec2Di_pop(self)

    def append(self, x):
        return _pyogmaneo.StdVec2Di_append(self, x)

    def empty(self):
        return _pyogmaneo.StdVec2Di_empty(self)

    def size(self):
        return _pyogmaneo.StdVec2Di_size(self)

    def swap(self, v):
        return _pyogmaneo.StdVec2Di_swap(self, v)

    def begin(self):
        return _pyogmaneo.StdVec2Di_begin(self)

    def end(self):
        return _pyogmaneo.StdVec2Di_end(self)

    def rbegin(self):
        return _pyogmaneo.StdVec2Di_rbegin(self)

    def rend(self):
        return _pyogmaneo.StdVec2Di_rend(self)

    def clear(self):
        return _pyogmaneo.StdVec2Di_clear(self)

    def get_allocator(self):
        return _pyogmaneo.StdVec2Di_get_allocator(self)

    def pop_back(self):
        return _pyogmaneo.StdVec2Di_pop_back(self)

    def erase(self, *args):
        return _pyogmaneo.StdVec2Di_erase(self, *args)

    def __init__(self, *args):
        _pyogmaneo.StdVec2Di_swiginit(self, _pyogmaneo.new_StdVec2Di(*args))

    def push_back(self, x):
        return _pyogmaneo.StdVec2Di_push_back(self, x)

    def front(self):
        return _pyogmaneo.StdVec2Di_front(self)

    def back(self):
        return _pyogmaneo.StdVec2Di_back(self)

    def assign(self, n, x):
        return _pyogmaneo.StdVec2Di_assign(self, n, x)

    def resize(self, *args):
        return _pyogmaneo.StdVec2Di_resize(self, *args)

    def insert(self, *args):
        return _pyogmaneo.StdVec2Di_insert(self, *args)

    def reserve(self, n):
        return _pyogmaneo.StdVec2Di_reserve(self, n)

    def capacity(self):
        return _pyogmaneo.StdVec2Di_capacity(self)
    __swig_destroy__ = _pyogmaneo.delete_StdVec2Di

# Register StdVec2Di in _pyogmaneo:
_pyogmaneo.StdVec2Di_swigregister(StdVec2Di)

class StdVecf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyogmaneo.StdVecf_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyogmaneo.StdVecf___nonzero__(self)

    def __bool__(self):
        return _pyogmaneo.StdVecf___bool__(self)

    def __len__(self):
        return _pyogmaneo.StdVecf___len__(self)

    def __getslice__(self, i, j):
        return _pyogmaneo.StdVecf___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyogmaneo.StdVecf___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyogmaneo.StdVecf___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyogmaneo.StdVecf___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyogmaneo.StdVecf___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyogmaneo.StdVecf___setitem__(self, *args)

    def pop(self):
        return _pyogmaneo.StdVecf_pop(self)

    def append(self, x):
        return _pyogmaneo.StdVecf_append(self, x)

    def empty(self):
        return _pyogmaneo.StdVecf_empty(self)

    def size(self):
        return _pyogmaneo.StdVecf_size(self)

    def swap(self, v):
        return _pyogmaneo.StdVecf_swap(self, v)

    def begin(self):
        return _pyogmaneo.StdVecf_begin(self)

    def end(self):
        return _pyogmaneo.StdVecf_end(self)

    def rbegin(self):
        return _pyogmaneo.StdVecf_rbegin(self)

    def rend(self):
        return _pyogmaneo.StdVecf_rend(self)

    def clear(self):
        return _pyogmaneo.StdVecf_clear(self)

    def get_allocator(self):
        return _pyogmaneo.StdVecf_get_allocator(self)

    def pop_back(self):
        return _pyogmaneo.StdVecf_pop_back(self)

    def erase(self, *args):
        return _pyogmaneo.StdVecf_erase(self, *args)

    def __init__(self, *args):
        _pyogmaneo.StdVecf_swiginit(self, _pyogmaneo.new_StdVecf(*args))

    def push_back(self, x):
        return _pyogmaneo.StdVecf_push_back(self, x)

    def front(self):
        return _pyogmaneo.StdVecf_front(self)

    def back(self):
        return _pyogmaneo.StdVecf_back(self)

    def assign(self, n, x):
        return _pyogmaneo.StdVecf_assign(self, n, x)

    def resize(self, *args):
        return _pyogmaneo.StdVecf_resize(self, *args)

    def insert(self, *args):
        return _pyogmaneo.StdVecf_insert(self, *args)

    def reserve(self, n):
        return _pyogmaneo.StdVecf_reserve(self, n)

    def capacity(self):
        return _pyogmaneo.StdVecf_capacity(self)
    __swig_destroy__ = _pyogmaneo.delete_StdVecf

# Register StdVecf in _pyogmaneo:
_pyogmaneo.StdVecf_swigregister(StdVecf)

class StdVec2Df(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyogmaneo.StdVec2Df_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyogmaneo.StdVec2Df___nonzero__(self)

    def __bool__(self):
        return _pyogmaneo.StdVec2Df___bool__(self)

    def __len__(self):
        return _pyogmaneo.StdVec2Df___len__(self)

    def __getslice__(self, i, j):
        return _pyogmaneo.StdVec2Df___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyogmaneo.StdVec2Df___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyogmaneo.StdVec2Df___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyogmaneo.StdVec2Df___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyogmaneo.StdVec2Df___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyogmaneo.StdVec2Df___setitem__(self, *args)

    def pop(self):
        return _pyogmaneo.StdVec2Df_pop(self)

    def append(self, x):
        return _pyogmaneo.StdVec2Df_append(self, x)

    def empty(self):
        return _pyogmaneo.StdVec2Df_empty(self)

    def size(self):
        return _pyogmaneo.StdVec2Df_size(self)

    def swap(self, v):
        return _pyogmaneo.StdVec2Df_swap(self, v)

    def begin(self):
        return _pyogmaneo.StdVec2Df_begin(self)

    def end(self):
        return _pyogmaneo.StdVec2Df_end(self)

    def rbegin(self):
        return _pyogmaneo.StdVec2Df_rbegin(self)

    def rend(self):
        return _pyogmaneo.StdVec2Df_rend(self)

    def clear(self):
        return _pyogmaneo.StdVec2Df_clear(self)

    def get_allocator(self):
        return _pyogmaneo.StdVec2Df_get_allocator(self)

    def pop_back(self):
        return _pyogmaneo.StdVec2Df_pop_back(self)

    def erase(self, *args):
        return _pyogmaneo.StdVec2Df_erase(self, *args)

    def __init__(self, *args):
        _pyogmaneo.StdVec2Df_swiginit(self, _pyogmaneo.new_StdVec2Df(*args))

    def push_back(self, x):
        return _pyogmaneo.StdVec2Df_push_back(self, x)

    def front(self):
        return _pyogmaneo.StdVec2Df_front(self)

    def back(self):
        return _pyogmaneo.StdVec2Df_back(self)

    def assign(self, n, x):
        return _pyogmaneo.StdVec2Df_assign(self, n, x)

    def resize(self, *args):
        return _pyogmaneo.StdVec2Df_resize(self, *args)

    def insert(self, *args):
        return _pyogmaneo.StdVec2Df_insert(self, *args)

    def reserve(self, n):
        return _pyogmaneo.StdVec2Df_reserve(self, n)

    def capacity(self):
        return _pyogmaneo.StdVec2Df_capacity(self)
    __swig_destroy__ = _pyogmaneo.delete_StdVec2Df

# Register StdVec2Df in _pyogmaneo:
_pyogmaneo.StdVec2Df_swigregister(StdVec2Df)

class StdVecInt3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyogmaneo.StdVecInt3_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyogmaneo.StdVecInt3___nonzero__(self)

    def __bool__(self):
        return _pyogmaneo.StdVecInt3___bool__(self)

    def __len__(self):
        return _pyogmaneo.StdVecInt3___len__(self)

    def __getslice__(self, i, j):
        return _pyogmaneo.StdVecInt3___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyogmaneo.StdVecInt3___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyogmaneo.StdVecInt3___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyogmaneo.StdVecInt3___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyogmaneo.StdVecInt3___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyogmaneo.StdVecInt3___setitem__(self, *args)

    def pop(self):
        return _pyogmaneo.StdVecInt3_pop(self)

    def append(self, x):
        return _pyogmaneo.StdVecInt3_append(self, x)

    def empty(self):
        return _pyogmaneo.StdVecInt3_empty(self)

    def size(self):
        return _pyogmaneo.StdVecInt3_size(self)

    def swap(self, v):
        return _pyogmaneo.StdVecInt3_swap(self, v)

    def begin(self):
        return _pyogmaneo.StdVecInt3_begin(self)

    def end(self):
        return _pyogmaneo.StdVecInt3_end(self)

    def rbegin(self):
        return _pyogmaneo.StdVecInt3_rbegin(self)

    def rend(self):
        return _pyogmaneo.StdVecInt3_rend(self)

    def clear(self):
        return _pyogmaneo.StdVecInt3_clear(self)

    def get_allocator(self):
        return _pyogmaneo.StdVecInt3_get_allocator(self)

    def pop_back(self):
        return _pyogmaneo.StdVecInt3_pop_back(self)

    def erase(self, *args):
        return _pyogmaneo.StdVecInt3_erase(self, *args)

    def __init__(self, *args):
        _pyogmaneo.StdVecInt3_swiginit(self, _pyogmaneo.new_StdVecInt3(*args))

    def push_back(self, x):
        return _pyogmaneo.StdVecInt3_push_back(self, x)

    def front(self):
        return _pyogmaneo.StdVecInt3_front(self)

    def back(self):
        return _pyogmaneo.StdVecInt3_back(self)

    def assign(self, n, x):
        return _pyogmaneo.StdVecInt3_assign(self, n, x)

    def resize(self, *args):
        return _pyogmaneo.StdVecInt3_resize(self, *args)

    def insert(self, *args):
        return _pyogmaneo.StdVecInt3_insert(self, *args)

    def reserve(self, n):
        return _pyogmaneo.StdVecInt3_reserve(self, n)

    def capacity(self):
        return _pyogmaneo.StdVecInt3_capacity(self)
    __swig_destroy__ = _pyogmaneo.delete_StdVecInt3

# Register StdVecInt3 in _pyogmaneo:
_pyogmaneo.StdVecInt3_swigregister(StdVecInt3)

class StdVecLayerDesc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyogmaneo.StdVecLayerDesc_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyogmaneo.StdVecLayerDesc___nonzero__(self)

    def __bool__(self):
        return _pyogmaneo.StdVecLayerDesc___bool__(self)

    def __len__(self):
        return _pyogmaneo.StdVecLayerDesc___len__(self)

    def __getslice__(self, i, j):
        return _pyogmaneo.StdVecLayerDesc___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyogmaneo.StdVecLayerDesc___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyogmaneo.StdVecLayerDesc___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyogmaneo.StdVecLayerDesc___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyogmaneo.StdVecLayerDesc___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyogmaneo.StdVecLayerDesc___setitem__(self, *args)

    def pop(self):
        return _pyogmaneo.StdVecLayerDesc_pop(self)

    def append(self, x):
        return _pyogmaneo.StdVecLayerDesc_append(self, x)

    def empty(self):
        return _pyogmaneo.StdVecLayerDesc_empty(self)

    def size(self):
        return _pyogmaneo.StdVecLayerDesc_size(self)

    def swap(self, v):
        return _pyogmaneo.StdVecLayerDesc_swap(self, v)

    def begin(self):
        return _pyogmaneo.StdVecLayerDesc_begin(self)

    def end(self):
        return _pyogmaneo.StdVecLayerDesc_end(self)

    def rbegin(self):
        return _pyogmaneo.StdVecLayerDesc_rbegin(self)

    def rend(self):
        return _pyogmaneo.StdVecLayerDesc_rend(self)

    def clear(self):
        return _pyogmaneo.StdVecLayerDesc_clear(self)

    def get_allocator(self):
        return _pyogmaneo.StdVecLayerDesc_get_allocator(self)

    def pop_back(self):
        return _pyogmaneo.StdVecLayerDesc_pop_back(self)

    def erase(self, *args):
        return _pyogmaneo.StdVecLayerDesc_erase(self, *args)

    def __init__(self, *args):
        _pyogmaneo.StdVecLayerDesc_swiginit(self, _pyogmaneo.new_StdVecLayerDesc(*args))

    def push_back(self, x):
        return _pyogmaneo.StdVecLayerDesc_push_back(self, x)

    def front(self):
        return _pyogmaneo.StdVecLayerDesc_front(self)

    def back(self):
        return _pyogmaneo.StdVecLayerDesc_back(self)

    def assign(self, n, x):
        return _pyogmaneo.StdVecLayerDesc_assign(self, n, x)

    def resize(self, *args):
        return _pyogmaneo.StdVecLayerDesc_resize(self, *args)

    def insert(self, *args):
        return _pyogmaneo.StdVecLayerDesc_insert(self, *args)

    def reserve(self, n):
        return _pyogmaneo.StdVecLayerDesc_reserve(self, n)

    def capacity(self):
        return _pyogmaneo.StdVecLayerDesc_capacity(self)
    __swig_destroy__ = _pyogmaneo.delete_StdVecLayerDesc

# Register StdVecLayerDesc in _pyogmaneo:
_pyogmaneo.StdVecLayerDesc_swigregister(StdVecLayerDesc)

class StdVecImVLD(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyogmaneo.StdVecImVLD_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyogmaneo.StdVecImVLD___nonzero__(self)

    def __bool__(self):
        return _pyogmaneo.StdVecImVLD___bool__(self)

    def __len__(self):
        return _pyogmaneo.StdVecImVLD___len__(self)

    def __getslice__(self, i, j):
        return _pyogmaneo.StdVecImVLD___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyogmaneo.StdVecImVLD___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyogmaneo.StdVecImVLD___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyogmaneo.StdVecImVLD___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyogmaneo.StdVecImVLD___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyogmaneo.StdVecImVLD___setitem__(self, *args)

    def pop(self):
        return _pyogmaneo.StdVecImVLD_pop(self)

    def append(self, x):
        return _pyogmaneo.StdVecImVLD_append(self, x)

    def empty(self):
        return _pyogmaneo.StdVecImVLD_empty(self)

    def size(self):
        return _pyogmaneo.StdVecImVLD_size(self)

    def swap(self, v):
        return _pyogmaneo.StdVecImVLD_swap(self, v)

    def begin(self):
        return _pyogmaneo.StdVecImVLD_begin(self)

    def end(self):
        return _pyogmaneo.StdVecImVLD_end(self)

    def rbegin(self):
        return _pyogmaneo.StdVecImVLD_rbegin(self)

    def rend(self):
        return _pyogmaneo.StdVecImVLD_rend(self)

    def clear(self):
        return _pyogmaneo.StdVecImVLD_clear(self)

    def get_allocator(self):
        return _pyogmaneo.StdVecImVLD_get_allocator(self)

    def pop_back(self):
        return _pyogmaneo.StdVecImVLD_pop_back(self)

    def erase(self, *args):
        return _pyogmaneo.StdVecImVLD_erase(self, *args)

    def __init__(self, *args):
        _pyogmaneo.StdVecImVLD_swiginit(self, _pyogmaneo.new_StdVecImVLD(*args))

    def push_back(self, x):
        return _pyogmaneo.StdVecImVLD_push_back(self, x)

    def front(self):
        return _pyogmaneo.StdVecImVLD_front(self)

    def back(self):
        return _pyogmaneo.StdVecImVLD_back(self)

    def assign(self, n, x):
        return _pyogmaneo.StdVecImVLD_assign(self, n, x)

    def resize(self, *args):
        return _pyogmaneo.StdVecImVLD_resize(self, *args)

    def insert(self, *args):
        return _pyogmaneo.StdVecImVLD_insert(self, *args)

    def reserve(self, n):
        return _pyogmaneo.StdVecImVLD_reserve(self, n)

    def capacity(self):
        return _pyogmaneo.StdVecImVLD_capacity(self)
    __swig_destroy__ = _pyogmaneo.delete_StdVecImVLD

# Register StdVecImVLD in _pyogmaneo:
_pyogmaneo.StdVecImVLD_swigregister(StdVecImVLD)

class Int3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_pyogmaneo.Int3_x_get, _pyogmaneo.Int3_x_set)
    y = property(_pyogmaneo.Int3_y_get, _pyogmaneo.Int3_y_set)
    z = property(_pyogmaneo.Int3_z_get, _pyogmaneo.Int3_z_set)

    def __init__(self, *args):
        _pyogmaneo.Int3_swiginit(self, _pyogmaneo.new_Int3(*args))
    __swig_destroy__ = _pyogmaneo.delete_Int3

# Register Int3 in _pyogmaneo:
_pyogmaneo.Int3_swigregister(Int3)

class ComputeSystem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, seed=1234):
        _pyogmaneo.ComputeSystem_swiginit(self, _pyogmaneo.new_ComputeSystem(seed))

    @staticmethod
    def setNumThreads(numThreads):
        return _pyogmaneo.ComputeSystem_setNumThreads(numThreads)

    @staticmethod
    def getNumThreads():
        return _pyogmaneo.ComputeSystem_getNumThreads()
    __swig_destroy__ = _pyogmaneo.delete_ComputeSystem

# Register ComputeSystem in _pyogmaneo:
_pyogmaneo.ComputeSystem_swigregister(ComputeSystem)

def ComputeSystem_setNumThreads(numThreads):
    return _pyogmaneo.ComputeSystem_setNumThreads(numThreads)

def ComputeSystem_getNumThreads():
    return _pyogmaneo.ComputeSystem_getNumThreads()

class LayerDesc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    hiddenSize = property(_pyogmaneo.LayerDesc_hiddenSize_get, _pyogmaneo.LayerDesc_hiddenSize_set)
    ffRadius = property(_pyogmaneo.LayerDesc_ffRadius_get, _pyogmaneo.LayerDesc_ffRadius_set)
    pRadius = property(_pyogmaneo.LayerDesc_pRadius_get, _pyogmaneo.LayerDesc_pRadius_set)
    ticksPerUpdate = property(_pyogmaneo.LayerDesc_ticksPerUpdate_get, _pyogmaneo.LayerDesc_ticksPerUpdate_set)
    temporalHorizon = property(_pyogmaneo.LayerDesc_temporalHorizon_get, _pyogmaneo.LayerDesc_temporalHorizon_set)
    aRadius = property(_pyogmaneo.LayerDesc_aRadius_get, _pyogmaneo.LayerDesc_aRadius_set)
    historyCapacity = property(_pyogmaneo.LayerDesc_historyCapacity_get, _pyogmaneo.LayerDesc_historyCapacity_set)

    def __init__(self, *args):
        _pyogmaneo.LayerDesc_swiginit(self, _pyogmaneo.new_LayerDesc(*args))
    __swig_destroy__ = _pyogmaneo.delete_LayerDesc

# Register LayerDesc in _pyogmaneo:
_pyogmaneo.LayerDesc_swigregister(LayerDesc)
cvar = _pyogmaneo.cvar
inputTypeNone = cvar.inputTypeNone
inputTypePrediction = cvar.inputTypePrediction
inputTypeAction = cvar.inputTypeAction

class State(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyogmaneo.State_swiginit(self, _pyogmaneo.new_State())
    __swig_destroy__ = _pyogmaneo.delete_State

# Register State in _pyogmaneo:
_pyogmaneo.State_swigregister(State)

class Hierarchy(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyogmaneo.Hierarchy_swiginit(self, _pyogmaneo.new_Hierarchy(*args))

    def step(self, cs, inputCs, learnEnabled=True, reward=0.0, mimic=False):
        return _pyogmaneo.Hierarchy_step(self, cs, inputCs, learnEnabled, reward, mimic)

    def getState(self, state):
        return _pyogmaneo.Hierarchy_getState(self, state)

    def setState(self, state):
        return _pyogmaneo.Hierarchy_setState(self, state)

    def save(self, fileName):
        return _pyogmaneo.Hierarchy_save(self, fileName)

    def getNumLayers(self):
        return _pyogmaneo.Hierarchy_getNumLayers(self)

    def getPredictionCs(self, i):
        return _pyogmaneo.Hierarchy_getPredictionCs(self, i)

    def getUpdate(self, l):
        return _pyogmaneo.Hierarchy_getUpdate(self, l)

    def getHiddenCs(self, l):
        return _pyogmaneo.Hierarchy_getHiddenCs(self, l)

    def getHiddenSize(self, l):
        return _pyogmaneo.Hierarchy_getHiddenSize(self, l)

    def getTicks(self, l):
        return _pyogmaneo.Hierarchy_getTicks(self, l)

    def getTicksPerUpdate(self, l):
        return _pyogmaneo.Hierarchy_getTicksPerUpdate(self, l)

    def getNumSCVisibleLayers(self, l):
        return _pyogmaneo.Hierarchy_getNumSCVisibleLayers(self, l)

    def getNumInputs(self):
        return _pyogmaneo.Hierarchy_getNumInputs(self)

    def getInputSize(self, i):
        return _pyogmaneo.Hierarchy_getInputSize(self, i)

    def pLayerExists(self, l, v):
        return _pyogmaneo.Hierarchy_pLayerExists(self, l, v)

    def aLayerExists(self, v):
        return _pyogmaneo.Hierarchy_aLayerExists(self, v)

    def setSCAlpha(self, l, alpha):
        return _pyogmaneo.Hierarchy_setSCAlpha(self, l, alpha)

    def getSCAlpha(self, l):
        return _pyogmaneo.Hierarchy_getSCAlpha(self, l)

    def setPAlpha(self, l, v, alpha):
        return _pyogmaneo.Hierarchy_setPAlpha(self, l, v, alpha)

    def getPAlpha(self, l, v):
        return _pyogmaneo.Hierarchy_getPAlpha(self, l, v)

    def setAAlpha(self, v, alpha):
        return _pyogmaneo.Hierarchy_setAAlpha(self, v, alpha)

    def getAAlpha(self, v):
        return _pyogmaneo.Hierarchy_getAAlpha(self, v)

    def setABeta(self, v, beta):
        return _pyogmaneo.Hierarchy_setABeta(self, v, beta)

    def getABeta(self, v):
        return _pyogmaneo.Hierarchy_getABeta(self, v)

    def setAGamma(self, v, gamma):
        return _pyogmaneo.Hierarchy_setAGamma(self, v, gamma)

    def getAGamma(self, v):
        return _pyogmaneo.Hierarchy_getAGamma(self, v)

    def setAMinSteps(self, v, minSteps):
        return _pyogmaneo.Hierarchy_setAMinSteps(self, v, minSteps)

    def getAMinSteps(self, v):
        return _pyogmaneo.Hierarchy_getAMinSteps(self, v)

    def setAHistoryIters(self, v, historyIters):
        return _pyogmaneo.Hierarchy_setAHistoryIters(self, v, historyIters)

    def getAHistoryIters(self, v):
        return _pyogmaneo.Hierarchy_getAHistoryIters(self, v)

    def getSCReceptiveField(self, cs, l, i, hiddenPosition, size):
        return _pyogmaneo.Hierarchy_getSCReceptiveField(self, cs, l, i, hiddenPosition, size)
    __swig_destroy__ = _pyogmaneo.delete_Hierarchy

# Register Hierarchy in _pyogmaneo:
_pyogmaneo.Hierarchy_swigregister(Hierarchy)

class ImVisibleLayerDesc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    size = property(_pyogmaneo.ImVisibleLayerDesc_size_get, _pyogmaneo.ImVisibleLayerDesc_size_set)
    radius = property(_pyogmaneo.ImVisibleLayerDesc_radius_get, _pyogmaneo.ImVisibleLayerDesc_radius_set)

    def __init__(self, *args):
        _pyogmaneo.ImVisibleLayerDesc_swiginit(self, _pyogmaneo.new_ImVisibleLayerDesc(*args))
    __swig_destroy__ = _pyogmaneo.delete_ImVisibleLayerDesc

# Register ImVisibleLayerDesc in _pyogmaneo:
_pyogmaneo.ImVisibleLayerDesc_swigregister(ImVisibleLayerDesc)

class ImageEncoder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    alpha = property(_pyogmaneo.ImageEncoder_alpha_get, _pyogmaneo.ImageEncoder_alpha_set)
    gamma = property(_pyogmaneo.ImageEncoder_gamma_get, _pyogmaneo.ImageEncoder_gamma_set)

    def __init__(self, *args):
        _pyogmaneo.ImageEncoder_swiginit(self, _pyogmaneo.new_ImageEncoder(*args))

    def step(self, cs, visibleActivations, learnEnabled=True):
        return _pyogmaneo.ImageEncoder_step(self, cs, visibleActivations, learnEnabled)

    def reconstruct(self, cs, hiddenCs):
        return _pyogmaneo.ImageEncoder_reconstruct(self, cs, hiddenCs)

    def save(self, fileName):
        return _pyogmaneo.ImageEncoder_save(self, fileName)

    def getNumVisibleLayers(self):
        return _pyogmaneo.ImageEncoder_getNumVisibleLayers(self)

    def getReconstruction(self, i):
        return _pyogmaneo.ImageEncoder_getReconstruction(self, i)

    def getHiddenCs(self):
        return _pyogmaneo.ImageEncoder_getHiddenCs(self)

    def getHiddenSize(self):
        return _pyogmaneo.ImageEncoder_getHiddenSize(self)

    def getVisibleSize(self, i):
        return _pyogmaneo.ImageEncoder_getVisibleSize(self, i)

    def getReceptiveField(self, cs, i, hiddenPosition, size):
        return _pyogmaneo.ImageEncoder_getReceptiveField(self, cs, i, hiddenPosition, size)
    __swig_destroy__ = _pyogmaneo.delete_ImageEncoder

# Register ImageEncoder in _pyogmaneo:
_pyogmaneo.ImageEncoder_swigregister(ImageEncoder)



