# coding: utf-8

"""
    Cognite API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: playground
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from cognite.geospatial.internal.configuration import Configuration


class RasterGeometrySpatialAllOfDTO(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'row_min': 'int',
        'row_max': 'int',
        'column_min': 'int',
        'column_max': 'int'
    }

    attribute_map = {
        'row_min': 'rowMin',
        'row_max': 'rowMax',
        'column_min': 'columnMin',
        'column_max': 'columnMax'
    }

    def __init__(self, row_min=None, row_max=None, column_min=None, column_max=None, local_vars_configuration=None):  # noqa: E501
        """RasterGeometrySpatialAllOfDTO - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._row_min = None
        self._row_max = None
        self._column_min = None
        self._column_max = None
        self.discriminator = None

        if row_min is not None:
            self.row_min = row_min
        if row_max is not None:
            self.row_max = row_max
        if column_min is not None:
            self.column_min = column_min
        if column_max is not None:
            self.column_max = column_max

    @property
    def row_min(self):
        """Gets the row_min of this RasterGeometrySpatialAllOfDTO.  # noqa: E501


        :return: The row_min of this RasterGeometrySpatialAllOfDTO.  # noqa: E501
        :rtype: int
        """
        return self._row_min

    @row_min.setter
    def row_min(self, row_min):
        """Sets the row_min of this RasterGeometrySpatialAllOfDTO.


        :param row_min: The row_min of this RasterGeometrySpatialAllOfDTO.  # noqa: E501
        :type: int
        """

        self._row_min = row_min

    @property
    def row_max(self):
        """Gets the row_max of this RasterGeometrySpatialAllOfDTO.  # noqa: E501


        :return: The row_max of this RasterGeometrySpatialAllOfDTO.  # noqa: E501
        :rtype: int
        """
        return self._row_max

    @row_max.setter
    def row_max(self, row_max):
        """Sets the row_max of this RasterGeometrySpatialAllOfDTO.


        :param row_max: The row_max of this RasterGeometrySpatialAllOfDTO.  # noqa: E501
        :type: int
        """

        self._row_max = row_max

    @property
    def column_min(self):
        """Gets the column_min of this RasterGeometrySpatialAllOfDTO.  # noqa: E501


        :return: The column_min of this RasterGeometrySpatialAllOfDTO.  # noqa: E501
        :rtype: int
        """
        return self._column_min

    @column_min.setter
    def column_min(self, column_min):
        """Sets the column_min of this RasterGeometrySpatialAllOfDTO.


        :param column_min: The column_min of this RasterGeometrySpatialAllOfDTO.  # noqa: E501
        :type: int
        """

        self._column_min = column_min

    @property
    def column_max(self):
        """Gets the column_max of this RasterGeometrySpatialAllOfDTO.  # noqa: E501


        :return: The column_max of this RasterGeometrySpatialAllOfDTO.  # noqa: E501
        :rtype: int
        """
        return self._column_max

    @column_max.setter
    def column_max(self, column_max):
        """Sets the column_max of this RasterGeometrySpatialAllOfDTO.


        :param column_max: The column_max of this RasterGeometrySpatialAllOfDTO.  # noqa: E501
        :type: int
        """

        self._column_max = column_max

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RasterGeometrySpatialAllOfDTO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RasterGeometrySpatialAllOfDTO):
            return True

        return self.to_dict() != other.to_dict()
