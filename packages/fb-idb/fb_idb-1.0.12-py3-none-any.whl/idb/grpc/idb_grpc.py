# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: idb.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import idb.grpc.idb_pb2 as idb_pb2


class CompanionServiceBase(abc.ABC):

    @abc.abstractmethod
    async def accessibility_info(self, stream: 'grpclib.server.Stream[idb_pb2.AccessibilityInfoRequest, idb_pb2.AccessibilityInfoResponse]') -> None:
        pass

    @abc.abstractmethod
    async def add_media(self, stream: 'grpclib.server.Stream[idb_pb2.AddMediaRequest, idb_pb2.AddMediaResponse]') -> None:
        pass

    @abc.abstractmethod
    async def approve(self, stream: 'grpclib.server.Stream[idb_pb2.ApproveRequest, idb_pb2.ApproveResponse]') -> None:
        pass

    @abc.abstractmethod
    async def boot(self, stream: 'grpclib.server.Stream[idb_pb2.BootRequest, idb_pb2.BootResponse]') -> None:
        pass

    @abc.abstractmethod
    async def clear_keychain(self, stream: 'grpclib.server.Stream[idb_pb2.ClearKeychainRequest, idb_pb2.ClearKeychainResponse]') -> None:
        pass

    @abc.abstractmethod
    async def connect(self, stream: 'grpclib.server.Stream[idb_pb2.ConnectRequest, idb_pb2.ConnectResponse]') -> None:
        pass

    @abc.abstractmethod
    async def contacts_update(self, stream: 'grpclib.server.Stream[idb_pb2.ContactsUpdateRequest, idb_pb2.ContactsUpdateResponse]') -> None:
        pass

    @abc.abstractmethod
    async def crash_delete(self, stream: 'grpclib.server.Stream[idb_pb2.CrashLogQuery, idb_pb2.CrashLogResponse]') -> None:
        pass

    @abc.abstractmethod
    async def crash_list(self, stream: 'grpclib.server.Stream[idb_pb2.CrashLogQuery, idb_pb2.CrashLogResponse]') -> None:
        pass

    @abc.abstractmethod
    async def crash_show(self, stream: 'grpclib.server.Stream[idb_pb2.CrashShowRequest, idb_pb2.CrashShowResponse]') -> None:
        pass

    @abc.abstractmethod
    async def debugserver(self, stream: 'grpclib.server.Stream[idb_pb2.DebugServerRequest, idb_pb2.DebugServerResponse]') -> None:
        pass

    @abc.abstractmethod
    async def describe(self, stream: 'grpclib.server.Stream[idb_pb2.TargetDescriptionRequest, idb_pb2.TargetDescriptionResponse]') -> None:
        pass

    @abc.abstractmethod
    async def disconnect(self, stream: 'grpclib.server.Stream[idb_pb2.DisconnectRequest, idb_pb2.DisconnectResponse]') -> None:
        pass

    @abc.abstractmethod
    async def focus(self, stream: 'grpclib.server.Stream[idb_pb2.FocusRequest, idb_pb2.FocusResponse]') -> None:
        pass

    @abc.abstractmethod
    async def hid(self, stream: 'grpclib.server.Stream[idb_pb2.HIDEvent, idb_pb2.HIDResponse]') -> None:
        pass

    @abc.abstractmethod
    async def install(self, stream: 'grpclib.server.Stream[idb_pb2.InstallRequest, idb_pb2.InstallResponse]') -> None:
        pass

    @abc.abstractmethod
    async def instruments_run(self, stream: 'grpclib.server.Stream[idb_pb2.InstrumentsRunRequest, idb_pb2.InstrumentsRunResponse]') -> None:
        pass

    @abc.abstractmethod
    async def launch(self, stream: 'grpclib.server.Stream[idb_pb2.LaunchRequest, idb_pb2.LaunchResponse]') -> None:
        pass

    @abc.abstractmethod
    async def list_apps(self, stream: 'grpclib.server.Stream[idb_pb2.ListAppsRequest, idb_pb2.ListAppsResponse]') -> None:
        pass

    @abc.abstractmethod
    async def list_targets(self, stream: 'grpclib.server.Stream[idb_pb2.ListTargetsRequest, idb_pb2.ListTargetsResponse]') -> None:
        pass

    @abc.abstractmethod
    async def log(self, stream: 'grpclib.server.Stream[idb_pb2.LogRequest, idb_pb2.LogResponse]') -> None:
        pass

    @abc.abstractmethod
    async def ls(self, stream: 'grpclib.server.Stream[idb_pb2.LsRequest, idb_pb2.LsResponse]') -> None:
        pass

    @abc.abstractmethod
    async def mkdir(self, stream: 'grpclib.server.Stream[idb_pb2.MkdirRequest, idb_pb2.MkdirResponse]') -> None:
        pass

    @abc.abstractmethod
    async def mv(self, stream: 'grpclib.server.Stream[idb_pb2.MvRequest, idb_pb2.MvResponse]') -> None:
        pass

    @abc.abstractmethod
    async def open_url(self, stream: 'grpclib.server.Stream[idb_pb2.OpenUrlRequest, idb_pb2.OpenUrlRequest]') -> None:
        pass

    @abc.abstractmethod
    async def pull(self, stream: 'grpclib.server.Stream[idb_pb2.PullRequest, idb_pb2.PullResponse]') -> None:
        pass

    @abc.abstractmethod
    async def push(self, stream: 'grpclib.server.Stream[idb_pb2.PushRequest, idb_pb2.PushResponse]') -> None:
        pass

    @abc.abstractmethod
    async def record(self, stream: 'grpclib.server.Stream[idb_pb2.RecordRequest, idb_pb2.RecordResponse]') -> None:
        pass

    @abc.abstractmethod
    async def rm(self, stream: 'grpclib.server.Stream[idb_pb2.RmRequest, idb_pb2.RmResponse]') -> None:
        pass

    @abc.abstractmethod
    async def screenshot(self, stream: 'grpclib.server.Stream[idb_pb2.ScreenshotRequest, idb_pb2.ScreenshotResponse]') -> None:
        pass

    @abc.abstractmethod
    async def set_location(self, stream: 'grpclib.server.Stream[idb_pb2.SetLocationRequest, idb_pb2.SetLocationResponse]') -> None:
        pass

    @abc.abstractmethod
    async def terminate(self, stream: 'grpclib.server.Stream[idb_pb2.TerminateRequest, idb_pb2.TerminateResponse]') -> None:
        pass

    @abc.abstractmethod
    async def uninstall(self, stream: 'grpclib.server.Stream[idb_pb2.UninstallRequest, idb_pb2.UninstallResponse]') -> None:
        pass

    @abc.abstractmethod
    async def xctest_list_bundles(self, stream: 'grpclib.server.Stream[idb_pb2.XctestListBundlesRequest, idb_pb2.XctestListBundlesResponse]') -> None:
        pass

    @abc.abstractmethod
    async def xctest_list_tests(self, stream: 'grpclib.server.Stream[idb_pb2.XctestListTestsRequest, idb_pb2.XctestListTestsResponse]') -> None:
        pass

    @abc.abstractmethod
    async def xctest_run(self, stream: 'grpclib.server.Stream[idb_pb2.XctestRunRequest, idb_pb2.XctestRunResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/idb.CompanionService/accessibility_info': grpclib.const.Handler(
                self.accessibility_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                idb_pb2.AccessibilityInfoRequest,
                idb_pb2.AccessibilityInfoResponse,
            ),
            '/idb.CompanionService/add_media': grpclib.const.Handler(
                self.add_media,
                grpclib.const.Cardinality.STREAM_UNARY,
                idb_pb2.AddMediaRequest,
                idb_pb2.AddMediaResponse,
            ),
            '/idb.CompanionService/approve': grpclib.const.Handler(
                self.approve,
                grpclib.const.Cardinality.UNARY_UNARY,
                idb_pb2.ApproveRequest,
                idb_pb2.ApproveResponse,
            ),
            '/idb.CompanionService/boot': grpclib.const.Handler(
                self.boot,
                grpclib.const.Cardinality.UNARY_UNARY,
                idb_pb2.BootRequest,
                idb_pb2.BootResponse,
            ),
            '/idb.CompanionService/clear_keychain': grpclib.const.Handler(
                self.clear_keychain,
                grpclib.const.Cardinality.UNARY_UNARY,
                idb_pb2.ClearKeychainRequest,
                idb_pb2.ClearKeychainResponse,
            ),
            '/idb.CompanionService/connect': grpclib.const.Handler(
                self.connect,
                grpclib.const.Cardinality.UNARY_UNARY,
                idb_pb2.ConnectRequest,
                idb_pb2.ConnectResponse,
            ),
            '/idb.CompanionService/contacts_update': grpclib.const.Handler(
                self.contacts_update,
                grpclib.const.Cardinality.UNARY_UNARY,
                idb_pb2.ContactsUpdateRequest,
                idb_pb2.ContactsUpdateResponse,
            ),
            '/idb.CompanionService/crash_delete': grpclib.const.Handler(
                self.crash_delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                idb_pb2.CrashLogQuery,
                idb_pb2.CrashLogResponse,
            ),
            '/idb.CompanionService/crash_list': grpclib.const.Handler(
                self.crash_list,
                grpclib.const.Cardinality.UNARY_UNARY,
                idb_pb2.CrashLogQuery,
                idb_pb2.CrashLogResponse,
            ),
            '/idb.CompanionService/crash_show': grpclib.const.Handler(
                self.crash_show,
                grpclib.const.Cardinality.UNARY_UNARY,
                idb_pb2.CrashShowRequest,
                idb_pb2.CrashShowResponse,
            ),
            '/idb.CompanionService/debugserver': grpclib.const.Handler(
                self.debugserver,
                grpclib.const.Cardinality.STREAM_STREAM,
                idb_pb2.DebugServerRequest,
                idb_pb2.DebugServerResponse,
            ),
            '/idb.CompanionService/describe': grpclib.const.Handler(
                self.describe,
                grpclib.const.Cardinality.UNARY_UNARY,
                idb_pb2.TargetDescriptionRequest,
                idb_pb2.TargetDescriptionResponse,
            ),
            '/idb.CompanionService/disconnect': grpclib.const.Handler(
                self.disconnect,
                grpclib.const.Cardinality.UNARY_UNARY,
                idb_pb2.DisconnectRequest,
                idb_pb2.DisconnectResponse,
            ),
            '/idb.CompanionService/focus': grpclib.const.Handler(
                self.focus,
                grpclib.const.Cardinality.UNARY_UNARY,
                idb_pb2.FocusRequest,
                idb_pb2.FocusResponse,
            ),
            '/idb.CompanionService/hid': grpclib.const.Handler(
                self.hid,
                grpclib.const.Cardinality.STREAM_UNARY,
                idb_pb2.HIDEvent,
                idb_pb2.HIDResponse,
            ),
            '/idb.CompanionService/install': grpclib.const.Handler(
                self.install,
                grpclib.const.Cardinality.STREAM_STREAM,
                idb_pb2.InstallRequest,
                idb_pb2.InstallResponse,
            ),
            '/idb.CompanionService/instruments_run': grpclib.const.Handler(
                self.instruments_run,
                grpclib.const.Cardinality.STREAM_STREAM,
                idb_pb2.InstrumentsRunRequest,
                idb_pb2.InstrumentsRunResponse,
            ),
            '/idb.CompanionService/launch': grpclib.const.Handler(
                self.launch,
                grpclib.const.Cardinality.STREAM_STREAM,
                idb_pb2.LaunchRequest,
                idb_pb2.LaunchResponse,
            ),
            '/idb.CompanionService/list_apps': grpclib.const.Handler(
                self.list_apps,
                grpclib.const.Cardinality.UNARY_UNARY,
                idb_pb2.ListAppsRequest,
                idb_pb2.ListAppsResponse,
            ),
            '/idb.CompanionService/list_targets': grpclib.const.Handler(
                self.list_targets,
                grpclib.const.Cardinality.UNARY_UNARY,
                idb_pb2.ListTargetsRequest,
                idb_pb2.ListTargetsResponse,
            ),
            '/idb.CompanionService/log': grpclib.const.Handler(
                self.log,
                grpclib.const.Cardinality.UNARY_STREAM,
                idb_pb2.LogRequest,
                idb_pb2.LogResponse,
            ),
            '/idb.CompanionService/ls': grpclib.const.Handler(
                self.ls,
                grpclib.const.Cardinality.UNARY_UNARY,
                idb_pb2.LsRequest,
                idb_pb2.LsResponse,
            ),
            '/idb.CompanionService/mkdir': grpclib.const.Handler(
                self.mkdir,
                grpclib.const.Cardinality.UNARY_UNARY,
                idb_pb2.MkdirRequest,
                idb_pb2.MkdirResponse,
            ),
            '/idb.CompanionService/mv': grpclib.const.Handler(
                self.mv,
                grpclib.const.Cardinality.UNARY_UNARY,
                idb_pb2.MvRequest,
                idb_pb2.MvResponse,
            ),
            '/idb.CompanionService/open_url': grpclib.const.Handler(
                self.open_url,
                grpclib.const.Cardinality.UNARY_UNARY,
                idb_pb2.OpenUrlRequest,
                idb_pb2.OpenUrlRequest,
            ),
            '/idb.CompanionService/pull': grpclib.const.Handler(
                self.pull,
                grpclib.const.Cardinality.UNARY_STREAM,
                idb_pb2.PullRequest,
                idb_pb2.PullResponse,
            ),
            '/idb.CompanionService/push': grpclib.const.Handler(
                self.push,
                grpclib.const.Cardinality.STREAM_UNARY,
                idb_pb2.PushRequest,
                idb_pb2.PushResponse,
            ),
            '/idb.CompanionService/record': grpclib.const.Handler(
                self.record,
                grpclib.const.Cardinality.STREAM_STREAM,
                idb_pb2.RecordRequest,
                idb_pb2.RecordResponse,
            ),
            '/idb.CompanionService/rm': grpclib.const.Handler(
                self.rm,
                grpclib.const.Cardinality.UNARY_UNARY,
                idb_pb2.RmRequest,
                idb_pb2.RmResponse,
            ),
            '/idb.CompanionService/screenshot': grpclib.const.Handler(
                self.screenshot,
                grpclib.const.Cardinality.UNARY_UNARY,
                idb_pb2.ScreenshotRequest,
                idb_pb2.ScreenshotResponse,
            ),
            '/idb.CompanionService/set_location': grpclib.const.Handler(
                self.set_location,
                grpclib.const.Cardinality.UNARY_UNARY,
                idb_pb2.SetLocationRequest,
                idb_pb2.SetLocationResponse,
            ),
            '/idb.CompanionService/terminate': grpclib.const.Handler(
                self.terminate,
                grpclib.const.Cardinality.UNARY_UNARY,
                idb_pb2.TerminateRequest,
                idb_pb2.TerminateResponse,
            ),
            '/idb.CompanionService/uninstall': grpclib.const.Handler(
                self.uninstall,
                grpclib.const.Cardinality.UNARY_UNARY,
                idb_pb2.UninstallRequest,
                idb_pb2.UninstallResponse,
            ),
            '/idb.CompanionService/xctest_list_bundles': grpclib.const.Handler(
                self.xctest_list_bundles,
                grpclib.const.Cardinality.UNARY_UNARY,
                idb_pb2.XctestListBundlesRequest,
                idb_pb2.XctestListBundlesResponse,
            ),
            '/idb.CompanionService/xctest_list_tests': grpclib.const.Handler(
                self.xctest_list_tests,
                grpclib.const.Cardinality.UNARY_UNARY,
                idb_pb2.XctestListTestsRequest,
                idb_pb2.XctestListTestsResponse,
            ),
            '/idb.CompanionService/xctest_run': grpclib.const.Handler(
                self.xctest_run,
                grpclib.const.Cardinality.UNARY_STREAM,
                idb_pb2.XctestRunRequest,
                idb_pb2.XctestRunResponse,
            ),
        }


class CompanionServiceStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.accessibility_info = grpclib.client.UnaryUnaryMethod(
            channel,
            '/idb.CompanionService/accessibility_info',
            idb_pb2.AccessibilityInfoRequest,
            idb_pb2.AccessibilityInfoResponse,
        )
        self.add_media = grpclib.client.StreamUnaryMethod(
            channel,
            '/idb.CompanionService/add_media',
            idb_pb2.AddMediaRequest,
            idb_pb2.AddMediaResponse,
        )
        self.approve = grpclib.client.UnaryUnaryMethod(
            channel,
            '/idb.CompanionService/approve',
            idb_pb2.ApproveRequest,
            idb_pb2.ApproveResponse,
        )
        self.boot = grpclib.client.UnaryUnaryMethod(
            channel,
            '/idb.CompanionService/boot',
            idb_pb2.BootRequest,
            idb_pb2.BootResponse,
        )
        self.clear_keychain = grpclib.client.UnaryUnaryMethod(
            channel,
            '/idb.CompanionService/clear_keychain',
            idb_pb2.ClearKeychainRequest,
            idb_pb2.ClearKeychainResponse,
        )
        self.connect = grpclib.client.UnaryUnaryMethod(
            channel,
            '/idb.CompanionService/connect',
            idb_pb2.ConnectRequest,
            idb_pb2.ConnectResponse,
        )
        self.contacts_update = grpclib.client.UnaryUnaryMethod(
            channel,
            '/idb.CompanionService/contacts_update',
            idb_pb2.ContactsUpdateRequest,
            idb_pb2.ContactsUpdateResponse,
        )
        self.crash_delete = grpclib.client.UnaryUnaryMethod(
            channel,
            '/idb.CompanionService/crash_delete',
            idb_pb2.CrashLogQuery,
            idb_pb2.CrashLogResponse,
        )
        self.crash_list = grpclib.client.UnaryUnaryMethod(
            channel,
            '/idb.CompanionService/crash_list',
            idb_pb2.CrashLogQuery,
            idb_pb2.CrashLogResponse,
        )
        self.crash_show = grpclib.client.UnaryUnaryMethod(
            channel,
            '/idb.CompanionService/crash_show',
            idb_pb2.CrashShowRequest,
            idb_pb2.CrashShowResponse,
        )
        self.debugserver = grpclib.client.StreamStreamMethod(
            channel,
            '/idb.CompanionService/debugserver',
            idb_pb2.DebugServerRequest,
            idb_pb2.DebugServerResponse,
        )
        self.describe = grpclib.client.UnaryUnaryMethod(
            channel,
            '/idb.CompanionService/describe',
            idb_pb2.TargetDescriptionRequest,
            idb_pb2.TargetDescriptionResponse,
        )
        self.disconnect = grpclib.client.UnaryUnaryMethod(
            channel,
            '/idb.CompanionService/disconnect',
            idb_pb2.DisconnectRequest,
            idb_pb2.DisconnectResponse,
        )
        self.focus = grpclib.client.UnaryUnaryMethod(
            channel,
            '/idb.CompanionService/focus',
            idb_pb2.FocusRequest,
            idb_pb2.FocusResponse,
        )
        self.hid = grpclib.client.StreamUnaryMethod(
            channel,
            '/idb.CompanionService/hid',
            idb_pb2.HIDEvent,
            idb_pb2.HIDResponse,
        )
        self.install = grpclib.client.StreamStreamMethod(
            channel,
            '/idb.CompanionService/install',
            idb_pb2.InstallRequest,
            idb_pb2.InstallResponse,
        )
        self.instruments_run = grpclib.client.StreamStreamMethod(
            channel,
            '/idb.CompanionService/instruments_run',
            idb_pb2.InstrumentsRunRequest,
            idb_pb2.InstrumentsRunResponse,
        )
        self.launch = grpclib.client.StreamStreamMethod(
            channel,
            '/idb.CompanionService/launch',
            idb_pb2.LaunchRequest,
            idb_pb2.LaunchResponse,
        )
        self.list_apps = grpclib.client.UnaryUnaryMethod(
            channel,
            '/idb.CompanionService/list_apps',
            idb_pb2.ListAppsRequest,
            idb_pb2.ListAppsResponse,
        )
        self.list_targets = grpclib.client.UnaryUnaryMethod(
            channel,
            '/idb.CompanionService/list_targets',
            idb_pb2.ListTargetsRequest,
            idb_pb2.ListTargetsResponse,
        )
        self.log = grpclib.client.UnaryStreamMethod(
            channel,
            '/idb.CompanionService/log',
            idb_pb2.LogRequest,
            idb_pb2.LogResponse,
        )
        self.ls = grpclib.client.UnaryUnaryMethod(
            channel,
            '/idb.CompanionService/ls',
            idb_pb2.LsRequest,
            idb_pb2.LsResponse,
        )
        self.mkdir = grpclib.client.UnaryUnaryMethod(
            channel,
            '/idb.CompanionService/mkdir',
            idb_pb2.MkdirRequest,
            idb_pb2.MkdirResponse,
        )
        self.mv = grpclib.client.UnaryUnaryMethod(
            channel,
            '/idb.CompanionService/mv',
            idb_pb2.MvRequest,
            idb_pb2.MvResponse,
        )
        self.open_url = grpclib.client.UnaryUnaryMethod(
            channel,
            '/idb.CompanionService/open_url',
            idb_pb2.OpenUrlRequest,
            idb_pb2.OpenUrlRequest,
        )
        self.pull = grpclib.client.UnaryStreamMethod(
            channel,
            '/idb.CompanionService/pull',
            idb_pb2.PullRequest,
            idb_pb2.PullResponse,
        )
        self.push = grpclib.client.StreamUnaryMethod(
            channel,
            '/idb.CompanionService/push',
            idb_pb2.PushRequest,
            idb_pb2.PushResponse,
        )
        self.record = grpclib.client.StreamStreamMethod(
            channel,
            '/idb.CompanionService/record',
            idb_pb2.RecordRequest,
            idb_pb2.RecordResponse,
        )
        self.rm = grpclib.client.UnaryUnaryMethod(
            channel,
            '/idb.CompanionService/rm',
            idb_pb2.RmRequest,
            idb_pb2.RmResponse,
        )
        self.screenshot = grpclib.client.UnaryUnaryMethod(
            channel,
            '/idb.CompanionService/screenshot',
            idb_pb2.ScreenshotRequest,
            idb_pb2.ScreenshotResponse,
        )
        self.set_location = grpclib.client.UnaryUnaryMethod(
            channel,
            '/idb.CompanionService/set_location',
            idb_pb2.SetLocationRequest,
            idb_pb2.SetLocationResponse,
        )
        self.terminate = grpclib.client.UnaryUnaryMethod(
            channel,
            '/idb.CompanionService/terminate',
            idb_pb2.TerminateRequest,
            idb_pb2.TerminateResponse,
        )
        self.uninstall = grpclib.client.UnaryUnaryMethod(
            channel,
            '/idb.CompanionService/uninstall',
            idb_pb2.UninstallRequest,
            idb_pb2.UninstallResponse,
        )
        self.xctest_list_bundles = grpclib.client.UnaryUnaryMethod(
            channel,
            '/idb.CompanionService/xctest_list_bundles',
            idb_pb2.XctestListBundlesRequest,
            idb_pb2.XctestListBundlesResponse,
        )
        self.xctest_list_tests = grpclib.client.UnaryUnaryMethod(
            channel,
            '/idb.CompanionService/xctest_list_tests',
            idb_pb2.XctestListTestsRequest,
            idb_pb2.XctestListTestsResponse,
        )
        self.xctest_run = grpclib.client.UnaryStreamMethod(
            channel,
            '/idb.CompanionService/xctest_run',
            idb_pb2.XctestRunRequest,
            idb_pb2.XctestRunResponse,
        )
