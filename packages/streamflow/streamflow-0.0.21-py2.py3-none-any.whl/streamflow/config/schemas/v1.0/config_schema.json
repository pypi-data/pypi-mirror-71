{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "streamflow_v1.0.json",
  "type": "object",
  "definitions": {
    "workflow": {
      "$id": "#/definitions/workflow",
      "type": "object",
      "definitions": {
        "cwl": {
          "$id": "#/definitions/workflow/definitions/cwl",
          "type": "object",
          "properties": {
            "file": {
              "type": "string"
            },
            "settings": {
              "type": "string"
            }
          },
          "required": [
            "file"
          ],
          "additionalProperties": false
        }
      },
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "cwl"
          ]
        },
        "bindings": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "step": {
                "type": "string"
              },
              "deployments": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "target": {
                "$id": "#/definitions/workflow/properties/bindings/",
                "type": "object",
                "properties": {
                  "model": {
                    "type": "string"
                  },
                  "service": {
                    "type": "string"
                  },
                  "workdir": {
                    "type": "string"
                  }
                },
                "required": [
                  "service"
                ],
                "additionalProperties": false
              }
            }
          },
          "uniqueItems": true
        }
      },
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "cwl"
              }
            }
          },
          "then": {
            "properties": {
              "config": {
                "$id": "#/definitions/workflow/properties/config",
                "type": "object",
                "$ref": "#/definitions/workflow/definitions/cwl"
              }
            }
          }
        }
      ],
      "required": [
        "type",
        "config"
      ]
    },
    "model": {
      "$id": "#/definitions/model",
      "type": "object",
      "definitions": {
        "docker-compose": {
          "$id": "#/definitions/model/definitions/docker-compose",
          "type": "object",
          "properties": {
            "files": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "uniqueItems": true,
              "description": "The files containing the architecture specification"
            },
            "projectName": {
              "type": "string",
              "description": "Specify an alternate project name",
              "default": "The name of the project directory"
            },
            "verbose": {
              "type": "boolean",
              "description": "Show more output"
            },
            "logLevel": {
              "type": "string",
              "enum": [
                "DEBUG",
                "INFO",
                "WARNING",
                "ERROR",
                "CRITICAL"
              ],
              "description": "Set log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)"
            },
            "noAnsi": {
              "type": "boolean",
              "description": "Do not print ANSI control characters"
            },
            "host": {
              "type": "string",
              "description": "Daemon socket to connect to"
            },
            "skipHostnameCheck": {
              "type": "boolean",
              "description": "Don't check the daemon's hostname against the name specified in the client certificate"
            },
            "projectDirectory": {
              "type": "string",
              "description": "Specify an alternate working directory",
              "default": "The path of the Compose file"
            },
            "compatibility": {
              "type": "boolean",
              "description": "If set, Compose will attempt to convert deploy keys in v3 files to their non-Swarm equivalent"
            },
            "noDeps": {
              "type": "boolean",
              "description": "Don't start linked services"
            },
            "forceRecreate": {
              "type": "boolean",
              "description": "Recreate containers even if their configuration and image haven't changed"
            },
            "alwaysRecreateDeps": {
              "type": "boolean",
              "description": "Recreate dependent containers (incompatible with noRecreate)"
            },
            "noRecreate": {
              "type": "boolean",
              "description": "If containers already exist, don't recreate them (incompatible with forceRecreate and renewAnonVolumes)"
            },
            "noBuild": {
              "type": "boolean",
              "description": "Don't build an image, even if it's missing"
            },
            "noStart": {
              "type": "boolean",
              "description": "Don't start the services after creating them"
            },
            "build": {
              "type": "boolean",
              "description": "Build images before starting containers"
            },
            "renewAnonVolumes": {
              "type": "boolean",
              "description": "Recreate anonymous volumes instead of retrieving data from the previous containers"
            },
            "removeOrphans": {
              "type": "boolean",
              "description": "Remove containers for services not defined in the Compose file"
            },
            "removeVolumes": {
              "type": "boolean",
              "description": "Remove named volumes declared in the `volumes` section of the Compose file and anonymous volumes attached to containers"
            },
            "timeout": {
              "type": "integer",
              "description": "Timeout in seconds for container shutdown when attached or when containers are already running",
              "default": 10
            },
            "tls": {
              "type": "boolean",
              "description": "Use TLS (implied by --tlsverify)"
            },
            "tlscacert": {
              "type": "string",
              "description": "Trust certs signed only by this CA"
            },
            "tlscert": {
              "type": "string",
              "description": "Path to TLS certificate file"
            },
            "tlskey": {
              "type": "string",
              "description": "Path to TLS key file"
            },
            "tlsverify": {
              "type": "boolean",
              "description": "Use TLS and verify the remote"
            }
          },
          "required": [
            "files"
          ],
          "additionalProperties": false
        },
        "helm2": {
          "$id": "#/definitions/model/definitions/helm2",
          "type": "object",
          "properties": {
            "atomic": {
              "type": "boolean",
              "description": "If set, installation process purges chart on fail (also sets wait flag)"
            },
            "caFile": {
              "type": "string",
              "description": "Verify certificates of HTTPS-enabled servers using this CA bundle"
            },
            "certFile": {
              "type": "string",
              "description": "Identify HTTPS client using this SSL certificate file"
            },
            "chart": {
              "type": "string",
              "description": "A chart archive. This can be a chart reference, a path to a packaged chart, a path to an unpacked chart directory or a URL"
            },
            "chartVersion": {
              "type": "string",
              "description": "Specify the exact chart version to install",
              "default": "latest"
            },
            "commandLineValues": {
              "type": "string",
              "description": "Set values on the command line. Can separate values with commas: key1=val1,key2=val2"
            },
            "debug": {
              "type": "boolean",
              "description": " Enable verbose output"
            },
            "depUp": {
              "type": "boolean",
              "description": "Run helm dependency update before installing the chart"
            },
            "description": {
              "type": "string",
              "description": "Specify a description for the release"
            },
            "devel": {
              "type": "boolean",
              "description": " Use development versions, too (equivalent to version `>0.0.0-0`). If version is set, this is ignored"
            },
            "fileValues": {
              "type": "string",
              "description": "Set values from respective files. Can separate values with commas: key1=path1,key2=path2"
            },
            "inCluster": {
              "type": "boolean",
              "description": "If true, the Helm connector will use a ServiceAccount to connect to the Kubernetes cluster. This is useful when StreamFlow runs directly inside a Kubernetes Pod",
              "default": false
            },
            "home": {
              "type": "string",
              "description": "Location of the Helm config",
              "default": "${HOME}/.helm"
            },
            "init": {
              "type": "boolean",
              "description": "Runs command `helm init --upgrade` when true",
              "default": false
            },
            "keyFile": {
              "type": "string",
              "description": "Identify HTTPS client using this SSL key file"
            },
            "keyring": {
              "type": "string",
              "description": "Location of public keys used for verification",
              "default": "${HOME}/.gnupg/pubring.gpg"
            },
            "kubeContext": {
              "type": "string",
              "description": "Name of the kubeconfig context to use"
            },
            "kubeconfig": {
              "type": "string",
              "description": "Absolute path of the kubeconfig file to be used"
            },
            "namespace": {
              "type": "string",
              "description": "Namespace to install the release into",
              "default": "Current kube config namespace"
            },
            "nameTemplate": {
              "type": "string",
              "description": "Specify template used to name the release"
            },
            "noCrdHook": {
              "type": "boolean",
              "description": "Prevent CRD hooks from running, but run other hooks"
            },
            "noHooks": {
              "type": "boolean",
              "description": "Prevent hooks from running during install"
            },
            "password": {
              "type": "string",
              "description": " Chart repository password where to locate the requested chart"
            },
            "purge": {
              "type": "boolean",
              "description": "Remove the release from the store and make its name free for later use",
              "default": true
            },
            "releaseName": {
              "type": "string",
              "description": "The release name. If unspecified, it will autogenerate one for you"
            },
            "renderSubchartNotes": {
              "type": "boolean",
              "description": "Render subchart notes along with the parent"
            },
            "repo": {
              "type": "string",
              "description": "Chart repository url where to locate the requested chart"
            },
            "stringValues": {
              "type": "string",
              "description": "Set string values. Can separate values with commas: key1=val1,key2=val2"
            },
            "tillerConnectionTimeout": {
              "type": "integer",
              "description": "The duration (in seconds) Helm will wait to establish a connection to Tiller",
              "default": 300
            },
            "tillerNamespace": {
              "type": "string",
              "description": "Namespace of Tiller",
              "default": "kube-system"
            },
            "timeout": {
              "type": "integer",
              "description": "A value in seconds to wait for Kubernetes commands to complete",
              "default": 300
            },
            "tls": {
              "type": "boolean",
              "description": "Use TLS (implied by --tlsverify)"
            },
            "tlscacert": {
              "type": "string",
              "description": "Trust certs signed only by this CA"
            },
            "tlscert": {
              "type": "string",
              "description": "Path to TLS certificate file"
            },
            "tlshostname": {
              "type": "string",
              "description": "The server name used to verify the hostname on the returned certificates from the server"
            },
            "tlskey": {
              "type": "string",
              "description": "Path to TLS key file"
            },
            "tlsverify": {
              "type": "boolean",
              "description": "Use TLS and verify the remote"
            },
            "transferBufferSize": {
              "type": "integer",
              "description": "Buffer size allocated for local and remote data transfers",
              "default": "32MiB - 1B",
              "$comment": "Kubernetes Python client talks with its server counterpart, written in Golang, via Websocket protocol. The standard websocket package in Golang defines DefaultMaxPayloadBytes equal to 32 MB. Nevertheless, since kubernetes-client prepends channel number to the actual payload (which is always 0 for STDIN), we must reserve 1 byte for this purpose"
            },
            "username": {
              "type": "string",
              "description": "Chart repository username where to locate the requested chart"
            },
            "yamlValues": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Specify values in a list of YAML files and/or URLs",
              "default": []
            },
            "verify": {
              "type": "boolean",
              "description": "Verify the package before installing it"
            },
            "wait": {
              "type": "boolean",
              "description": "If set, will wait until all Pods, PVCs, Services, and minimum number of Pods of a Deployment are in a ready state before marking the release as successful. It will wait for as long as timeout",
              "default": true
            }
          },
          "required": [
            "chart"
          ],
          "additionalProperties": false
        },
        "helm3": {
          "$id": "#/definitions/model/definitions/helm3",
          "type": "object",
          "properties": {
            "atomic": {
              "type": "boolean",
              "description": "If set, installation process purges chart on fail (also sets wait flag)"
            },
            "caFile": {
              "type": "string",
              "description": "Verify certificates of HTTPS-enabled servers using this CA bundle"
            },
            "certFile": {
              "type": "string",
              "description": "Identify HTTPS client using this SSL certificate file"
            },
            "chart": {
              "type": "string",
              "description": "A chart archive. This can be a chart reference, a path to a packaged chart, a path to an unpacked chart directory or a URL"
            },
            "chartVersion": {
              "type": "string",
              "description": "Specify the exact chart version to install",
              "default": "latest"
            },
            "commandLineValues": {
              "type": "string",
              "description": "Set values on the command line. Can separate values with commas: key1=val1,key2=val2"
            },
            "debug": {
              "type": "boolean",
              "description": " Enable verbose output"
            },
            "depUp": {
              "type": "boolean",
              "description": "Run helm dependency update before installing the chart"
            },
            "devel": {
              "type": "boolean",
              "description": " Use development versions, too (equivalent to version `>0.0.0-0`). If version is set, this is ignored"
            },
            "fileValues": {
              "type": "string",
              "description": "Set values from respective files. Can separate values with commas: key1=path1,key2=path2"
            },
            "inCluster": {
              "type": "boolean",
              "description": "If true, the Helm connector will use a ServiceAccount to connect to the Kubernetes cluster. This is useful when StreamFlow runs directly inside a Kubernetes Pod",
              "default": false
            },
            "keepHistory": {
              "type": "boolean",
              "description": "Remove all associated resources and mark the release as deleted, but retain the release history",
              "default": false
            },
            "keyFile": {
              "type": "string",
              "description": "Identify HTTPS client using this SSL key file"
            },
            "keyring": {
              "type": "string",
              "description": "Location of public keys used for verification",
              "default": "${HOME}/.gnupg/pubring.gpg"
            },
            "kubeContext": {
              "type": "string",
              "description": "Name of the kubeconfig context to use"
            },
            "kubeconfig": {
              "type": "string",
              "description": "Absolute path of the kubeconfig file to be used"
            },
            "namespace": {
              "type": "string",
              "description": "Namespace to install the release into",
              "default": "Current kube config namespace"
            },
            "nameTemplate": {
              "type": "string",
              "description": "Specify template used to name the release"
            },
            "noHooks": {
              "type": "boolean",
              "description": "Prevent hooks from running during install"
            },
            "password": {
              "type": "string",
              "description": " Chart repository password where to locate the requested chart"
            },
            "registryConfig": {
              "type": "string",
              "description": "Path to the registry config file",
              "default": "${HOME}/.config/helm/registry.json"
            },
            "repositoryCache": {
              "type": "string",
              "description": "Path to the file containing cached repository indexes",
              "default": "${HOME}/.cache/helm/repository"
            },
            "repositoryConfig": {
              "type": "string",
              "description": "Path to the file containing repository names and URLs",
              "default": "${HOME}/.config/helm/repositories.yaml"
            },
            "releaseName": {
              "type": "string",
              "description": "The release name. If unspecified, it will autogenerate one for you"
            },
            "renderSubchartNotes": {
              "type": "boolean",
              "description": "Render subchart notes along with the parent"
            },
            "repo": {
              "type": "string",
              "description": "Chart repository url where to locate the requested chart"
            },
            "skipCrds": {
              "type": "boolean",
              "description": "If set, no CRDs will be installed",
              "default": false
            },
            "stringValues": {
              "type": "string",
              "description": "Set string values. Can separate values with commas: key1=val1,key2=val2"
            },
            "timeout": {
              "type": "string",
              "description": "Time to wait for any individual Kubernetes operation",
              "default": "1000m"
            },
            "transferBufferSize": {
              "type": "integer",
              "description": "Buffer size allocated for local and remote data transfers",
              "default": "32MiB - 1B",
              "$comment": "Kubernetes Python client talks with its server counterpart, written in Golang, via Websocket protocol. The standard websocket package in Golang defines DefaultMaxPayloadBytes equal to 32 MB. Nevertheless, since kubernetes-client prepends channel number to the actual payload (which is always 0 for STDIN), we must reserve 1 byte for this purpose"
            },
            "username": {
              "type": "string",
              "description": "Chart repository username where to locate the requested chart"
            },
            "yamlValues": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Specify values in a list of YAML files and/or URLs",
              "default": []
            },
            "verify": {
              "type": "boolean",
              "description": "Verify the package before installing it"
            },
            "wait": {
              "type": "boolean",
              "description": "If set, will wait until all Pods, PVCs, Services, and minimum number of Pods of a Deployment are in a ready state before marking the release as successful. It will wait for as long as timeout",
              "default": true
            }
          },
          "required": [
            "chart"
          ],
          "additionalProperties": false
        },
        "occam": {
          "$id": "#/definitions/model/definitions/occam",
          "type": "object",
          "properties": {
            "file": {
              "type": "string",
              "description": "Path to the file describing Occam environment"
            },
            "hostname": {
              "type": "string",
              "description": "Hostname of Occam facility",
              "default": "occam.c3s.unito.it"
            },
            "sshKey": {
              "type": "string",
              "description": "Path to the SSH key needed to connect with Occam environment"
            },
            "sshKeyPassphrase": {
              "type": "string",
              "description": "Passphrase protecting Occam SSH key"
            },
            "socketTimeout": {
              "type": "number",
              "description": "Timeout for file transfer socket",
              "default": "60.0 seconds"
            },
            "username": {
              "type": "string",
              "description": "Username needed to connect with Occam environment"
            }
          },
          "required": [
            "file",
            "sshKey",
            "username"
          ],
          "additionalProperties": false
        }
      },
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "docker-compose",
            "helm",
            "helm2",
            "helm3",
            "occam"
          ]
        },
        "external": {
          "type": "boolean",
          "description": "If set, Streamflow does not manage the lifecycle of the execution environment. This means that all required services must be up and running when the workflow starts",
          "default": false
        }
      },
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "docker-compose"
              }
            }
          },
          "then": {
            "properties": {
              "config": {
                "$id": "#/definitions/model/properties/config",
                "type": "object",
                "$ref": "#/definitions/model/definitions/docker-compose"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "helm2"
              }
            }
          },
          "then": {
            "properties": {
              "config": {
                "$id": "#/definitions/model/properties/config",
                "type": "object",
                "$ref": "#/definitions/model/definitions/helm2"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "pattern": "helm(3)?"
              }
            }
          },
          "then": {
            "properties": {
              "config": {
                "$id": "#/definitions/model/properties/config",
                "type": "object",
                "$ref": "#/definitions/model/definitions/helm3"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "occam"
              }
            }
          },
          "then": {
            "properties": {
              "config": {
                "$id": "#/definitions/model/properties/config",
                "type": "object",
                "$ref": "#/definitions/model/definitions/occam"
              }
            }
          }
        }
      ],
      "required": [
        "type",
        "config"
      ]
    }
  },
  "properties": {
    "version": {
      "type": "string"
    },
    "workflows": {
      "$id": "#/properties/workflows",
      "type": "object",
      "patternProperties": {
        "^[a-z][a-zA-Z0-9._-]*$": {
          "$ref": "#/definitions/workflow"
        }
      },
      "additionalProperties": false
    },
    "models": {
      "$id": "#/properties/models",
      "type": "object",
      "patternProperties": {
        "^[a-z][a-zA-Z0-9._-]*$": {
          "$ref": "#/definitions/model"
        }
      },
      "additionalProperties": false
    }
  },
  "required": [
    "version"
  ]
}