# coding: utf-8

"""
    Bot Action Server

    Allows custom Rocket League bots to accept tactical suggestions in the middle of a game.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: rlbotofficial@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class BotAction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'action_type': 'str',
        'strategic_category': 'StrategicCategory',
        'data': 'dict(str, object)'
    }

    attribute_map = {
        'description': 'description',
        'action_type': 'actionType',
        'strategic_category': 'strategicCategory',
        'data': 'data'
    }

    def __init__(self, description=None, action_type=None, strategic_category=None, data=None):  # noqa: E501
        """BotAction - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._action_type = None
        self._strategic_category = None
        self._data = None
        self.discriminator = None
        if description is not None:
            self.description = description
        self.action_type = action_type
        if strategic_category is not None:
            self.strategic_category = strategic_category
        if data is not None:
            self.data = data

    @property
    def description(self):
        """Gets the description of this BotAction.  # noqa: E501


        :return: The description of this BotAction.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BotAction.


        :param description: The description of this BotAction.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def action_type(self):
        """Gets the action_type of this BotAction.  # noqa: E501


        :return: The action_type of this BotAction.  # noqa: E501
        :rtype: str
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this BotAction.


        :param action_type: The action_type of this BotAction.  # noqa: E501
        :type: str
        """
        if action_type is None:
            raise ValueError("Invalid value for `action_type`, must not be `None`")  # noqa: E501

        self._action_type = action_type

    @property
    def strategic_category(self):
        """Gets the strategic_category of this BotAction.  # noqa: E501


        :return: The strategic_category of this BotAction.  # noqa: E501
        :rtype: StrategicCategory
        """
        return self._strategic_category

    @strategic_category.setter
    def strategic_category(self, strategic_category):
        """Sets the strategic_category of this BotAction.


        :param strategic_category: The strategic_category of this BotAction.  # noqa: E501
        :type: StrategicCategory
        """

        self._strategic_category = strategic_category

    @property
    def data(self):
        """Gets the data of this BotAction.  # noqa: E501


        :return: The data of this BotAction.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this BotAction.


        :param data: The data of this BotAction.  # noqa: E501
        :type: dict(str, object)
        """

        self._data = data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BotAction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BotAction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
