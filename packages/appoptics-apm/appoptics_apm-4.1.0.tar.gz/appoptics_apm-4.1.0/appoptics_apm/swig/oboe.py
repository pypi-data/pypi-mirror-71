# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_oboe', [dirname(__file__)])
        except ImportError:
            import _oboe
            return _oboe
        if fp is not None:
            try:
                _mod = imp.load_module('_oboe', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _oboe = swig_import_helper()
    del swig_import_helper
else:
    import _oboe
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_oboe.OBOE_DEBUG_DISABLED_swigconstant(_oboe)
OBOE_DEBUG_DISABLED = _oboe.OBOE_DEBUG_DISABLED

_oboe.OBOE_DEBUG_FATAL_swigconstant(_oboe)
OBOE_DEBUG_FATAL = _oboe.OBOE_DEBUG_FATAL

_oboe.OBOE_DEBUG_ERROR_swigconstant(_oboe)
OBOE_DEBUG_ERROR = _oboe.OBOE_DEBUG_ERROR

_oboe.OBOE_DEBUG_WARNING_swigconstant(_oboe)
OBOE_DEBUG_WARNING = _oboe.OBOE_DEBUG_WARNING

_oboe.OBOE_DEBUG_INFO_swigconstant(_oboe)
OBOE_DEBUG_INFO = _oboe.OBOE_DEBUG_INFO

_oboe.OBOE_DEBUG_LOW_swigconstant(_oboe)
OBOE_DEBUG_LOW = _oboe.OBOE_DEBUG_LOW

_oboe.OBOE_DEBUG_MEDIUM_swigconstant(_oboe)
OBOE_DEBUG_MEDIUM = _oboe.OBOE_DEBUG_MEDIUM

_oboe.OBOE_DEBUG_HIGH_swigconstant(_oboe)
OBOE_DEBUG_HIGH = _oboe.OBOE_DEBUG_HIGH

_oboe.OBOE_MODULE_ALL_swigconstant(_oboe)
OBOE_MODULE_ALL = _oboe.OBOE_MODULE_ALL

_oboe.OBOE_MODULE_UNDEF_swigconstant(_oboe)
OBOE_MODULE_UNDEF = _oboe.OBOE_MODULE_UNDEF

_oboe.OBOE_MODULE_LIBOBOE_swigconstant(_oboe)
OBOE_MODULE_LIBOBOE = _oboe.OBOE_MODULE_LIBOBOE

_oboe.OBOE_MODULE_SETTINGS_swigconstant(_oboe)
OBOE_MODULE_SETTINGS = _oboe.OBOE_MODULE_SETTINGS

_oboe.OBOE_MODULE_REPORTER_FILE_swigconstant(_oboe)
OBOE_MODULE_REPORTER_FILE = _oboe.OBOE_MODULE_REPORTER_FILE

_oboe.OBOE_MODULE_REPORTER_UDP_swigconstant(_oboe)
OBOE_MODULE_REPORTER_UDP = _oboe.OBOE_MODULE_REPORTER_UDP

_oboe.OBOE_MODULE_REPORTER_SSL_swigconstant(_oboe)
OBOE_MODULE_REPORTER_SSL = _oboe.OBOE_MODULE_REPORTER_SSL

_oboe.OBOE_MODULE_APACHE_swigconstant(_oboe)
OBOE_MODULE_APACHE = _oboe.OBOE_MODULE_APACHE

_oboe.OBOE_MODULE_NGINX_swigconstant(_oboe)
OBOE_MODULE_NGINX = _oboe.OBOE_MODULE_NGINX

_oboe.OBOE_MODULE_PHP_swigconstant(_oboe)
OBOE_MODULE_PHP = _oboe.OBOE_MODULE_PHP

_oboe.OBOE_MODULE_DOTNET_swigconstant(_oboe)
OBOE_MODULE_DOTNET = _oboe.OBOE_MODULE_DOTNET
class Metadata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Metadata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Metadata, name)
    __repr__ = _swig_repr

    def __init__(self, md):
        this = _oboe.new_Metadata(md)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _oboe.delete_Metadata
    __del__ = lambda self: None
    __swig_getmethods__["fromString"] = lambda x: _oboe.Metadata_fromString
    if _newclass:
        fromString = staticmethod(_oboe.Metadata_fromString)

    def createEvent(self):
        return _oboe.Metadata_createEvent(self)
    __swig_getmethods__["makeRandom"] = lambda x: _oboe.Metadata_makeRandom
    if _newclass:
        makeRandom = staticmethod(_oboe.Metadata_makeRandom)

    def copy(self):
        return _oboe.Metadata_copy(self)

    def isValid(self):
        return _oboe.Metadata_isValid(self)

    def isSampled(self):
        return _oboe.Metadata_isSampled(self)

    def toString(self):
        return _oboe.Metadata_toString(self)
Metadata_swigregister = _oboe.Metadata_swigregister
Metadata_swigregister(Metadata)

def Metadata_fromString(s):
    return _oboe.Metadata_fromString(s)
Metadata_fromString = _oboe.Metadata_fromString

def Metadata_makeRandom(sampled=True):
    return _oboe.Metadata_makeRandom(sampled)
Metadata_makeRandom = _oboe.Metadata_makeRandom

class Context(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Context, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Context, name)
    __repr__ = _swig_repr
    __swig_getmethods__["setTracingMode"] = lambda x: _oboe.Context_setTracingMode
    if _newclass:
        setTracingMode = staticmethod(_oboe.Context_setTracingMode)
    __swig_getmethods__["setDefaultSampleRate"] = lambda x: _oboe.Context_setDefaultSampleRate
    if _newclass:
        setDefaultSampleRate = staticmethod(_oboe.Context_setDefaultSampleRate)
    __swig_getmethods__["getDecisions"] = lambda x: _oboe.Context_getDecisions
    if _newclass:
        getDecisions = staticmethod(_oboe.Context_getDecisions)
    __swig_getmethods__["get"] = lambda x: _oboe.Context_get
    if _newclass:
        get = staticmethod(_oboe.Context_get)
    __swig_getmethods__["toString"] = lambda x: _oboe.Context_toString
    if _newclass:
        toString = staticmethod(_oboe.Context_toString)
    __swig_getmethods__["set"] = lambda x: _oboe.Context_set
    if _newclass:
        set = staticmethod(_oboe.Context_set)
    __swig_getmethods__["fromString"] = lambda x: _oboe.Context_fromString
    if _newclass:
        fromString = staticmethod(_oboe.Context_fromString)
    __swig_getmethods__["copy"] = lambda x: _oboe.Context_copy
    if _newclass:
        copy = staticmethod(_oboe.Context_copy)
    __swig_getmethods__["setSampledFlag"] = lambda x: _oboe.Context_setSampledFlag
    if _newclass:
        setSampledFlag = staticmethod(_oboe.Context_setSampledFlag)
    __swig_getmethods__["clear"] = lambda x: _oboe.Context_clear
    if _newclass:
        clear = staticmethod(_oboe.Context_clear)
    __swig_getmethods__["isValid"] = lambda x: _oboe.Context_isValid
    if _newclass:
        isValid = staticmethod(_oboe.Context_isValid)
    __swig_getmethods__["isSampled"] = lambda x: _oboe.Context_isSampled
    if _newclass:
        isSampled = staticmethod(_oboe.Context_isSampled)
    __swig_getmethods__["validateTransformServiceName"] = lambda x: _oboe.Context_validateTransformServiceName
    if _newclass:
        validateTransformServiceName = staticmethod(_oboe.Context_validateTransformServiceName)
    __swig_getmethods__["shutdown"] = lambda x: _oboe.Context_shutdown
    if _newclass:
        shutdown = staticmethod(_oboe.Context_shutdown)
    __swig_getmethods__["isReady"] = lambda x: _oboe.Context_isReady
    if _newclass:
        isReady = staticmethod(_oboe.Context_isReady)
    __swig_getmethods__["createEvent"] = lambda x: _oboe.Context_createEvent
    if _newclass:
        createEvent = staticmethod(_oboe.Context_createEvent)
    __swig_getmethods__["startTrace"] = lambda x: _oboe.Context_startTrace
    if _newclass:
        startTrace = staticmethod(_oboe.Context_startTrace)

    def __init__(self):
        this = _oboe.new_Context()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _oboe.delete_Context
    __del__ = lambda self: None
Context_swigregister = _oboe.Context_swigregister
Context_swigregister(Context)

def Context_setTracingMode(newMode):
    return _oboe.Context_setTracingMode(newMode)
Context_setTracingMode = _oboe.Context_setTracingMode

def Context_setDefaultSampleRate(newRate):
    return _oboe.Context_setDefaultSampleRate(newRate)
Context_setDefaultSampleRate = _oboe.Context_setDefaultSampleRate

def Context_getDecisions(*args):
    return _oboe.Context_getDecisions(*args)
Context_getDecisions = _oboe.Context_getDecisions

def Context_get():
    return _oboe.Context_get()
Context_get = _oboe.Context_get

def Context_toString():
    return _oboe.Context_toString()
Context_toString = _oboe.Context_toString

def Context_set(md):
    return _oboe.Context_set(md)
Context_set = _oboe.Context_set

def Context_fromString(s):
    return _oboe.Context_fromString(s)
Context_fromString = _oboe.Context_fromString

def Context_copy():
    return _oboe.Context_copy()
Context_copy = _oboe.Context_copy

def Context_setSampledFlag():
    return _oboe.Context_setSampledFlag()
Context_setSampledFlag = _oboe.Context_setSampledFlag

def Context_clear():
    return _oboe.Context_clear()
Context_clear = _oboe.Context_clear

def Context_isValid():
    return _oboe.Context_isValid()
Context_isValid = _oboe.Context_isValid

def Context_isSampled():
    return _oboe.Context_isSampled()
Context_isSampled = _oboe.Context_isSampled

def Context_validateTransformServiceName(service_key):
    return _oboe.Context_validateTransformServiceName(service_key)
Context_validateTransformServiceName = _oboe.Context_validateTransformServiceName

def Context_shutdown():
    return _oboe.Context_shutdown()
Context_shutdown = _oboe.Context_shutdown

def Context_isReady(timeout):
    return _oboe.Context_isReady(timeout)
Context_isReady = _oboe.Context_isReady

def Context_createEvent():
    return _oboe.Context_createEvent()
Context_createEvent = _oboe.Context_createEvent

def Context_startTrace():
    return _oboe.Context_startTrace()
Context_startTrace = _oboe.Context_startTrace

class Event(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Event, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _oboe.delete_Event
    __del__ = lambda self: None

    def addInfo(self, *args):
        return _oboe.Event_addInfo(self, *args)

    def addEdge(self, md):
        return _oboe.Event_addEdge(self, md)

    def addEdgeStr(self, val):
        return _oboe.Event_addEdgeStr(self, val)

    def getMetadata(self):
        return _oboe.Event_getMetadata(self)

    def metadataString(self):
        return _oboe.Event_metadataString(self)

    def send(self):
        return _oboe.Event_send(self)
    __swig_getmethods__["startTrace"] = lambda x: _oboe.Event_startTrace
    if _newclass:
        startTrace = staticmethod(_oboe.Event_startTrace)
Event_swigregister = _oboe.Event_swigregister
Event_swigregister(Event)

def Event_startTrace(md):
    return _oboe.Event_startTrace(md)
Event_startTrace = _oboe.Event_startTrace

class Span(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Span, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Span, name)
    __repr__ = _swig_repr
    __swig_getmethods__["createSpan"] = lambda x: _oboe.Span_createSpan
    if _newclass:
        createSpan = staticmethod(_oboe.Span_createSpan)
    __swig_getmethods__["createHttpSpan"] = lambda x: _oboe.Span_createHttpSpan
    if _newclass:
        createHttpSpan = staticmethod(_oboe.Span_createHttpSpan)

    def __init__(self):
        this = _oboe.new_Span()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _oboe.delete_Span
    __del__ = lambda self: None
Span_swigregister = _oboe.Span_swigregister
Span_swigregister(Span)

def Span_createSpan(transaction, domain, duration, service_name=None):
    return _oboe.Span_createSpan(transaction, domain, duration, service_name)
Span_createSpan = _oboe.Span_createSpan

def Span_createHttpSpan(transaction, url, domain, duration, status, method, has_error, service_name=None):
    return _oboe.Span_createHttpSpan(transaction, url, domain, duration, status, method, has_error, service_name)
Span_createHttpSpan = _oboe.Span_createHttpSpan

class MetricTags(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MetricTags, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MetricTags, name)
    __repr__ = _swig_repr

    def __init__(self, count):
        this = _oboe.new_MetricTags(count)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _oboe.delete_MetricTags
    __del__ = lambda self: None

    def add(self, index, k, v):
        return _oboe.MetricTags_add(self, index, k, v)
MetricTags_swigregister = _oboe.MetricTags_swigregister
MetricTags_swigregister(MetricTags)

class CustomMetrics(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CustomMetrics, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CustomMetrics, name)
    __repr__ = _swig_repr
    __swig_getmethods__["summary"] = lambda x: _oboe.CustomMetrics_summary
    if _newclass:
        summary = staticmethod(_oboe.CustomMetrics_summary)
    __swig_getmethods__["increment"] = lambda x: _oboe.CustomMetrics_increment
    if _newclass:
        increment = staticmethod(_oboe.CustomMetrics_increment)

    def __init__(self):
        this = _oboe.new_CustomMetrics()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _oboe.delete_CustomMetrics
    __del__ = lambda self: None
CustomMetrics_swigregister = _oboe.CustomMetrics_swigregister
CustomMetrics_swigregister(CustomMetrics)

def CustomMetrics_summary(name, value, count, host_tag, service_name, tags, tags_count):
    return _oboe.CustomMetrics_summary(name, value, count, host_tag, service_name, tags, tags_count)
CustomMetrics_summary = _oboe.CustomMetrics_summary

def CustomMetrics_increment(name, count, host_tag, service_name, tags, tags_count):
    return _oboe.CustomMetrics_increment(name, count, host_tag, service_name, tags, tags_count)
CustomMetrics_increment = _oboe.CustomMetrics_increment

class Reporter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Reporter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Reporter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["init_status"] = _oboe.Reporter_init_status_set
    __swig_getmethods__["init_status"] = _oboe.Reporter_init_status_get
    if _newclass:
        init_status = _swig_property(_oboe.Reporter_init_status_get, _oboe.Reporter_init_status_set)

    def __init__(self, hostname_alias, log_level, log_file_path, max_transactions, max_flush_wait_time, events_flush_interval, events_flush_batch_size, reporter, host, service_key, trusted_path, buffer_size, trace_metrics, histogram_precision, token_bucket_capacity, token_bucket_rate, file_single, ec2_metadata_timeout):
        this = _oboe.new_Reporter(hostname_alias, log_level, log_file_path, max_transactions, max_flush_wait_time, events_flush_interval, events_flush_batch_size, reporter, host, service_key, trusted_path, buffer_size, trace_metrics, histogram_precision, token_bucket_capacity, token_bucket_rate, file_single, ec2_metadata_timeout)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _oboe.delete_Reporter
    __del__ = lambda self: None

    def sendReport(self, *args):
        return _oboe.Reporter_sendReport(self, *args)

    def sendStatus(self, *args):
        return _oboe.Reporter_sendStatus(self, *args)
Reporter_swigregister = _oboe.Reporter_swigregister
Reporter_swigregister(Reporter)

class DebugLogger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DebugLogger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DebugLogger, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _oboe.delete_DebugLogger
    __del__ = lambda self: None

    def log(self, module, level, source_name, source_lineno, msg):
        return _oboe.DebugLogger_log(self, module, level, source_name, source_lineno, msg)
DebugLogger_swigregister = _oboe.DebugLogger_swigregister
DebugLogger_swigregister(DebugLogger)


def oboe_debug_log_handler(context, module, level, source_name, source_lineno, msg):
    return _oboe.oboe_debug_log_handler(context, module, level, source_name, source_lineno, msg)
oboe_debug_log_handler = _oboe.oboe_debug_log_handler
class DebugLog(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DebugLog, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DebugLog, name)
    __repr__ = _swig_repr
    __swig_getmethods__["getLevelName"] = lambda x: _oboe.DebugLog_getLevelName
    if _newclass:
        getLevelName = staticmethod(_oboe.DebugLog_getLevelName)
    __swig_getmethods__["getModuleName"] = lambda x: _oboe.DebugLog_getModuleName
    if _newclass:
        getModuleName = staticmethod(_oboe.DebugLog_getModuleName)
    __swig_getmethods__["getLevel"] = lambda x: _oboe.DebugLog_getLevel
    if _newclass:
        getLevel = staticmethod(_oboe.DebugLog_getLevel)
    __swig_getmethods__["setLevel"] = lambda x: _oboe.DebugLog_setLevel
    if _newclass:
        setLevel = staticmethod(_oboe.DebugLog_setLevel)
    __swig_getmethods__["setOutputStream"] = lambda x: _oboe.DebugLog_setOutputStream
    if _newclass:
        setOutputStream = staticmethod(_oboe.DebugLog_setOutputStream)
    __swig_getmethods__["setOutputFile"] = lambda x: _oboe.DebugLog_setOutputFile
    if _newclass:
        setOutputFile = staticmethod(_oboe.DebugLog_setOutputFile)
    __swig_getmethods__["addDebugLogger"] = lambda x: _oboe.DebugLog_addDebugLogger
    if _newclass:
        addDebugLogger = staticmethod(_oboe.DebugLog_addDebugLogger)
    __swig_getmethods__["removeDebugLogger"] = lambda x: _oboe.DebugLog_removeDebugLogger
    if _newclass:
        removeDebugLogger = staticmethod(_oboe.DebugLog_removeDebugLogger)
    __swig_getmethods__["logMessage"] = lambda x: _oboe.DebugLog_logMessage
    if _newclass:
        logMessage = staticmethod(_oboe.DebugLog_logMessage)

    def __init__(self):
        this = _oboe.new_DebugLog()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _oboe.delete_DebugLog
    __del__ = lambda self: None
DebugLog_swigregister = _oboe.DebugLog_swigregister
DebugLog_swigregister(DebugLog)

def DebugLog_getLevelName(level):
    return _oboe.DebugLog_getLevelName(level)
DebugLog_getLevelName = _oboe.DebugLog_getLevelName

def DebugLog_getModuleName(module):
    return _oboe.DebugLog_getModuleName(module)
DebugLog_getModuleName = _oboe.DebugLog_getModuleName

def DebugLog_getLevel(module):
    return _oboe.DebugLog_getLevel(module)
DebugLog_getLevel = _oboe.DebugLog_getLevel

def DebugLog_setLevel(module, newLevel):
    return _oboe.DebugLog_setLevel(module, newLevel)
DebugLog_setLevel = _oboe.DebugLog_setLevel

def DebugLog_setOutputStream(newStream):
    return _oboe.DebugLog_setOutputStream(newStream)
DebugLog_setOutputStream = _oboe.DebugLog_setOutputStream

def DebugLog_setOutputFile(pathname):
    return _oboe.DebugLog_setOutputFile(pathname)
DebugLog_setOutputFile = _oboe.DebugLog_setOutputFile

def DebugLog_addDebugLogger(newLogger, logLevel):
    return _oboe.DebugLog_addDebugLogger(newLogger, logLevel)
DebugLog_addDebugLogger = _oboe.DebugLog_addDebugLogger

def DebugLog_removeDebugLogger(oldLogger):
    return _oboe.DebugLog_removeDebugLogger(oldLogger)
DebugLog_removeDebugLogger = _oboe.DebugLog_removeDebugLogger

def DebugLog_logMessage(module, level, source_name, source_lineno, msg):
    return _oboe.DebugLog_logMessage(module, level, source_name, source_lineno, msg)
DebugLog_logMessage = _oboe.DebugLog_logMessage

class Config(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Config, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Config, name)
    __repr__ = _swig_repr
    __swig_getmethods__["checkVersion"] = lambda x: _oboe.Config_checkVersion
    if _newclass:
        checkVersion = staticmethod(_oboe.Config_checkVersion)
    __swig_getmethods__["getVersion"] = lambda x: _oboe.Config_getVersion
    if _newclass:
        getVersion = staticmethod(_oboe.Config_getVersion)
    __swig_getmethods__["getRevision"] = lambda x: _oboe.Config_getRevision
    if _newclass:
        getRevision = staticmethod(_oboe.Config_getRevision)

    def __init__(self):
        this = _oboe.new_Config()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _oboe.delete_Config
    __del__ = lambda self: None
Config_swigregister = _oboe.Config_swigregister
Config_swigregister(Config)

def Config_checkVersion(version, revision):
    return _oboe.Config_checkVersion(version, revision)
Config_checkVersion = _oboe.Config_checkVersion

def Config_getVersion():
    return _oboe.Config_getVersion()
Config_getVersion = _oboe.Config_getVersion

def Config_getRevision():
    return _oboe.Config_getRevision()
Config_getRevision = _oboe.Config_getRevision

# This file is compatible with both classic and new-style classes.


